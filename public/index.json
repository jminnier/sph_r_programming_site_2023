[{"authors":["Ted"],"categories":null,"content":"Ted Laderas is an Assistant Professor in the Division of Bioinformatics and Computational Biology in the Department of Medical Informatics and Clinical Epidemiology. He is a certified RStudio Instructor in both the Tidyverse and Shiny. He is also a co-founder of the Cascadia R conference and BioData Club.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1640215116,"objectID":"b51ada7fb0c28b09305ee455b1e73af6","permalink":"https://sph-r-programming-2022.netlify.app/authors/jessica/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/jessica/","section":"authors","summary":"Ted Laderas is an Assistant Professor in the Division of Bioinformatics and Computational Biology in the Department of Medical Informatics and Clinical Epidemiology. He is a certified RStudio Instructor in both the Tidyverse and Shiny. He is also a co-founder of the Cascadia R conference and BioData Club.","tags":null,"title":"Ted Laderas","type":"authors"},{"authors":["Jessica"],"categories":null,"content":"Jessica Minnier is an Associate Professor in the OHSU-PSU School of Public Health and the Knight Cancer Institute Biostatistics Shared Resource.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1640215116,"objectID":"c6de7d38fbd44ef0c4e79b5f2459a01e","permalink":"https://sph-r-programming-2022.netlify.app/authors/ted/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/ted/","section":"authors","summary":"Jessica Minnier is an Associate Professor in the OHSU-PSU School of Public Health and the Knight Cancer Institute Biostatistics Shared Resource.","tags":null,"title":"Jessica Minnier","type":"authors"},{"authors":null,"categories":null,"content":"   Preparation Problem sets Evaluation assignments Code-through Exams Final project   Preparation You will get the most out of this class if you (1) attend class, (2) complete all the readings, and (3) engage1 with the readings.2\nTo encourage attendance and preparation, I use an honor-system-based self-reporting system. At the beginning of every class, I will post a quiz on iCollege with the following questions:\nAre you here in class today?  Yes (3.5 points) No (0 points)  How much of today’s reading did you finish?  100% (6 points) 75–99% (5 points) 50–74% (4 points) 11–49% (2 points) 0–10% (0 points)  How well did you read?  I was engaged and read carefully (6 points) I was fairly engaged and read fairly carefully (4 points) I skimmed it (2 points) I didn’t read it at all (0 points)   Each day is worth 15.5 points. It is unlikely that you’ll score a 15.5 every day.3 Your total preparation score will naturally shift up at the end of the semester, though, since the preparation category is worth 210 points rather than 217 (15.5 × 14), so be honest—there’s wiggle room in the point system for honesty.\n Problem sets To practice writing R code, running inferential models, and thinking about causation, you will complete a series of problem sets.\nThere are 7 problem sets on the schedule. I will keep the highest grades for 6 of them. That is, I will drop the lowest score (even if it’s a zero). This means you can skip one of the problem sets. You need to show that you made a good faith effort to work each question. I will not grade these in detail. The problem sets will be graded using a check system:\n ✔+: (44 points (110%) in gradebook) Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Document is clean and easy to follow. Work is exceptional. I will not assign these often. ✔: (37 points (93%) in gradebook) Problem set is 70–99% complete and most answers are correct. This is the expected level of performance. ✔−: (20 points (50%) in gradebook) Problem set is less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not asisgn these often.  You may (and should!) work together on the problem sets, but you must turn in your own answers. You cannot work in groups of more than four people, and you must note who participated in the group in your assignment.\n Evaluation assignments For your final project, you will conduct a pre-registered evaluation of a social program using synthetic data. To (1) give you practice with the principles of program evaluation, research design, measurement, and causal diagrams, and (2) help you with the foundation of your final project, you will complete a set of four evaluation-related assignments.\nIdeally these will become major sections of your final project. However, there is no requirement that the programs you use in these assignments must be the same as the final project. If, through these assignments, you discover that your initially chosen program is too simple, too complex, too boring, etc., you can change at any time.\nThese assignments will be graded using the same check system from the problem sets, but scaled down to 30 points.\n Code-through The objectives of this class include “Become curious and confident in consuming and producing evaluations,” “Run statistical models,” and “Share your analyses and data with the public.” To help you with this, you will write a code-through tutorial of some program evaluation principle or approach.\nOne of the reasons R is so popular is because the R community is exceptionally generous and open and sharing.4 The internet is full of tutorials and code-throughs where people explain how to do something interesting with R.\nYou will write one code-through or tutorial during the semester on a of your choice (related to program evaluation and causal inference, of course). You will complete this on your own, but you can get help from your team (but you can’t all write about the same topic). You can find the instructions for the assignment here.\nThis assignment will be graded using the same check system from the problem sets, but scaled down to 30 points.\n Exams There will be two exams covering (1) program evaluation, design, and causation, and (2) the core statistical tools of program evaluation and causal inference.\nYou will take these exams online through iCollege. The exams will be timed, but you can use notes and readings and the Google. You must take the exams on your own though, and not talk to anyone about them.5\n Final project At the end of the course, you will demonstrate your knowledge of program evaluation and causal inference by completing a final project.\nComplete details for the final project are here.\nThere is no final exam. This project is your final exam.\n  Take detailed notes, work through the example code and try to understand it, have vivid dreams about statistics, etc.↩︎\n Also (4) ask for help!↩︎\n But it would be amazing if you did!↩︎\n So are Python and other modern open source languages too.↩︎\n Again, be honest.↩︎\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1614042883,"objectID":"3aa23ffb1eb3dedbe4d8a9c2165e2c58","permalink":"https://sph-r-programming-2022.netlify.app/assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/assignment/","section":"assignment","summary":"Preparation Problem sets Evaluation assignments Code-through Exams Final project   Preparation You will get the most out of this class if you (1) attend class, (2) complete all the readings, and (3) engage1 with the readings.2\nTo encourage attendance and preparation, I use an honor-system-based self-reporting system. At the beginning of every class, I will post a quiz on iCollege with the following questions:\nAre you here in class today?","tags":null,"title":"Assignment details","type":"docs"},{"authors":null,"categories":null,"content":"  You can download a BibTeX file of all the non-web-based readings in the course:\n  references.bib  You can open the file in BibDesk on macOS, JabRef on Windows, or Zotero or Mendeley online.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1614043016,"objectID":"5912f73d0134416d302ef6bce989b8bf","permalink":"https://sph-r-programming-2022.netlify.app/reference/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reference/","section":"reference","summary":"You can download a BibTeX file of all the non-web-based readings in the course:\n  references.bib  You can open the file in BibDesk on macOS, JabRef on Windows, or Zotero or Mendeley online.","tags":null,"title":"Citations and bibliography","type":"docs"},{"authors":null,"categories":null,"content":"  I will post all the materials (slides, example code, in-class activities, etc.) from each class session on the day of class.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1614042883,"objectID":"108da05078d325a5a1f01a1ff2583053","permalink":"https://sph-r-programming-2022.netlify.app/class/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/class/","section":"class","summary":"I will post all the materials (slides, example code, in-class activities, etc.) from each class session on the day of class.","tags":null,"title":"Class details","type":"docs"},{"authors":null,"categories":null,"content":"  Function of the week posts are here.\nSee 2021 functions of the week here.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1640824446,"objectID":"8f52ff357673739ae8d6b752832ba727","permalink":"https://sph-r-programming-2022.netlify.app/functions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/functions/","section":"functions","summary":"Function of the week posts are here.\nSee 2021 functions of the week here.","tags":null,"title":"Function of the Week","type":"docs"},{"authors":null,"categories":null,"content":"  Completing the readings after each class is an essential part of this course, if you want to keep learning.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1614043016,"objectID":"40fcd2da3bf2dc718a2fe044c31cdc56","permalink":"https://sph-r-programming-2022.netlify.app/reading/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reading/","section":"reading","summary":"Completing the readings after each class is an essential part of this course, if you want to keep learning.","tags":null,"title":"Reading policy","type":"docs"},{"authors":null,"categories":null,"content":"   Install R/Rstudio Class files  R Project files Slides Class Video  Post-Class  Pacing Muddiest Points Clearest Points Other messages  Additional Info  Projects in RStudio Desktop Slack Intro Zoom Intro    Install R/Rstudio Before class, please install R and Rstudio. If it has been a while since you installed R, please re-install R to update to the most recent version (warning: you may lose all your installed packages and will have to reinstall them).\nInstallation instructions can be found here.\nPlease also download the “part1” folder in this course materials link. Unzip the folder if needed. Open the Rstudio project by double clicking on the .Rproj file (“Rstudio project file”). Run the 00-install-packages.R script to install necessary packages. A video on how to do this can be found here.\n  Class files R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download the part1 folder. Unzip this folder and open in Rstudio by double clicking on the .Rproj file. This folder will have the files for this part and the assignment.\n Slides Open the class introduction slides in a separate window: https://sph-r-programming-2022.netlify.app/01-introduction_slides#1\n We will also cover a few of these slides on for loops: https://sph-r-programming-2022.netlify.app/slides/02-for_loops#1\n  Class Video  View last year’s class here.\n  Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\nPacing I won’t always talk about the pacing feedback but in the beginning I think it’s useful: Mean 2.94, median 3. So on average the pace seemed to be on target, most people chose 3, though I was trying to balance going slowly at first and also adding in a couple challenging topics. So depending on your experience with R this might have gone ok or not. Please ask questions in the chat (or unmute to ask) during class for anything that’s unclear!\n Muddiest Points Remember, all of this is anonymous.\n loops - but i know we are going over it more later\n  For Loop, however sitting down with the .Rmd tonight helped a lot.\n  The for() loops. Mostly in regards to how to apply it to numerical data.\n Yes! Most comments were on loops. With 30 minutes in class I weighed the option of just ending early and starting this when we were fresh, or with doing a quick intro and finishing more in depth later (and maybe chose the wrong option ;)). Don’t worry if you’re still confused because I didn’t explain things very thoroughly! Class 2 we will go over it all again.\n Loops- not technically, more why we would want to do this in reality\n Loops in the very simplistic way we learned them are less useful in practice due to the vectorization of most functions in R, but we will later see how they can be useful with data operations. Also understanding them gives us the building block knowledge to understand more complex iteration tasks we will cover in the future (purrr::map() for example, possibly lapply() and apply() if we have time).\n loops without indexing - Does R always end the loop once the end of the vector referenced is reached? Are there ever situations where R gets stuck in a continuous loop?\n Great question, I remember learning about for loops in other programming classes and dealing with situations where we got stuck in an infinite loop but I honestly can’t think of an example where I’ve had this happen in real life with R. This can definitely happen, but in real data scenarios I don’t think it’s common because you usually have a finite vector or data frame. More often, R will exit the for loop early due to some error. I will try to show an example of this in class. (I imagine a while() loop could get stuck, but I never ever use that function.) If you ever get stuck with something happening in R, you can press ESC over and over or click top bar “Session” -\u0026gt; “Terminate R” or “Restart R”.\n Only one point I was still a bit confused about was for loop, when we make an empty vector to save our work, such as, the example we used in class, all_my_pets, why do we need to add the new variable mypet to the end of the vector all_my_pets instead of only add mypet to all_my_pets by “all_my_pets \u0026lt;- c(mypet)”?\n Ah yes, this is a tricky part and I’ll go over this again in class 2. This is the code. I’ve added print(all_my_pets) so you can see how it grows with each iteration:\npets \u0026lt;- c(\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;mouse\u0026quot;) # make an empty vector all_my_pets \u0026lt;- c() for(pet in pets){ mypet \u0026lt;- paste(\u0026quot;jessica\u0026#39;s\u0026quot;, pet) # add the new variable mypet to the end of the vector all_my_pets all_my_pets \u0026lt;- c(all_my_pets, mypet) # this prints out what the object all_my_pets is for each iteration print(all_my_pets) } ## [1] \u0026quot;jessica\u0026#39;s dog\u0026quot; ## [1] \u0026quot;jessica\u0026#39;s dog\u0026quot; \u0026quot;jessica\u0026#39;s cat\u0026quot; ## [1] \u0026quot;jessica\u0026#39;s dog\u0026quot; \u0026quot;jessica\u0026#39;s cat\u0026quot; \u0026quot;jessica\u0026#39;s mouse\u0026quot; However, if we had just done all_my_pets \u0026lt;- c(mypet):\npets \u0026lt;- c(\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;mouse\u0026quot;) # make an empty vector all_my_pets \u0026lt;- c() for(pet in pets){ mypet \u0026lt;- paste(\u0026quot;jessica\u0026#39;s\u0026quot;, pet) # add the new variable mypet to the end of the vector all_my_pets all_my_pets \u0026lt;- c(mypet) # this prints out what the object all_my_pets is for each iteration print(all_my_pets) } ## [1] \u0026quot;jessica\u0026#39;s dog\u0026quot; ## [1] \u0026quot;jessica\u0026#39;s cat\u0026quot; ## [1] \u0026quot;jessica\u0026#39;s mouse\u0026quot; We just replace all_my_pets with mypet each time! It has no memory of what happened before, because we have overwritten that object, essentially. We are not adding mypet to the vector all_my_pets. If we call all_my_pets now, it just shows us the last value of pets, and it’s a vector of length 1:\nall_my_pets ## [1] \u0026quot;jessica\u0026#39;s mouse\u0026quot; I’ll go over this in class too. Note that these are identical, the c() around mypet does nothing:\nc(mypet) ## [1] \u0026quot;jessica\u0026#39;s mouse\u0026quot; mypet ## [1] \u0026quot;jessica\u0026#39;s mouse\u0026quot;  I think the idea of how and why it is so important to open/save our files in a certain way is unclear to me.\n Hopefully this will become more clear a little bit each week. We haven’t gotten enough into data management for it to be clear enough. I’ll spend a little bit of time talking about projects and files again this class, and probably again in future classes. This is a thing that takes practice. Main points:\n Use Rstudio projects to keep everything in the same folder and so you can use file paths relative to the home directory (we will talk about this in class 2) Don’t save your R environment upon exiting Rstudio (I had you unclick this box in the global options so this is done automatically) so that you don’t depend on saved objects that may or may not be there. Save your output in files (we will talk about saving output later).   Are there some excellent projects last year recommending to learn?\n I think you are asking about the midterm projects from last year? They are all excellent! I just picked a couple to highlight things I noticed after skimming them, but I recommend going through them all if you have the time:\n Investigating Moore’s Law there is a lot of useful work in here with functions we will learn later like case_when() and some neat plots with ggplot2 that incorporate interesting regression results and the use of an interesting function get_regression_equation()! Understanding C02 Emissions there are some complicated uses of summarize() and mutate() in here that are worth examining, and nice visual conclusions MMR Vaccination Rates in Oregon - nice final summary here and a visualization of how the data can surprise us and change our approaches to data visualization and exploration. The Popularity of Sci-Fi Films - beautiful and effective ggplots and nice summaries!   The explanation of what vectors are and all of the points of discussion.\n I’ll try to go over this in pieces in the next class, hopefully this will help.\n how to do the hw assignments and create the code\n Definitely reach out to me if you have questions about generating the homework files, there has been some useful discussion in slack as well on questions about the code. The full set of code will be embedded in your .Rmd document. That is what you are writing/editing. Then, you click the knit button on the top to create an .html file which will “run” the code all at once, and create a combined file that has text and code output. This is the file you will submit on Sakai. Please reach out to me or Colin if you need help!\n Clearest Points  Everything was clear, this was just the first class :)\n  general set up of R\n  How to change global settings\n  assigning objects\n  code for variable\n  I felt like I knew pretty much everything, but I liked the basic of for loops!\n  I appreciated getting clarification a lot of little things like NA, NULL, what are default settings for functions.\n Yay!\n What is going on in R! I set up two monitors so I can move along with you in R, and that is so helpful to watch you in R real time.\n This is great! I do feel bad for folks who don’t have two monitors, as I know having too many windows up on one screen can make it hard to see what I’m doing. Feel free to log in twice with a tablet or something else if it can make it easier for you, or let me know how I can make it more accessible if you don’t have two screens!\n Other messages Remember, all of this is anonymous to me.\n I think this class will be very useful for me. While I rated the pace a little slow, I think things will get more challenging so I’m not necessarily wishing you to speed up!\n Great to know :)\n I’ll definitely be reaching out for help while I go through the assignment, but excited to get started :)\n  I am going to likely request a lot of short one-on-one sessions with you at the beginning, just to gain greater clarity on basic things - since I am brand new to R.\n Please do!! I don’t want to leave anyone who is new to R behind, so let’s all get to baseline together in the beginning.\n Everything except for loops was review for those of us who were in 551 last quarter\n Ah yes that is what I guessed. At first I read this as “Dr. Niederhausen taught us for loops” and I was super impressed she had time for that! But now I’m glad at least one part was new!\n Please explain the details of the use of R when describing the tools so that we know how to use the tools to be able to perform the functions within R.\n I’m a little confused about what you mean by “tools”, maybe send me an anonymous message again and I will try to do better! Please ask questions during class if anything isn’t clear, I’m happy to repeat or explain things differently in real time.\n I wish this class was provided to undergrads or offered before the core BSTA courses I need for my degree\n I know…we all wish this, actually. The unfortunate excuse is: it’s too hard to put into the fall term because of the EPI and BSTA sequences required for the MS and MPH take up a lot of space/credits, and we can’t require people to take courses before the fall term which they enroll. The only way I can think of is for this to be a 1 credit course in fall with very limited lessons/time commitment (though watching all the OCTRI-BERD R workshops and going through R bootcamp probably would teach the same amount of info), or for BSTA and EPI courses to have “sections” or “labs” with extra learning time (Though none of our classes seem to have this. All of my grad school classes did, and it was so helpful, bur requires large PhD programs for TA support). All of these options are difficult for the program right now, but I will keep bringing it up! We all will keep trying to make this better, and I’m sorry it wasn’t better for your experience!\n  Additional Info Projects in RStudio Desktop See this short video about creating projects in Rstudio desktop if it’s a new concept to you:\n  Slack Intro Slack invite link is on Sakai, and will be emailed before class.\n  Zoom Intro We will be using zoom. Here’s a short video on how to use zoom:\n   ","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642465366,"objectID":"ac47977a15b3902ca3402f61e5bf9df2","permalink":"https://sph-r-programming-2022.netlify.app/class/01-class/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/class/01-class/","section":"class","summary":"Install R/Rstudio Class files  R Project files Slides Class Video  Post-Class  Pacing Muddiest Points Clearest Points Other messages  Additional Info  Projects in RStudio Desktop Slack Intro Zoom Intro    Install R/Rstudio Before class, please install R and Rstudio. If it has been a while since you installed R, please re-install R to update to the most recent version (warning: you may lose all your installed packages and will have to reinstall them).","tags":null,"title":"Part 1: Introduction to R/Rstudio/Vectors/For Loops","type":"docs"},{"authors":null,"categories":null,"content":"   Instructions Rubric (10 points)   Instructions Please finish the assignment in the notebook and submit in the Submissions tab in Sakai.\n Rubric (10 points) Did the student load the images? (3 points) Did the Student generate histograms? (2 points) Did the student comment on the histograms and the images? (5 points)   ","date":1585267200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614042883,"objectID":"267d3eeb134ec40c34f76f19395cc74b","permalink":"https://sph-r-programming-2022.netlify.app/assignment/01-problem-set/","publishdate":"2020-03-27T00:00:00Z","relpermalink":"/assignment/01-problem-set/","section":"assignment","summary":"   Instructions Rubric (10 points)   Instructions Please finish the assignment in the notebook and submit in the Submissions tab in Sakai.\n Rubric (10 points) Did the student load the images? (3 points) Did the Student generate histograms? (2 points) Did the student comment on the histograms and the images? (5 points)   ","tags":null,"title":"Problem set 1","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Readings Slides Class Video  Post-Class  Pacing Muddiest Points Clearest points Other messages   R Project files Please download the part2 and function_of_the_week folders from this dropbox folder link Be sure to unzip if necessary. In advance of class, please open the part2 Rstudio project (double click on the .rproj file), open part2.Rmd and knit (click the Knit button at the top of the file) this file. This will install packages that you need for the Rmd to run.\n Readings Required and suggested class readings can be found on the Readings tab by class. These readings may be done anytime before or after class, but they will supplement your understanding of the class materials and help make homework and project work easier.\n Slides Open the class introduction slides in a separate window: https://sph-r-programming-2022.netlify.app/slides/02-for_loops#1\n  Class Video  View last year’s class and materials here.\n -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous. The first two questions will count toward your attendance part of the grade.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Pacing The pacing average went up a little bit, so I think that means I should slow down a little. I planned to slow down when we got to the “harder” stuff this week so that’s good. Please stop me if anything is not clear! I am happy to go over things multiple times during class.\n Muddiest Points  .rproj and file organization\n Fair. This is probably going to be muddy for a while. I will keep going over it.\n After we save our plot with the ggsave() feature, how are we able to access it again/where is it saved?\n This is saved in your home directory which is where your .rproj file is. You can specify the location to be in a different place, though, i.e. ggsave(\"plots/myplot.png\"). I will go over this in class, as it’s related to file organization.\n I feel like we covered SO much, and my head is still trying to process what is unclear. Based on the learning objectives for the class, I would say that points 4 and 5 are still really muddy for me.\n Don’t worry, it will take practice. I will go over more visualization examples next week, and also will show more examples of data summarization now that we are getting more into data wrangling.\n what is added by vis_dat() vs other exploratory functions\n This is useful to see patterns of missingness, for example if a set of variables tend to be missing together. In future classes I’ll use more vis_dat() and other visdat and naniar package functions to illustrate how/why it’s useful to see patterns of missingness.\n Uploading excel files, how to separately upload tabs within R.\n This was the argument sheet in the function read_excel(). For example, this reads in the first sheet/tab:\nbrca_clinical \u0026lt;- read_excel(\u0026quot;data/tcga_clinical_data.xlsx\u0026quot;, sheet = 1, skip = 1, na = \u0026quot;NA\u0026quot; ) or you could have used the sheet/tab name:\nbrca_clinical \u0026lt;- read_excel(\u0026quot;data/tcga_clinical_data.xlsx\u0026quot;, sheet = \u0026quot;BRCA\u0026quot;, skip = 1, na = \u0026quot;NA\u0026quot; ) If we want to read in the second sheet/tab we can use it’s name or number (2):\ncesc_clinical \u0026lt;- read_excel(\u0026quot;data/tcga_clinical_data.xlsx\u0026quot;, sheet = \u0026quot;CESC\u0026quot;, skip = 1, na = \u0026quot;NA\u0026quot; ) I highly recommend reading the introduction/vignette for the readxl package and looking at the cheatsheet.\n how to use haven package\n Oh yes, I didn’t really cover this since I wasn’t sure of the interest, but I can since there were a couple requests to do that. I’ll go over this more in depth next time.\n Clearest points Mostly: ggplot, summarizing data tools, loading data; a variety of things but I think there were some aspects which we can repeat and develop more in depth in future classes, so this is great.\n Other messages  I loved that you talked about how to use name_repair with janitor:: make_clean_names in read_excel! Sometimes figuring out the documentation of arguments is really hard. I also really appreciated the demonstrations with for loops (both printing with mypets and with the ggplot for loop), and other demonstrations with code that purposefully gives errors/unexpected stuff. Seeing code break in various ways makes it a lot clearer what do to to get what you want.\n Yes I really want to do more of this kind of examples of how to figure out how a function works and how to figure out why code is breaking, so thank you for this!\n I would like to spend more time in these breakout rooms doing some of the lecture tasks that are built in. Maybe it would be helpful to talk about what codes people used to answer the questions? If people used a different way?\n Wonderful, I was hoping to incorporate more breakout room tasks in class 3, so I’m glad it is useful!\n Please go slower with how to upload items such as excel files, installing packages, et cetera.\n Thank you, will definitely try to do this. If there is ever a time you want me to fully go over a step again, maybe with different explanations, please let me know (ask in chat during class or send message this way) and I am happy to.\nI highly recommend reading the introduction/vignette for the readxl package!\nThank you for the feedback, everyone, it’s super helpful!\n ","date":1641945600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642466596,"objectID":"9ae245330f59c57e6f62568d635c26e4","permalink":"https://sph-r-programming-2022.netlify.app/class/02-class/","publishdate":"2022-01-12T00:00:00Z","relpermalink":"/class/02-class/","section":"class","summary":"R Project files Readings Slides Class Video  Post-Class  Pacing Muddiest Points Clearest points Other messages   R Project files Please download the part2 and function_of_the_week folders from this dropbox folder link Be sure to unzip if necessary. In advance of class, please open the part2 Rstudio project (double click on the .rproj file), open part2.Rmd and knit (click the Knit button at the top of the file) this file.","tags":null,"title":"Part 2: Loading Data, data.frames, and ggplot2","type":"docs"},{"authors":null,"categories":null,"content":"   Basic Markdown formatting Math Tables Footnotes Front matter Citations Other references   Markdown is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like pandoc to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (see the full list of output types here)\nBasic Markdown formatting     Type… …or… …to get    Some text in a paragraph. More text in the next paragraph. Always use empty lines between paragraphs.  Some text in a paragraph.\nMore text in the next paragraph. Always use empty lines between paragraphs.\n  *Italic* _Italic_ Italic  **Bold** __Bold__ Bold  # Heading 1  Heading 1   ## Heading 2  Heading 2   ### Heading 3  Heading 3   (Go up to heading level 6 with ######)    [Link text](http://www.example.com)  Link text  ![Image caption](/path/to/image.png)    `Inline code` with backticks  Inline code with backticks  \u0026gt; Blockquote   Blockquote\n  - Things in - an unordered - list * Things in * an unordered * list  Things in an unordered list   1. Things in 2. an ordered 3. list 1) Things in 2) an ordered 3) list Things in an ordered list   Horizontal line --- Horizontal line *** Horizontal line\n     Math Markdown uses LaTeX to create fancy mathematical equations. There are like a billion little options and features available for math equations—you can find helpful examples of the the most common basic commands here.\nYou can use math in two different ways: inline or in a display block. To use math inline, wrap it in single dollar signs, like $y = mx + b$:\n    Type… …to get    Based on the DAG, the regression model for estimating the effect of education on wages is $\\hat{y} = \\beta_0 + \\beta_1 x_1 + \\epsilon$, or $\\text{Wages} = \\beta_0 + \\beta_1 \\text{Education} + \\epsilon$. Based on the DAG, the regression model for estimating the effect of education on wages is \\(\\hat{y} = \\beta_0 + \\beta_1 x_1 + \\epsilon\\), or \\(\\text{Wages} = \\beta_0 + \\beta_1 \\text{Education} + \\epsilon\\).    To put an equation on its own line in a display block, wrap it in double dollar signs, like this:\nType…\nThe quadratic equation was an important part of high school math: $$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ But now we just use computers to solve for $x$. …to get…\n The quadratic equation was an important part of high school math:\n\\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\]\nBut now we just use computers to solve for \\(x\\).\n Because dollar signs are used to indicate math equations, you can’t just use dollar signs like normal if you’re writing about actual dollars. For instance, if you write This book costs $5.75 and this other costs $40, Markdown will treat everything that comes between the dollar signs as math, like so: “This book costs $5.75 and this other costs $40”.\nTo get around that, put a backslash (\\) in front of the dollar signs, so that This book costs \\$5.75 and this other costs \\$40 becomes “This book costs $5.75 and this other costs $40”.\n Tables There are 4 different ways to hand-create tables in Markdown—I say “hand-create” because it’s normally way easier to use R to generate these things with packages like pander (use pandoc.table()) or knitr (use kable()). The two most common are simple tables and pipe tables. You should look at the full documentation here.\nFor simple tables, type…\n Right Left Center Default ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 Table: Caption goes here …to get…\n Caption goes here  Right Left Center Default    12 12 12 12  123 123 123 123  1 1 1 1    For pipe tables, type…\n| Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | Table: Caption goes here …to get…\n Caption goes here  Right Left Default Center    12 12 12 12  123 123 123 123  1 1 1 1     Footnotes There are two different ways to add footnotes (see here for complete documentation): regular and inline.\nRegular notes need (1) an identifier and (2) the actual note. The identifier can be whatever you want. Some people like to use numbers like [^1], but if you ever rearrange paragraphs or add notes before #1, the numbering will be wrong (in your Markdown file, not in the output; everything will be correct in the output). Because of that, I prefer to use some sort of text label:\nType…\nHere is a footnote reference[^1] and here is another [^note-on-dags]. [^1]: This is a note. [^note-on-dags]: DAGs are neat. And here\u0026#39;s more of the document. …to get…\n Here is a footnote reference1 and here is another.2\nAnd here’s more of the document.\n  This is a note.↩︎   DAGs are neat.↩︎     You can also use inline footnotes with ^[Text of the note goes here], which are often easier because you don’t need to worry about identifiers:\nType…\nCausal inference is neat.^[But it can be hard too!] …to get…\n Causal inference is neat.1\n  But it can be hard too!↩︎      Front matter You can include a special section at the top of a Markdown document that contains metadata (or data about your document) like the title, date, author, etc. This section uses a special simple syntax named YAML (or “YAML Ain’t Markup Language”) that follows this basic outline: setting: value for setting. Here’s an example YAML metadata section. Note that it must start and end with three dashes (---).\n--- title: Title of your document date: \u0026quot;January 13, 2020\u0026quot; author: \u0026quot;Your name\u0026quot; --- You can put the values inside quotes (like the date and name in the example above), or you can leave them outside of quotes (like the title in the example above). I typically use quotes just to be safe—if the value you’re using has a colon (:) in it, it’ll confuse Markdown since it’ll be something like title: My cool title: a subtitle, which has two colons. It’s better to do this:\n--- title: \u0026quot;My cool title: a subtitle\u0026quot; --- If you want to use quotes inside one of the values (e.g. your document is An evaluation of \"scare quotes\"), you can use single quotes instead:\n--- title: \u0026#39;An evaluation of \u0026quot;scare quotes\u0026quot;\u0026#39; ---  Citations One of the most powerful features of Markdown + pandoc is the ability to automatically cite things and generate bibliographies. to use citations, you need to create a BibTeX file (ends in .bib) that contains a database of the things you want to cite. You can do this with bibliography managers designed to work with BibTeX directly (like BibDesk on macOS), or you can use Zotero (macOS and Windows) to export a .bib file. You can download an example .bib file of all the readings from this class here.\nComplete details for using citations can be found here. In brief, you need to do three things:\nAdd a bibliography: entry to the YAML metadata:\n--- title: Title of your document date: \u0026quot;January 13, 2020\u0026quot; author: \u0026quot;Your name\u0026quot; bibliography: name_of_file.bib --- Choose a citation style based on a CSL file. The default is Chicago author-date, but you can choose from 2,000+ at this repository. Download the CSL file, put it in your project folder, and add an entry to the YAML metadata (or provide a URL to the online version):\n--- title: Title of your document date: \u0026quot;January 13, 2020\u0026quot; author: \u0026quot;Your name\u0026quot; bibliography: name_of_file.bib csl: \u0026quot;https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl\u0026quot; --- Some of the most common CSLs are:\n Chicago author-date Chicago note-bibliography Chicago full note-bibliography (no shortened notes or ibids) APA 7th edition MLA 8th edition  Cite things in your document. Check the documentation for full details of how to do this. Essentially, you use @citationkey inside square brackets ([]):\n    Type… …to get…    Causal inference is neat [@Rohrer:2018; @AngristPischke:2015]. Causal inference is neat (Rohrer 2018; Angrist and Pischke 2015).  Causal inference is neat [see @Rohrer:2018, p. 34; also @AngristPischke:2015, chapter 1]. Causal inference is neat (see Rohrer 2018, 34; also Angrist and Pischke 2015, chap. 1).  Angrist and Pischke say causal inference is neat [-@AngristPischke:2015; see also @Rohrer:2018]. Angrist and Pischke say causal inference is neat (2015; see also Rohrer 2018).  @AngristPischke:2015 [chapter 1] say causal inference is neat, and @Rohrer:2018 agrees. Angrist and Pischke (2015, chap. 1) say causal inference is neat, and Rohrer (2018) agrees.    After compiling, you should have a perfectly formatted bibliography added to the end of your document too:\n Angrist, Joshua D., and Jörn-Steffen Pischke. 2015. Mastering ’Metrics: The Path from Cause to Effect. Princeton, NJ: Princeton University Press.\nRohrer, Julia M. 2018. “Thinking Clearly About Correlations and Causation: Graphical Causal Models for Observational Data.” Advances in Methods and Practices in Psychological Science 1 (1): 27–42. https://doi.org/10.1177/2515245917745629.\n   Other references These websites have additional details and examples and practice tools:\n CommonMark’s Markdown tutorial: A quick interactive Markdown tutorial. Markdown tutorial: Another interactive tutorial to practice using Markdown. Markdown cheatsheet: Useful one-page reminder of Markdown syntax. The Plain Person’s Guide to Plain Text Social Science: A comprehensive explanation and tutorial about why you should write data-based reports in Markdown.   ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614043016,"objectID":"2fcfa99344c0deb9152fd925ddf0e508","permalink":"https://sph-r-programming-2022.netlify.app/reference/markdown/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/reference/markdown/","section":"reference","summary":"Basic Markdown formatting Math Tables Footnotes Front matter Citations Other references   Markdown is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like pandoc to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (see the full list of output types here)\nBasic Markdown formatting     Type… …or… …to get    Some text in a paragraph.","tags":null,"title":"Using Markdown","type":"docs"},{"authors":null,"categories":null,"content":"   Key terms Add chunks Chunk names Chunk options Inline chunks Output formats   R Markdown is regular Markdown with R code and output sprinkled in. You can do everything you can with regular Markdown, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even interactive dashboards with R Markdown. This whole course website is created with R Markdown (and a package named blogdown).\nThe documentation for R Markdown is extremely comprehensive, and their tutorials and cheatsheets are excellent—rely on those.\nHere are the most important things you’ll need to know about R Markdown in this class:\nKey terms  Document: A Markdown file where you type stuff\n Chunk: A piece of R code that is included in your document. It looks like this:\n```{r} # Code goes here ``` There must be an empty line before and after the chunk. The final three backticks must be the only thing on the line—if you add more text, or if you forget to add the backticks, or accidentally delete the backticks, your document will not knit correctly.\n Knit: When you “knit” a document, R runs each of the chunks sequentially and converts the output of each chunk into Markdown. R then runs the knitted document through pandoc to convert it to HTML or PDF or Word (or whatever output you’ve selected).\nYou can knit by clicking on the “Knit” button at the top of the editor window, or by pressing ⌘⇧K on macOS or control + shift + K on Windows.\n   Add chunks There are three ways to insert chunks:\n Press ⌘⌥I on macOS or control + alt + I on Windows\n Click on the “Insert” button at the top of the editor window\n Manually type all the backticks and curly braces (don’t do this)\n   Chunk names You can add names to chunks to make it easier to navigate your document. If you click on the little dropdown menu at the bottom of your editor in RStudio, you can see a table of contents that shows all the headings and chunks. If you name chunks, they’ll appear in the list. If you don’t include a name, the chunk will still show up, but you won’t know what it does.\nTo add a name, include it immediately after the {r in the first line of the chunk. Names cannot contain spaces, but they can contain underscores and dashes. All chunk names in your document must be unique.\n```{r name-of-this-chunk} # Code goes here ```  Chunk options There are a bunch of different options you can set for each chunk. You can see a complete list in the RMarkdown Reference Guide or at knitr’s website.\nOptions go inside the {r} section of the chunk:\n```{r name-of-this-chunk, warning=FALSE, message=FALSE} # Code goes here ``` The most common chunk options are these:\n fig.width=5 and fig.height=3 (or whatever number you want): Set the dimensions for figures echo=FALSE: The code is not shown in the final document, but the results are message=FALSE: Any messages that R generates (like all the notes that appear after you load a package) are omitted warning=FALSE: Any warnings that R generates are omitted include=FALSE: The chunk still runs, but the code and results are not included in the final document  You can also set chunk options by clicking on the little gear icon in the top right corner of any chunk:\n Inline chunks You can also include R output directly in your text, which is really helpful if you want to report numbers from your analysis. To do this, use `r r_code_here`.\nIt’s generally easiest to calculate numbers in a regular chunk beforehand and then use an inline chunk to display the value in your text. For instance, this document…\n```{r find-avg-mpg, echo=FALSE} avg_mpg \u0026lt;- mean(mtcars$mpg) ``` The average fuel efficiency for cars from 1974 was `r round(avg_mpg, 1)` miles per gallon. … would knit into this:\n The average fuel efficiency for cars from 1974 was 20.1 miles per gallon.\n  Output formats You can specify what kind of document you create when you knit in the YAML front matter.\ntitle: \u0026quot;My document\u0026quot; output: html_document: default pdf_document: default word_document: default You can also click on the down arrow on the “Knit” button to choose the output and generate the appropriate YAML. If you click on the gear icon next to the “Knit” button and choose “Output options”, you change settings for each specific output type, like default figure dimensions or whether or not a table of contents is included.\nThe first output type listed under output: will be what is generated when you click on the “Knit” button or press the keyboard shortcut (⌘⇧K on macOS; control + shift + K on Windows). If you choose a different output with the “Knit” button menu, that output will be moved to the top of the output section.\nThe indentation of the YAML section matters, especially when you have settings nested under each output type. Here’s what a typical output section might look like:\n--- title: \u0026quot;My document\u0026quot; author: \u0026quot;My name\u0026quot; date: \u0026quot;January 13, 2020\u0026quot; output: html_document: toc: yes fig_caption: yes fig_height: 8 fig_width: 10 pdf_document: latex_engine: xelatex # More modern PDF typesetting engine toc: yes word_document: toc: yes fig_caption: yes fig_height: 4 fig_width: 5 ---  ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614043016,"objectID":"1c588ba5e1b21bc2d9ce3418cca23497","permalink":"https://sph-r-programming-2022.netlify.app/reference/rmarkdown/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/reference/rmarkdown/","section":"reference","summary":"Key terms Add chunks Chunk names Chunk options Inline chunks Output formats   R Markdown is regular Markdown with R code and output sprinkled in. You can do everything you can with regular Markdown, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even interactive dashboards with R Markdown.","tags":null,"title":"Using R Markdown","type":"docs"},{"authors":null,"categories":null,"content":"   RStudio.cloud RStudio on your computer  Install R Install RStudio Install tidyverse Install tinytex    You will do all of your work in this class with the open source (and free!) programming language R. You will use RStudio as the main program to access R. Think of R as an engine and RStudio as a car dashboard—R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.\nRStudio.cloud R is free, but it can sometimes be a pain to install and configure. To make life easier, you can (and should!) use the free RStudio.cloud service initially, which lets you run a full instance of RStudio in your web browser. This means you won’t have to install anything on your computer to get started with R! We will have a shared class workspace in RStudio.cloud that will let you quickly copy templates for labs and problem sets.\nGo to https://rstudio.cloud/ and create an account. You’ll receive a link to join the shared class workspace separately. If you don’t get this link, let me know and I will invite you.\n RStudio on your computer RStudio.cloud is convenient, but it can be slow and it is not designed to be able to handle larger datasets, more complicated analysis, or fancier graphics. Over the course of the semester, you should wean yourself off of RStudio.cloud and install all these things locally. This is also important if you want to customize fonts, since RStudio.cloud has extremely limited support for fonts other than Helvetica.\nHere’s how you install all these things\nInstall R First you need to install R itself (the engine).\nGo to the CRAN (Collective R Archive Network)1 website: https://cran.r-project.org/\n Click on “Download R for XXX”, where XXX is either Mac or Windows:\n If you use macOS, scroll down to the first .pkg file in the list of files (in this picture, it’s R-3.5.1.pkg; as of right now, the current version is 3.6.1) and download it.\n If you use Windows, click “base” (or click on the bolded “install R for the first time” link) and download it.\n  Double click on the downloaded file (check your Downloads folder). Click yes through all the prompts to install like any other program.\n   Install RStudio Next, you need to install RStudio, the nicer graphical user interface (GUI) for R (the dashboard). Once R and RStudio are both installed, you can ignore R and only use RStudio. RStudio will use R automatically and you won’t ever have to interact with it directly.\nGo to the free download location on RStudio’s website: https://www.rstudio.com/products/rstudio/download/#download\n Select the installer that corresponds with your computer’s operating system (Windows or macOS):\n Double click on the downloaded file (again, check your Downloads folder). Click yes through all the prompts to install like any other program.\n  Double click on RStudio to run it (check your applications folder or start menu).\n Install tidyverse R packages are easy to install with RStudio. Select the packages panel, click on “Install,” type the name of the package you want to install, and press enter.\nThis can sometimes be tedious when you’re installing lots of packages, though. The tidyverse2 for instance, consists of dozens of packages that all work together. Rather than install each individually, you can install a single magical package and get them all at the same time.\nGo to the packages panel in RStudio, click on “Install,” type “tidyverse”, and press enter. You’ll see a bunch of output in the RStudio console as all the tidyverse packages are installed.\nNotice also that RStudio will generate a line of code for you and run it: install.packages(\"tidyverse\"). You can also just paste and run this instead of using the packages panel.\n Install tinytex When you knit to PDF, R uses a special scientific typesetting program named LaTeX (pronounced “lay-tek” or “lah-tex”; for goofy nerdy reasons, the x is technically the “ch” sound in “Bach”, but most people just say it as “k”—saying “layteks” is frowned on for whatever reason).\nLaTeX is neat and makes pretty documents, but it’s a huge program—the macOS version, for instance, is nearly 4 GB! To make life easier, there’s an R package named tinytex that installs a minimal LaTeX program and that automatically deals with differences between macOS and Windows.\nHere’s how to install tinytex so you can knit to pretty PDFs:\nUse the Packages in panel in RStudio to install tinytex like you did above with tidyverse. Alternatively, run install.packages(\"tinytex\") in the console. Run tinytex::install_tinytex() in the console. Wait for a bit while R downloads and installs everything you need. The end! You should now be able to knit to PDF.     It’s a goofy name, but CRAN is where most R packages—and R itself—lives.↩︎\n A universe of packages centered around tidy data, including ggplot2↩︎\n   ","date":1576540800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614043016,"objectID":"32d2aa5db9c906dd4dae32456ff00876","permalink":"https://sph-r-programming-2022.netlify.app/reference/install/","publishdate":"2019-12-17T00:00:00Z","relpermalink":"/reference/install/","section":"reference","summary":"RStudio.cloud RStudio on your computer  Install R Install RStudio Install tidyverse Install tinytex    You will do all of your work in this class with the open source (and free!) programming language R. You will use RStudio as the main program to access R. Think of R as an engine and RStudio as a car dashboard—R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.","tags":null,"title":"Installing R, RStudio, tidyverse, and tinytex","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Readings Class Video Slides  Post-Class  Muddiest Points Clearest Points Messages to me  Related to homework    R Project files Please download the part3 folder for class materials. Use the grey “download” button to download the whole folder, please keep the file structure and folder organization exactly the same as we need this for class. Be sure to unzip if necessary. You may move the folder part3 wherever you like on your computer.\n Readings Required and suggested class readings can be found on the Readings tab by class. These readings may be done anytime before or after class, but they will supplement your understanding of the class materials and help make homework and project work easier.\n Class Video The class video is here, but I forgot to video tape the part about here::here(). If I have a chance I will re-record myself talking about it, but in the meantime, click here for Ted’s video from last year, which explains similar ideas.\n View last year’s class and materials here.\n --  Slides Open the class introduction slides in a separate window: https://sph-r-programming-2022.netlify.app/slides/03-ggplot2-dplyr-part1s#1\n Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous. The first two questions will count toward your attendance part of the grade.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points  I didn’t get fill to work, need to try again\n Yes this was a curve ball (assuming you mean fill() from the challenge), I expected it to be trickier since I didn’t give you any idea how to use it =) Keep practicing and let me know if it still doesn’t work for you! It’s a similar idea to in Excel where you can you “fill down” (Edit -\u0026gt; Fill -\u0026gt; Down in Excel) which fills the same value down rows in the same column. You can see some examples in ?tidyr::fill and here is the solution (also in the smoke_messy.Rmd file in “part3” folder on dropbox)\nsmoke_messy \u0026lt;- read_excel(\u0026quot;data/smoke_complete.xlsx\u0026quot;, sheet = \u0026quot;smoke_messy\u0026quot;, skip = 5, na = c(\u0026quot;missing\u0026quot;, \u0026quot;Missing\u0026quot;,\u0026quot;\u0026quot;, \u0026quot;NA\u0026quot;)) smoke_clean \u0026lt;- smoke_messy %\u0026gt;% janitor::clean_names() %\u0026gt;% janitor::remove_empty(which=c(\u0026quot;rows\u0026quot;, \u0026quot;cols\u0026quot;)) %\u0026gt;% tidyr::fill(tumor_stage, .direction = \u0026quot;down\u0026quot;) %\u0026gt;% # fill the empty tumor_stage variable down select(-notes)  Finding all of the problems in data files\n Ah yes this will take practice. In future classes I will try to show more examples of looking for problems in data files. Class 4 will use a relatively clean data file again, but I will try to make things trickier in the future, for practice.\n Read excel and how to select for tabs within the file\n Please see the explanation in Class 2 page for the answer to a similar question under Muddiest Points, and re-watch the loading data review from last class. I think the key here is that “tab” is called “sheet” in excel and in the read_excel() function. So read_excel(\"filename.xlsx\", sheet = 1) is the first tab/sheet. If it’s still troublesome please set up a 1:1 with me or Colin for more help. I may be misunderstanding the question!\n “here” function. I wonder how the here function to indicate the specific data folder. Since each part folder has a data folder.\n here() is relative to your project folder. Since each part has it’s own Rstudio project associated with it (there is a .Rproj file in each part folder) it only looks in the “data/” folder that is inside that root folder (defined as where the .Rproj file lives). See the excerpt on here from Ted’s video, as well. I will keep using here examples as well to get more practice.\n I keep getting confused on which variables are independent/dependent, which ones go on x-axis and y-axis. It’s so simple, this is not a reflection of your teaching, but in all of my classes throughout the years my brain struggles with knowing how to figure it out\n This actually is not always clear, so don’t feel bad for being confused! Honestly I don’t think people take much care in thinking about this when plotting. Remember that independent/dependent variables are important in a statistical model, not always in a graph. Those terms might not make sense in the context of what we are graphing. If there is an independent and dependent variable and we want to make a scatterplot, we can technically graph it either way. Though usually if we have a dependent variable (our outcome) and an independent variable (our predictor, or covariate), we plot the outcome as Y (on Y axis) and the predictor as X (on X axis). This is because as we learned back in algebra a billion years ago,\n\\(Y = f(X)\\)\n“Y is a function of X.”\nI wouldn’t worry that much about it in graphing, though. You might just be plotting two “related” variables against each other, not making assumptions about any causal pathways.\n I was a little unclear about how the data wrangling and the ggplots connected to one another. Are they two separate ideas?\n Excellent point, I haven’t really merged those ideas together yet. Often, data wrangling is needed first to do what you want to do in ggplot, but so far we’ve covered relatively simple actions in both and haven’t put them together. We start to put them together a bit in part 4, and when we talk about merging/joining data and reshaping data next week we will see data wrangling and ggplot fit together more.\n What makes tidyselect stuff different from normal select? The ability to select names based on partial matches? (eg “ends in s”)\n Yeah this is confusing for sure, and honestly I am still somewhat confused as it’s a newish concept to tidyverse. tidyselect we can think of as a language (or a backend), it is used in multiple functions, including select() but also across() as we will see in class 4, pivot_longer(), rename_with(), and many more. However, it also has to do with the tidyverse’s use of “unquoted” variable names in all the functions, and how to deal with that when making your own functions. There are some examples in this vignette that involve enquo(), expr(), etc (but I don’t recommend going down that rabbit hole just yet). For now, I would just get familiar with all of the selection helpers listed in this vignette. They do show how you would select names based on partial matches or other characteristics.\n Clearest Points Thanks everyone for answering these, it helps me see what is wokring!\n Nice review of loading data\n  The functions such as select and filter\n  data manipulation using\n  I felt like I understand basic data wrangling in R now.\n  Using the pipe\n  the pipe!\n  I really like how you laid out the formatting for piping and for ggplot code structuring\n  here, filter \u0026amp; select\n  Everything covered in class was very clear for me.\n  Messages to me  Please explain the aspects of how to remove columns.\n I’ll show more examples in class, but the simple way is with the - negative sign before the column name, such as:\nsmoke_complete %\u0026gt;% select(-tumor_stage) But you can also use the more sophisticated tidyselect methods here. Say we wanted to remove all columns with column names that contain the word “day”:\nsmoke_complete %\u0026gt;% select(-contains(\u0026quot;day\u0026quot;))  Class is going well!\n  Thank you! This class is always so interesting and useful!\n Yay!!\nRelated to homework  I’m glad we have homework this week - the practice really helps :)\n Great! I agree, and that’s why I changed my mind, but sorry if it caused confusion! I’ll try not to do that though it’s hard to predict how far we get, which means I’ll need to update the homework sometimes. When I do that I’ll be sure to email/slack blast the class.\n Do you release a key for the homework?\n I will share the keys, sorry I wasn’t on the same page with our TA that I didn’t expect we’d have them available, but I can make some. Right now they aren’t commented/explained well so I’ll work on that and post them to the dropbox folders.\n I have a suggestion about homework. I personally, find the homework to be the best way to learn how to code. I think having to figure things out and type them out ourselves helps tremendously. This is why I think it would be more helpful if the homework did not involve “helper” code. For example, in the latest homework for ggplot, there was a place to fill out some of the ggplot code. I personally think it would be more helpful for learning for that code not to be there at all, so we would be forced to either remember, or look it up ourselves. I also think the homework could be longer. This may be because we are still learning the fundamentals, but I do think homework is the way I learn best, and the only way I’m really able to learn code is by practicing. So having the homeworks be longer would help me practice how to do certain things. Thank you.\n I love this comment =) I told myself I’d try to be super easy on you all for classes 1-3 and this comment reminded me I wanted to step it up for class 4. So the homework this week will not have hardly any code scaffolding (helper code). Please reach out to me or Colin if you need help! I encourage you to work on homework together, and post discussions about it on slack!\nI agree it is so helpful to struggle with this code on your own. That is definitely how we learn. But it can also lead to some anxiety if the rest of the homework problems depend on the one you are stuck on, so again, reach out if you are struggling too long! Start this week’s homework early, it’s much harder than last weeks ;)\n  ","date":1642550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643221767,"objectID":"a0c01f3889200201f6df018341b3db8f","permalink":"https://sph-r-programming-2022.netlify.app/class/03-class/","publishdate":"2022-01-19T00:00:00Z","relpermalink":"/class/03-class/","section":"class","summary":"R Project files Readings Class Video Slides  Post-Class  Muddiest Points Clearest Points Messages to me  Related to homework    R Project files Please download the part3 folder for class materials. Use the grey “download” button to download the whole folder, please keep the file structure and folder organization exactly the same as we need this for class. Be sure to unzip if necessary.","tags":null,"title":"Part 3: ggplot2, factors, boxplots, dplyr: subsetting","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides Post-Class Muddiest Points Clearest points   R Project files Please download the part4 subfolder in this folder link Be sure to unzip if necessary. “Knit” the part4.Rmd file to install packages and make sure everything is working with data loading.\n Class Video  View last year’s class and materials here.\n --  Slides No slides this week.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 --  Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous. The first two questions will count toward your attendance part of the grade.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n Muddiest Points There were a few lingering muddiest points from previous classes that popped up so I will address them here as well.\n The read_excel function options\n I will keep going over this, but I highly recommend reading the readxl vignette here and looking at the examples where they use each argument in turn.\n saving my plot. If I have multiple plots, how do I specify the plot I want to save?\n By default, ggsave() saves the last plot printed. However if you have multiple plots, you can save them as objects then call those objects in ggsave like so:\nlibrary(tidyverse) library(ggplot2) # save each ggplot with an object name p_scatter \u0026lt;- ggplot(mtcars, aes(x=mpg, y=disp)) + geom_point() p_boxplot \u0026lt;- ggplot(mtcars, aes(x=cyl, y=disp)) + geom_boxplot() # to print/show the plot, you now need to call it by the object name p_scatter # save each named plot ggsave(plot = p_scatter, filename = \u0026quot;myscatterplot.png\u0026quot;) ggsave(plot = p_boxplot, filename = \u0026quot;myboxplot.png\u0026quot;) ## Warning: Continuous x aesthetic -- did you forget aes(group=...)? We now have two plots saved. Note that only one plot was printed in the Rmd output because I only called the name of the scatterplot.\n across()\n  I think I need to practice a bit with across() before I really understand it. I’m still kind of digesting when you’d use across() vs just mutating a column at a time, the syntax, etc.\n  The use of across. I am a little confused with across with where or .fns.\n  case when and across, I think they just take practice, you explained it well\n Yes, across() is difficult! We will use across() in class 5 when we talk about summarize(). I purposefully separated out these two usages because I wanted to introduce it, and then have you see it again once you had time to let it sink in. It will be a while until you will have homework practice with this but I encourage you to try it in your midterm project if you are brave!\n Some of the Mutate portion since there are so many applications for Mutate\n  mutate is still a little blurry for me - but I am sure I will get it with more practice!\n There are so many ways to use mutate()! I could probably show 3 hours worth of mutate examples. We will keep using it throughout the class because it’s probably the most useful tidyverse function, honestly.\n smoke_new \u0026lt;- smoke_complete %\u0026gt;% mutate( alive = (vital_status == \"alive\"), alive1 = 1*(vital_status == \"alive\") ) Not 100% clear what R is doing to create the T/F then 0/1 binary variables.\n Let’s break this down in parts, showing what’s happening with just vectors, not a data.frame:\n# here is a character vector, a subset of vital_status myvec \u0026lt;- c(\u0026quot;dead\u0026quot;,\u0026quot;alive\u0026quot;, \u0026quot;dead\u0026quot;, \u0026quot;alive\u0026quot;, \u0026quot;alive\u0026quot;) # R will tell us this is a character vector: class(myvec) ## [1] \u0026quot;character\u0026quot; # Now let\u0026#39;s run that first code \u0026quot;test\u0026quot; which is a boolean statement using a logical operator == myvec == \u0026quot;alive\u0026quot; ## [1] FALSE TRUE FALSE TRUE TRUE # we see that this gives TRUE, FALSE, TRUE # this is actually a vector, let\u0026#39;s save it as such myvec_boolean \u0026lt;- myvec == \u0026quot;alive\u0026quot; myvec_boolean ## [1] FALSE TRUE FALSE TRUE TRUE # R will tell us this is a logical (= boolean, which means true/false) vector: class(myvec_boolean) ## [1] \u0026quot;logical\u0026quot; # now let\u0026#39;s multiply it by 1 1*myvec_boolean ## [1] 0 1 0 1 1 # do you see how it turns into 0s and 1s? TRUEs become 1s, FALSEs because 0s # Let\u0026#39;s save it as a vector myvec_numeric \u0026lt;- 1*myvec_boolean # now we\u0026#39;ve turned myvec from a character vector into a binary numeric vector class(myvec_numeric) ## [1] \u0026quot;numeric\u0026quot; myvec_numeric ## [1] 0 1 0 1 1 # We could have done this all at once: 1*(myvec==\u0026quot;alive\u0026quot;) ## [1] 0 1 0 1 1  booleans. When are they more useful?\n Hopefully the example above gives some insight into how they can be useful. I will say as a data type, I don’t use them much, other than to create new variables as above. We also use boolean statements in our filtering and in case_when(), for instance\nmtcars %\u0026gt;% filter(cyl==4) # cyl==4 is a TRUE/FALSE value mtcars %\u0026gt;% select(where(is.numeric)) # is.numeric is TRUE/FALSE mtcars %\u0026gt;% mutate( cyl_cat = case_when( cyl \u0026lt; 6 ~ \u0026quot;low\u0026quot;, # cyl \u0026lt; 6 is TRUE/FALSE cyl \u0026gt;=6 ~ \u0026quot;high\u0026quot; # cyl \u0026gt;= 6 is TRUE/FALSE ) )  NA\n I’m not sure if this means “not applicable” or, if NA missing values are muddy! I’ll keep trying to go over how we deal with missing data, we’ll see some challenges with NA in class 5.\n Bonus muddy point that I’ve noticed confusion on. What is our output from piping code vs what are we saving and why?\n Remember that when you manipulate your data, you need to save it as a new data frame (tibble) but be careful about what you are saving.\nSee these slides for more info.\n Clearest points  I love all the examples in this class and I really appreciate that you take time to answer all our questions about syntax and how you would use these functions! R has so much documentation but it can be really dense and hard to understand, at least for non-programmer me. Having questions answered is just priceless!\n  This time I watched the lecture the day after, while I do enjoy the social aspect of class, I did find it very helpful to pause, go back to my code, rewind if needed, etc.\n I like the pairing of these comments because both are excellent points about the benefits of a class like this! It almost seems too luxurious to spend 11 weeks and tuition dollars on a class just about R, especially when there are approximately 12 million resources online teaching the same thing. But when else would we have a chance to do this in our busy lives, outside of school? The community of learners and having someone to bounce questions and ideas off of is indeed priceless. It’s also great to have the course recorded in such a way that it’s accessible after class. If we were having this class in person, that would be a lot more difficult.\n Please add more tricks for displaying data (i.e. ncol and other commands) that help with displaying multiple datapoints.\n Will do! I want to get through some advanced data wrangling first, but then we will come back to some more ggplot examples.\n Thanks for excellent teaching! It’s very useful for me to learn the foundation of R systematically. Is there possible to add some example of actual project data processing in class?\n Yes! I have a a couple data sets in mind for this and will try to implement it in the next couple weeks.\n ggplot section\n  assigning levels of a factor and ggplot\n  ggplots are becoming a lot more clear to me - they confused me last quarter, so thank you !\n Great news, I’m so glad!\n ","date":1611619200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644362731,"objectID":"ac7533426a3114e90edf09c0635b197a","permalink":"https://sph-r-programming-2022.netlify.app/class/04-class/","publishdate":"2021-01-26T00:00:00Z","relpermalink":"/class/04-class/","section":"class","summary":"R Project files Class Video Slides Post-Class Muddiest Points Clearest points   R Project files Please download the part4 subfolder in this folder link Be sure to unzip if necessary. “Knit” the part4.Rmd file to install packages and make sure everything is working with data loading.\n Class Video  View last year’s class and materials here.\n --  Slides No slides this week.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 --  Post-Class Please fill out the following survey and we will discuss the results during the next lecture.","tags":null,"title":"Part 4. dplyr: mutate, group_by, summarize, across","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides Another useful video Post-Class Muddiest Points Clearest points Messages to me   R Project files Please download the part5 subfolder in this folder link Be sure to unzip if necessary. “Knit” the code/part5.Rmd file to install packages and make sure everything is working with data loading.\n Class Video  View last year’s class and materials here.\n Slides During “Muddiest Parts” review, we will go over these slides\n  Another useful video Dr. Kelly Bodwin’s Reshaping Data Video\nFor a short version, watch the pivot_longer excerpt about “working backwards” from a plot. Then watch the pivot_wider excerpt\n Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n Muddiest Points  fct_other() and fct_collapse: I actually think I understand the point of each of these separately, but somehow using them together like in the example totally confused me. I’ll have to go look at it again later.\n  The data cleaning section where we used forcats since it was confusing as to how to use it.\n  when to use fct_collapse vs case when and when you would want to turn a character into a vector\n Thanks for this, I went through this too quickly it seems. First, I should say that the two ways of creating the cigarettes10 categorical vector – using case_when() or using forcats factor function – are both equally good options. You can always turn a character vector into a factor after using case_when. I will show some benefits of a factor vector in part 6 and also when we talk about statistical modeling. Here is a visual explanation of what I was doing with fct_other() + fct_collapse():\n Also the challenge question to change the logical “ever_been_bullied” into a character vector with ifelse() … I have never used ifelse() and that made zero sense to me. Will have to play with it to understand.\n Good point, I showed this mainly because it’s another option (and one I default to using sometimes) but didn’t carefully go through it, sorry about that. You can always just use case_when(), but if you want to learn more about the base R function ifelse(), it is basically a simpler case_when with only one condition, and two possible values. The way we use it is like\nifelse(BOOLEAN_TEST_CONDITION, value_if_test_is_TRUE, value_if_test_is_FALSE)\nFor instance:\nlibrary(tidyverse) # simple test 1==2 # this is a boolean test ## [1] FALSE ifelse(1==2, \u0026quot;math is wrong\u0026quot;, \u0026quot;math is right\u0026quot;) ## [1] \u0026quot;math is right\u0026quot; ifelse(1==1, \u0026quot;math is wrong\u0026quot;, \u0026quot;math is right\u0026quot;) ## [1] \u0026quot;math is wrong\u0026quot; # ifelse() is vectorized myvec \u0026lt;- c(1,2,NA) ifelse(is.na(myvec), \u0026quot;missing\u0026quot;, \u0026quot;not missing\u0026quot;) ## [1] \u0026quot;not missing\u0026quot; \u0026quot;not missing\u0026quot; \u0026quot;missing\u0026quot; ifelse(myvec==2, \u0026quot;two\u0026quot;, \u0026quot;not two\u0026quot;) # NAs are preserved ## [1] \u0026quot;not two\u0026quot; \u0026quot;two\u0026quot; NA # we can save the resulting vector newvec \u0026lt;- ifelse(myvec==2, \u0026quot;two\u0026quot;, \u0026quot;not two\u0026quot;) newvec ## [1] \u0026quot;not two\u0026quot; \u0026quot;two\u0026quot; NA # we can use it in mutate as well # make a small data set mydata \u0026lt;- head(mtcars[,1:4]) mydata ## mpg cyl disp hp ## Mazda RX4 21.0 6 160 110 ## Mazda RX4 Wag 21.0 6 160 110 ## Datsun 710 22.8 4 108 93 ## Hornet 4 Drive 21.4 6 258 110 ## Hornet Sportabout 18.7 8 360 175 ## Valiant 18.1 6 225 105 mydata %\u0026gt;% mutate( cyl6 = ifelse(cyl==6, \u0026quot;cyl is 6!!!\u0026quot;, \u0026quot;cyl is not 6\u0026quot;) ) ## mpg cyl disp hp cyl6 ## Mazda RX4 21.0 6 160 110 cyl is 6!!! ## Mazda RX4 Wag 21.0 6 160 110 cyl is 6!!! ## Datsun 710 22.8 4 108 93 cyl is not 6 ## Hornet 4 Drive 21.4 6 258 110 cyl is 6!!! ## Hornet Sportabout 18.7 8 360 175 cyl is not 6 ## Valiant 18.1 6 225 105 cyl is 6!!!  adorn_percentages: On the species/sex tabyl example, percentages were calculated across rows for sex. Is there a way to change percentages to calculate down columns for species?\n Yes!! When I talk more about tables, statistical modeling, etc I was planning to go more in depth with janitor tabyls. But it’s so useful I can’t help but keep showing you tabyl functions along the way. So here’s some more tips:\nlibrary(janitor) library(palmerpenguins) library(gt) # simple cross table with counts penguins %\u0026gt;% tabyl(species, sex)  ## species female male NA_ ## Adelie 73 73 6 ## Chinstrap 34 34 0 ## Gentoo 58 61 5 # simple cross table with percents (denominator is row by default) penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% adorn_percentages() ## species female male NA_ ## Adelie 0.4802632 0.4802632 0.03947368 ## Chinstrap 0.5000000 0.5000000 0.00000000 ## Gentoo 0.4677419 0.4919355 0.04032258 penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% # instead of counts, show percentages, the default denominator is row adorn_percentages(denominator = \u0026quot;col\u0026quot;)  ## species female male NA_ ## Adelie 0.4424242 0.4345238 0.5454545 ## Chinstrap 0.2060606 0.2023810 0.0000000 ## Gentoo 0.3515152 0.3630952 0.4545455 penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% adorn_percentages(denominator = \u0026quot;col\u0026quot;) %\u0026gt;% # add row and column totals, the default is to show just column totals in \u0026quot;row\u0026quot; # this makes for a strange row total, though, as we get 300% adorn_totals(where = c(\u0026quot;row\u0026quot;, \u0026quot;col\u0026quot;))  ## species female male NA_ Total ## Adelie 0.4424242 0.4345238 0.5454545 1.4224026 ## Chinstrap 0.2060606 0.2023810 0.0000000 0.4084416 ## Gentoo 0.3515152 0.3630952 0.4545455 1.1691558 ## Total 1.0000000 1.0000000 1.0000000 3.0000000 penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% adorn_percentages(denominator = \u0026quot;col\u0026quot;) %\u0026gt;% adorn_totals(where = c(\u0026quot;row\u0026quot;, \u0026quot;col\u0026quot;)) %\u0026gt;% # need to have adorn_totals BEFORE adding pct formatting, otherwise error adorn_pct_formatting() ## species female male NA_ Total ## Adelie 44.2% 43.5% 54.5% 142.2% ## Chinstrap 20.6% 20.2% 0.0% 40.8% ## Gentoo 35.2% 36.3% 45.5% 116.9% ## Total 100.0% 100.0% 100.0% 300.0% penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% adorn_percentages(denominator = \u0026quot;col\u0026quot;) %\u0026gt;% adorn_totals(where = c(\u0026quot;row\u0026quot;, \u0026quot;col\u0026quot;)) %\u0026gt;% adorn_pct_formatting() %\u0026gt;% # add back in counts in () # need to have adorn_ns AFTER adding pct formatting, otherwise error adorn_ns() ## species female male NA_ Total ## Adelie 44.2% (73) 43.5% (73) 54.5% (6) 142.2% (152) ## Chinstrap 20.6% (34) 20.2% (34) 0.0% (0) 40.8% (68) ## Gentoo 35.2% (58) 36.3% (61) 45.5% (5) 116.9% (124) ## Total 100.0% (165) 100.0% (168) 100.0% (11) 300.0% (344) penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% # percent of total (denominator is the total sum) adorn_percentages(denominator = \u0026quot;all\u0026quot;) %\u0026gt;% # now it makes more sense to have totals in both row and column adorn_totals(where = c(\u0026quot;row\u0026quot;, \u0026quot;col\u0026quot;)) %\u0026gt;% adorn_pct_formatting() %\u0026gt;% adorn_ns() ## species female male NA_ Total ## Adelie 21.2% (73) 21.2% (73) 1.7% (6) 44.2% (152) ## Chinstrap 9.9% (34) 9.9% (34) 0.0% (0) 19.8% (68) ## Gentoo 16.9% (58) 17.7% (61) 1.5% (5) 36.0% (124) ## Total 48.0% (165) 48.8% (168) 3.2% (11) 100.0% (344) penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% adorn_percentages(denominator = \u0026quot;all\u0026quot;) %\u0026gt;% adorn_totals(where = c(\u0026quot;row\u0026quot;, \u0026quot;col\u0026quot;)) %\u0026gt;% adorn_pct_formatting() %\u0026gt;% adorn_ns() %\u0026gt;% # add title, need placement = \u0026quot;combined\u0026quot; for gt to work adorn_title(placement = \u0026quot;combined\u0026quot;) %\u0026gt;% # make it fancy html gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ezlowiephz .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ezlowiephz .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ezlowiephz .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ezlowiephz .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #ezlowiephz .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ezlowiephz .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ezlowiephz .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ezlowiephz .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ezlowiephz .gt_column_spanner_outer:first-child { padding-left: 0; } #ezlowiephz .gt_column_spanner_outer:last-child { padding-right: 0; } #ezlowiephz .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ezlowiephz .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ezlowiephz .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ezlowiephz .gt_from_md  :first-child { margin-top: 0; } #ezlowiephz .gt_from_md  :last-child { margin-bottom: 0; } #ezlowiephz .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ezlowiephz .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #ezlowiephz .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ezlowiephz .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #ezlowiephz .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ezlowiephz .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ezlowiephz .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ezlowiephz .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ezlowiephz .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ezlowiephz .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #ezlowiephz .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ezlowiephz .gt_sourcenote { font-size: 90%; padding: 4px; } #ezlowiephz .gt_left { text-align: left; } #ezlowiephz .gt_center { text-align: center; } #ezlowiephz .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ezlowiephz .gt_font_normal { font-weight: normal; } #ezlowiephz .gt_font_bold { font-weight: bold; } #ezlowiephz .gt_font_italic { font-style: italic; } #ezlowiephz .gt_super { font-size: 65%; } #ezlowiephz .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; }   species/sex female male NA_ Total   Adelie 21.2% (73) 21.2% (73) 1.7% (6) 44.2% (152) Chinstrap 9.9% (34) 9.9% (34) 0.0% (0) 19.8% (68) Gentoo 16.9% (58) 17.7% (61) 1.5% (5) 36.0% (124) Total 48.0% (165) 48.8% (168) 3.2% (11) 100.0% (344)    penguins %\u0026gt;% tabyl(species, sex) %\u0026gt;% adorn_percentages(denominator = \u0026quot;all\u0026quot;) %\u0026gt;% adorn_totals(where = c(\u0026quot;row\u0026quot;, \u0026quot;col\u0026quot;)) %\u0026gt;% adorn_pct_formatting() %\u0026gt;% adorn_ns() %\u0026gt;% # make it fancy html # specify that species denotes the name of the rows (removes that column label) # adds line between row names and rest of table gt::gt(rowname_col = \u0026quot;species\u0026quot;) %\u0026gt;% # adds back in Species above rows gt::tab_stubhead( label = \u0026quot;Species\u0026quot; ) %\u0026gt;% # adds header gt::tab_header( title = \u0026quot;Species by sex percentages (counts)\u0026quot;, subtitle = \u0026quot;Palmer penguin data\u0026quot; ) %\u0026gt;% # adds sex label across multiple columns gt::tab_spanner( label = \u0026quot;Sex\u0026quot;, columns = c(female, male, `NA_`) ) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ntujrirayo .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ntujrirayo .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ntujrirayo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ntujrirayo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #ntujrirayo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ntujrirayo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ntujrirayo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ntujrirayo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ntujrirayo .gt_column_spanner_outer:first-child { padding-left: 0; } #ntujrirayo .gt_column_spanner_outer:last-child { padding-right: 0; } #ntujrirayo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ntujrirayo .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ntujrirayo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ntujrirayo .gt_from_md  :first-child { margin-top: 0; } #ntujrirayo .gt_from_md  :last-child { margin-bottom: 0; } #ntujrirayo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ntujrirayo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #ntujrirayo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ntujrirayo .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #ntujrirayo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ntujrirayo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ntujrirayo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ntujrirayo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ntujrirayo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ntujrirayo .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #ntujrirayo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ntujrirayo .gt_sourcenote { font-size: 90%; padding: 4px; } #ntujrirayo .gt_left { text-align: left; } #ntujrirayo .gt_center { text-align: center; } #ntujrirayo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ntujrirayo .gt_font_normal { font-weight: normal; } #ntujrirayo .gt_font_bold { font-weight: bold; } #ntujrirayo .gt_font_italic { font-style: italic; } #ntujrirayo .gt_super { font-size: 65%; } #ntujrirayo .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; }   Species by sex percentages (counts)   Palmer penguin data    Species Sex  Total   female male NA_   Adelie 21.2% (73) 21.2% (73) 1.7% (6) 44.2% (152) Chinstrap 9.9% (34) 9.9% (34) 0.0% (0) 19.8% (68) Gentoo 16.9% (58) 17.7% (61) 1.5% (5) 36.0% (124) Total 48.0% (165) 48.8% (168) 3.2% (11) 100.0% (344)    See the intro to gt package for more examples like this.\n sort and deduplicate prior to joining tables: Would you mind sharing an example of how to do this to avoid the multiple key warning when merging tables?\n Yes, I will first say that sometimes you want duplicate keys in your end result, which we will see in part 6 example. For instance, if you are joining a study cohort data set with longitudinal lab values in tidy “long” format.\nBut you do want to avoid having duplicate keys in both the left and right table, as this will cause chaos and extreme duplication of rows.\nexample_cohort \u0026lt;- tibble( name = c(\u0026quot;jane\u0026quot;, \u0026quot;juan\u0026quot;, \u0026quot;jessica\u0026quot;, \u0026quot;jessica\u0026quot;), value = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;c\u0026quot;), ) example_other \u0026lt;- tibble( name = c(\u0026quot;juan\u0026quot;, \u0026quot;juan\u0026quot;,\u0026quot;jessica\u0026quot;), y = c(3, 1, 4) ) example_cohort ## # A tibble: 4 × 2 ## name value ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 jane a ## 2 juan b ## 3 jessica c ## 4 jessica c example_other ## # A tibble: 3 × 2 ## name y ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 juan 3 ## 2 juan 1 ## 3 jessica 4 # with duplicate rows in the left and right data, # we end up with duplicated rows in the full data left_join(example_cohort, example_other) ## Joining, by = \u0026quot;name\u0026quot; ## # A tibble: 5 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jane a NA ## 2 juan b 3 ## 3 juan b 1 ## 4 jessica c 4 ## 5 jessica c 4 # these do the same thing, since only one matching key with the same \u0026quot;name\u0026quot; left_join(example_cohort, example_other, by = \u0026quot;name\u0026quot;) ## # A tibble: 5 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jane a NA ## 2 juan b 3 ## 3 juan b 1 ## 4 jessica c 4 ## 5 jessica c 4 left_join(example_cohort, example_other, by = c(\u0026quot;name\u0026quot; = \u0026quot;name\u0026quot;)) ## # A tibble: 5 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jane a NA ## 2 juan b 3 ## 3 juan b 1 ## 4 jessica c 4 ## 5 jessica c 4 # perhaps the example_cohort was a mistake, # and we want to remove those duplicated rows first: example_cohort %\u0026gt;% distinct() ## # A tibble: 3 × 2 ## name value ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 jane a ## 2 juan b ## 3 jessica c left_join( example_cohort %\u0026gt;% distinct(), example_other ) ## Joining, by = \u0026quot;name\u0026quot; ## # A tibble: 4 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jane a NA ## 2 juan b 3 ## 3 juan b 1 ## 4 jessica c 4 # the above assumes that juan had two y values on purpose # what if we didn\u0026#39;t want two juan values in the \u0026quot;example_other\u0026quot; tibble # let\u0026#39;s assume we want only the lowest y value in example_other for each name example_other %\u0026gt;% group_by(name) %\u0026gt;% slice_min(y) ## # A tibble: 2 × 2 ## # Groups: name [2] ## name y ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jessica 4 ## 2 juan 1 left_join( example_cohort %\u0026gt;% distinct(), example_other %\u0026gt;% group_by(name) %\u0026gt;% slice_min(y) ) ## Joining, by = \u0026quot;name\u0026quot; ## # A tibble: 3 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jane a NA ## 2 juan b 1 ## 3 jessica c 4 # Here\u0026#39;s a reminder about what inner join and full join would do in the original situation: # same as left join in this case, takes all data from both tables full_join(example_cohort, example_other) ## Joining, by = \u0026quot;name\u0026quot; ## # A tibble: 5 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 jane a NA ## 2 juan b 3 ## 3 juan b 1 ## 4 jessica c 4 ## 5 jessica c 4 # only uses names (the joining key) from both tables inner_join(example_cohort, example_other) ## Joining, by = \u0026quot;name\u0026quot; ## # A tibble: 4 × 3 ## name value y ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 juan b 3 ## 2 juan b 1 ## 3 jessica c 4 ## 4 jessica c 4  Do we need to save all of our graphics that we make in our homework? like using ggsave() and a png file? Same with our glimpse/skim/summary bits that we code?\n You don’t need to unless I specifically state “save as a file” (i.e. with ggsave() or write_csv()) or “save as an object” (i.e. with myplot \u0026lt;- ggplot(..... or mysummary \u0026lt;- summary(mydata)) depending on the setting.\n Thank you for getting into “messy” data. I still would like more information about primary data.\n I have to admit I am not sure what you mean by “primary” data, because to me, this could mean an infinite number of things. It depends on the type of data and who is entering the data: is it coming from a person or a machine? Is it an export from Redcap, an EHR query, or an excel sheet where a person has entered the data by hand?\nI would love to hear more about what kind of “primary” data people are interested in. Please send another survey message or comment on my question on slack!\nIn part 6 I have used a “real” data example, basically this is the most common type of primary data that I receive as a statistician – an excel sheet where someone in a lab has input data, copied some omics data from another excel sheet into that table, and sent it to me via email. This type of data can lend itself to lots of strange formatting issues, and also lots of data input error. It is not ideal, but this is where we’re at in science (see again Broman \u0026amp; Woo 2017, Data Organization in Spreadsheets or Ellis \u0026amp; Leek 2018, How to share data for collaboration).\nI also need to teach you the basic tools for cleaning and manipulating data before I can get you started with “real” data in super messy format, because otherwise it might be overwhelming doing a series of steps! But I think you’re almost ready! You’ll see how the data cleaning steps can really pile on today during the modestly messy example. Most of my “data cleaning” or “importing” or “wrangling” tasks as a statistician involve dealing with weird spreadsheet formats, typos, missing values, and then creating new variables that I need for analyses or graphing. I think you’ve learned most of those tasks by now in this class. In part 6 we will practice these more. In future classes we will learn more about how to handle dates/times, more about string manipulation, reshaping data, and additional ways to deal with missing data.\nIf anyone has primary data they would like me to go over in class (and can share it), please send it to me! Or describe the data you have in mind.\nThere was a helpful suggestion to show data with the kind of demographic or survey variables that are somewhat difficult to keep cleanly categorized, but that are very important, such as sexual identity, race/ethnicitiy, disability, etc. I perused some of the publicly available data out there but haven’t found a good enough example yet; I will keep looking, but if you know of one send it my way, please!\n If we have 100 cvs to import, how to import data quickly?\n The best way is to use lists and purrr! We will hopefully get to lists by class 7 and purrr probably class 8. It also depends on whether these 100 csv files are in the same format and what you want to do with them after you import them. Are they able to be stacked, so you can use bind_rows()? If so, it would be something like this:\n# have all the csvs in one place folder_where_csvs_are \u0026lt;- here::here(\u0026quot;static/data\u0026quot;) # we can list all their names list.files(folder_where_csvs_are, pattern = \u0026quot;.csv\u0026quot;) ## [1] \u0026quot;injury.csv\u0026quot; \u0026quot;math_camp.csv\u0026quot; ## [3] \u0026quot;math_survey.csv\u0026quot; \u0026quot;village_randomized.csv\u0026quot; ## [5] \u0026quot;village_self_selected.csv\u0026quot; \u0026quot;world_happiness.csv\u0026quot; # list all their names will full file path all_csv_files \u0026lt;- list.files(here::here(\u0026quot;static/data\u0026quot;), pattern = \u0026quot;.csv\u0026quot;, full.names = TRUE) # use purrr map to load them in list_of_data \u0026lt;- purrr::map(all_csv_files, ~read_csv(.)) ## Rows: 7150 Columns: 30 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## dbl (30): durat, afchnge, highearn, male, married, hosp, indust, injtype, ag... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 2000 Columns: 8 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (1): math_camp ## dbl (7): id, final_grade, math_camp_num, undergrad_gpa, gre_quant, gre_verba... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 216 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (9): timestamp, teacher, treatment, math_feeling, good_at_math, math_eas... ## dbl (2): wave, id_in_class ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 1000 Columns: 8 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (2): sex, program ## dbl (6): id, age, pre_income, post_income, sex_num, program_num ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 1000 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## dbl (6): id, sex, age, pre_income, program, post_income ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 217 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (4): iso2c, country, region, income ## dbl (7): happiness_score, happiness_se, year, school_enrollment, life_expect... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # list of data frames class(list_of_data) ## [1] \u0026quot;list\u0026quot; # length of list length(list_of_data) ## [1] 6 # see the structure of the data # str(list_of_data) # this is long output # first element glimpse(list_of_data[[1]]) ## Rows: 7,150 ## Columns: 30 ## $ durat \u0026lt;dbl\u0026gt; 1, 1, 84, 4, 1, 1, 7, 2, 175, 60, 29, 30, 100, 4, 2, 1, 1, 2,… ## $ afchnge \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ highearn \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ male \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1… ## $ married \u0026lt;dbl\u0026gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1… ## $ hosp \u0026lt;dbl\u0026gt; 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0… ## $ indust \u0026lt;dbl\u0026gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1… ## $ injtype \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ age \u0026lt;dbl\u0026gt; 26, 31, 37, 31, 23, 34, 35, 45, 41, 33, 35, 25, 39, 27, 24, 2… ## $ prewage \u0026lt;dbl\u0026gt; 404.9500, 643.8250, 398.1250, 527.8000, 528.9375, 614.2500, 5… ## $ totmed \u0026lt;dbl\u0026gt; 1187.57324, 361.07855, 8963.65723, 1099.64832, 372.80188, 211… ## $ injdes \u0026lt;dbl\u0026gt; 1010, 1404, 1032, 1940, 1940, 1425, 1110, 1207, 1425, 1010, 1… ## $ benefit \u0026lt;dbl\u0026gt; 246.8375, 246.8375, 246.8375, 246.8375, 211.5750, 176.3125, 2… ## $ ky \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ mi \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ ldurat \u0026lt;dbl\u0026gt; 0.0000000, 0.0000000, 4.4308167, 1.3862944, 0.0000000, 0.0000… ## $ afhigh \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ lprewage \u0026lt;dbl\u0026gt; 6.003764, 6.467427, 5.986766, 6.268717, 6.270870, 6.420402, 6… ## $ lage \u0026lt;dbl\u0026gt; 3.258096, 3.433987, 3.610918, 3.433987, 3.135494, 3.526361, 3… ## $ ltotmed \u0026lt;dbl\u0026gt; 7.079667, 5.889095, 9.100934, 7.002746, 5.921047, 5.351953, 4… ## $ head \u0026lt;dbl\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ neck \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ upextr \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ trunk \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ lowback \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ lowextr \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ occdis \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ manuf \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1… ## $ construc \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ highlpre \u0026lt;dbl\u0026gt; 6.003764, 6.467427, 5.986766, 6.268717, 6.270870, 6.420402, 6… # if they were all the same columns and able to stack, we could do this # big_data_frame \u0026lt;- bind_rows(list_of_data)  Clearest points  joining data, summarize \u0026amp; group_by (we used these a lot in BSTA511)\n good to know, I like hearing about what you have already learned in BSTA511, so keep that comin’\n here () was a lot more clear on re-visiting.\n so glad!\n The summarize section was pretty understandable\n Glad to hear it, I was worried I rushed that. We will go over it again in class 6 anyway with across().\n I appreciated the overall discussion on muddy points from previous session. This definitely helped.\n Good! We’re doing another long muddy review today too =)\n Messages to me  I feel like it would be really helpful (to me anyway) to hear about some stupid-but-useful R tidbits like: how you filter to get any row that doesn’t have an NA. Or how you filter to have any row that doesn’t have an NA in a particular column. I’m sure there’s tons more I haven’t thought of – those are just ones that I’ve wanted and struggled to come up with on my own in the past.\n Yes! I keep meaning to show you more with missing data. I have a couple more examples during class 6 using drop_na() to do all these things. Also those are very useful tidbits, sorry I haven’t gotten to them yet!\n The challenges are so helpful - great to try out what you are showing!\n Great to hear, class 6/part 6 has a toooon of challenges, maybe too many challenges. We will see how it goes =)\n I hope to spend some time on summary tables\n Thank you, we will definitely do this, starting with redo-ing the end of part 5 today, which we didn’t finish.\n Is it possible to have a list of all the packages we need for each assignment? I did get marked down for adding too many libraries since I keep getting them all jumbled between homework, practices, and out-of-class practice as well\n This is a good point, though I don’t think you’re getting marked down for having too many packages (if I’m wrong let me know!), I think Colin is just giving comments that you should try to avoid it. I didn’t think about this when writing homeworks but I will start giving you the packages I think you need. It’s hard to keep track of all the different ones when you are just starting out.\nHonestly, I don’t do a very good job myself of only loading the minimal list of packages in each Rmd. In theory, it doesn’t matter too much—it may add some extra time to load the extra packages, but often I am copying my YAML and setup code from other Rmds and forget to take out the packages I don’t need.\nOne issue with loading too many packages is that function names can overlap between packages and cause errors or confusion. For instance, the function select() is in both the tidyverse or dplyr package and the AnnotationDBI Bioconductor package which I sometimes use. If I load the AnnotationDbi package after I load dplyr, R thinks I am trying to use AnnotationDBI::select instead of dplyr::select. There are ways around it, such as making sure you load library(dplyr) last, or when using select use dplyr::select explicitly in your code instead, or, redefining select this way:\nlibrary(dplyr) library(AnnotationDbi) ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: \u0026#39;BiocGenerics\u0026#39; ## The following objects are masked from \u0026#39;package:parallel\u0026#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB ## The following objects are masked from \u0026#39;package:dplyr\u0026#39;: ## ## combine, intersect, setdiff, union ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which.max, which.min ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## \u0026#39;browseVignettes()\u0026#39;. To cite Bioconductor, see ## \u0026#39;citation(\u0026quot;Biobase\u0026quot;)\u0026#39;, and for packages \u0026#39;citation(\u0026quot;pkgname\u0026quot;)\u0026#39;. ## Loading required package: IRanges ## Loading required package: S4Vectors ## ## Attaching package: \u0026#39;S4Vectors\u0026#39; ## The following objects are masked from \u0026#39;package:dplyr\u0026#39;: ## ## first, rename ## The following object is masked from \u0026#39;package:tidyr\u0026#39;: ## ## expand ## The following objects are masked from \u0026#39;package:base\u0026#39;: ## ## expand.grid, I, unname ## ## Attaching package: \u0026#39;IRanges\u0026#39; ## The following objects are masked from \u0026#39;package:dplyr\u0026#39;: ## ## collapse, desc, slice ## The following object is masked from \u0026#39;package:purrr\u0026#39;: ## ## reduce ## ## Attaching package: \u0026#39;AnnotationDbi\u0026#39; ## The following object is masked from \u0026#39;package:dplyr\u0026#39;: ## ## select select ## standardGeneric for \u0026quot;select\u0026quot; defined from package \u0026quot;AnnotationDbi\u0026quot; ## ## function (x, keys, columns, keytype, ...) ## standardGeneric(\u0026quot;select\u0026quot;) ## \u0026lt;bytecode: 0x7f8bd29ba840\u0026gt; ## \u0026lt;environment: 0x7f8bd12374f0\u0026gt; ## Methods may be defined for arguments: x ## Use showMethods(select) for currently available ones. select \u0026lt;- dplyr::select select ## function (.data, ...) ## { ## UseMethod(\u0026quot;select\u0026quot;) ## } ## \u0026lt;bytecode: 0x7f8be6633f40\u0026gt; ## \u0026lt;environment: namespace:dplyr\u0026gt;  ","date":1643760000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644429664,"objectID":"0ddf3e2b3a9f5347c88f83033fb01ff2","permalink":"https://sph-r-programming-2022.netlify.app/class/05-class/","publishdate":"2022-02-02T00:00:00Z","relpermalink":"/class/05-class/","section":"class","summary":"R Project files Class Video Slides Another useful video Post-Class Muddiest Points Clearest points Messages to me   R Project files Please download the part5 subfolder in this folder link Be sure to unzip if necessary. “Knit” the code/part5.Rmd file to install packages and make sure everything is working with data loading.\n Class Video  View last year’s class and materials here.\n Slides During “Muddiest Parts” review, we will go over these slides","tags":null,"title":"Part 5: Data summarizing, reshaping, and wrangling with multiple tables","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides  Post-Class  Muddiest Points Clearest Points Other Notes   R Project files In this class we finished the part5 material from this folder link. Please download this folder and be sure to unzip if necessary. Knit the part5.Rmd to install any required packages.\n Class Video  View last year’s class and materials here.\n Slides No slides this class.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points  I’m still confused about what makes a list special (I know we’re going to talk about it more later). I loved the walk-through of summarize with across but I need some practice with that before it becomes completely clear – I hope it’ll be on the HW! I also have trouble visualizing facet wraps and the necessary pivoting without actually trying it and watching my code break. Maybe that just takes practice!\n Yeah, sorry I was trying to avoid talking about lists until we can cover them fully but it turns out they are hard to avoid! We will talk about lists more in class 8, along with functions!\nIn class 7 (part6) we will have more examples with summarize with across, and also facet wraps and pivoting. Basically, class 7 is a perfect response to this comment, even though I read this comment after I created the materials. Glad to be on the same wavelength =)\n I was confused by the “.fns =” inside “summarize(acros())”. I know it specifies the function, but I kept getting confused by how to code after that.\n This is hard stuff. I think it will make a bit more sense after we talk about functions in part7 (class 8 probably) and how to use them with purrr since it is similar syntax. Stay tuned for a couple more examples with summarize(across()) in part6 (class 7), and I can’t emphasize enough how much I recommend reading the reference on across here and other tidyverse functions that are confusing, but here’s a quick explanation in the meantime.\nOne thing to remember is that when using summarize, the function you are applying must result in one value, that is a vector of length one! Otherwise, it’s not a summary statistic. This can be variations on n_distinct(), length(), sum(), min(), etc.\nlibrary(tidyverse) library(palmerpenguins) library(gt) penguins %\u0026gt;% summarize( # all the code for the column specification AND the function goes in across() across( # use tidyselect to specify the columns .cols = contains(\u0026quot;length\u0026quot;), # we can specify a list() of functions to apply # to add a suffix to column names of result, name the functions # the ~ in front specifies a custom function is next, .x is the argument # or use built in functions .fns = list(mean_cm = ~ mean(.x/10, na.rm = TRUE), n_miss = ~ sum(is.na(.x)), min = min, max = max ), # end list # add additional argument for min and max na.rm = TRUE, # use \u0026quot;.\u0026quot; to separate the col name \u0026amp; the function name .names = \u0026quot;{.col}.{.fn}\u0026quot; ) # end across ) %\u0026gt;% # end mutate gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #uuzfiiadbx .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #uuzfiiadbx .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #uuzfiiadbx .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #uuzfiiadbx .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #uuzfiiadbx .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uuzfiiadbx .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #uuzfiiadbx .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #uuzfiiadbx .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #uuzfiiadbx .gt_column_spanner_outer:first-child { padding-left: 0; } #uuzfiiadbx .gt_column_spanner_outer:last-child { padding-right: 0; } #uuzfiiadbx .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #uuzfiiadbx .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #uuzfiiadbx .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #uuzfiiadbx .gt_from_md  :first-child { margin-top: 0; } #uuzfiiadbx .gt_from_md  :last-child { margin-bottom: 0; } #uuzfiiadbx .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #uuzfiiadbx .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #uuzfiiadbx .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #uuzfiiadbx .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #uuzfiiadbx .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #uuzfiiadbx .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #uuzfiiadbx .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #uuzfiiadbx .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uuzfiiadbx .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #uuzfiiadbx .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #uuzfiiadbx .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #uuzfiiadbx .gt_sourcenote { font-size: 90%; padding: 4px; } #uuzfiiadbx .gt_left { text-align: left; } #uuzfiiadbx .gt_center { text-align: center; } #uuzfiiadbx .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #uuzfiiadbx .gt_font_normal { font-weight: normal; } #uuzfiiadbx .gt_font_bold { font-weight: bold; } #uuzfiiadbx .gt_font_italic { font-style: italic; } #uuzfiiadbx .gt_super { font-size: 65%; } #uuzfiiadbx .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; }   bill_length_mm.mean_cm bill_length_mm.n_miss bill_length_mm.min bill_length_mm.max flipper_length_mm.mean_cm flipper_length_mm.n_miss flipper_length_mm.min flipper_length_mm.max   4.392193 2 32.1 59.6 20.09152 2 172 231     The most difficult part was towards the end when we were working with long data and were graphing it. Are there other examples of geomtile?\n  Towards the end when going over some of the ggplot section.\n I do have another couple examples of geom_tile() in part6, but at the end so I’m not confident we will get to it. But we will go over ggplot with long data a lot in part6 (class 7) so I hope that will help.\ngeom_tile works best on summarized data, showing for instance the mean of a numeric value within groups:\npenguin_means \u0026lt;- penguins %\u0026gt;% group_by(species, island) %\u0026gt;% summarize(mb = mean(bill_length_mm, na.rm = TRUE)) ## `summarise()` has grouped output by \u0026#39;species\u0026#39;. You can override using the ## `.groups` argument. penguin_means ## # A tibble: 5 × 3 ## # Groups: species [3] ## species island mb ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Adelie Biscoe 39.0 ## 2 Adelie Dream 38.5 ## 3 Adelie Torgersen 39.0 ## 4 Chinstrap Dream 48.8 ## 5 Gentoo Biscoe 47.5 ggplot(penguin_means) + aes(x = island, y = species, fill = mb) + geom_tile()+ labs(fill = \u0026quot;Mean bill length (mm)\u0026quot;)  Clearest Points Lots of summarize(), join, pivot! Thanks, all!\n Other Notes  The very best part of this class is the strange and useful tidbits that aren’t even on the syllabus!\n Well that’s good to know! I’ll try to go on more tangents =)\n I’m interested in doing more with summary tables\n Yes, this is useful. It was my plan to get to this when we talk about statistical modeling and summary tables of cohorts/data. I hope we get there, we will do this after we talk about lists/purrr.\n I think I’m getting a little turned around as functions are added, used in concert and combined with tips for advanced users. A main, base take-away for primary functions etc. would help me integrate new concepts to previous ones.\n Good feedback, thank you! I try to do this with more. I’m hoping part6 will give everyone a chance to practice with what we’ve learned so far, to solidify these concepts before we move on to the next section of lists, functions, and purrr topics.\n ","date":1644451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644967787,"objectID":"119022d4a0cb3ad45bc292e062e9e05a","permalink":"https://sph-r-programming-2022.netlify.app/class/06-class/","publishdate":"2022-02-10T00:00:00Z","relpermalink":"/class/06-class/","section":"class","summary":"R Project files Class Video Slides  Post-Class  Muddiest Points Clearest Points Other Notes   R Project files In this class we finished the part5 material from this folder link. Please download this folder and be sure to unzip if necessary. Knit the part5.Rmd to install any required packages.\n Class Video  View last year’s class and materials here.\n Slides No slides this class.","tags":null,"title":"Part 5 contd (Class 6): Data summarizing, reshaping, and wrangling with multiple tables (contd)","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points/Clearest Points I will add the muddiest/clearest points from the survey after the first class.\n ","date":1645574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644967787,"objectID":"a696c93d764e2bfb447300660fcf2be7","permalink":"https://sph-r-programming-2022.netlify.app/class/08-class/","publishdate":"2022-02-23T00:00:00Z","relpermalink":"/class/08-class/","section":"class","summary":"R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.","tags":null,"title":"Part 7 (Class 8): Lists/Functions/Intro to Purrr","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Last class we finished up part5 materials. This is class 7, and we will start with part6 now (sorry, we’re going to be off by one from now on). Please download the part6 sub-folder from this dropbox link. Be sure to unzip if necessary. Knit the part6.Rmd to install any required packages.\nThis section is mainly a practice, with some additional ggplot lessons. There will be lots of time for breakout room challenges so that you can get practice working on these data wrangling and graphing problems together.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides No slides this class. Come ready to interact in breakout sessions!\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points/Clearest Points I will add the muddiest/clearest points from the survey after the first class.\n ","date":1644969600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644967787,"objectID":"026700f4d4068083b37f98f89edf4682","permalink":"https://sph-r-programming-2022.netlify.app/class/07-class/","publishdate":"2022-02-16T00:00:00Z","relpermalink":"/class/07-class/","section":"class","summary":"R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Last class we finished up part5 materials. This is class 7, and we will start with part6 now (sorry, we’re going to be off by one from now on). Please download the part6 sub-folder from this dropbox link. Be sure to unzip if necessary. Knit the part6.Rmd to install any required packages.","tags":null,"title":"Part 6 (Class 7): More data wrangling and ggplot","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points/Clearest Points I will add the muddiest/clearest points from the survey after the first class.\n ","date":1646179200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644967787,"objectID":"6fce0ded8aa03d77081bcdf32570ef18","permalink":"https://sph-r-programming-2022.netlify.app/class/09-class/","publishdate":"2022-03-02T00:00:00Z","relpermalink":"/class/09-class/","section":"class","summary":"R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.","tags":null,"title":"Part 8 (Class 9). Intro to stats/`broom`/More Purrr","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points/Clearest Points I will add the muddiest/clearest points from the survey after the first class.\n ","date":1646784000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644967787,"objectID":"3fea5612523ac7da2f3ba696739f7198","permalink":"https://sph-r-programming-2022.netlify.app/class/10-class/","publishdate":"2022-03-09T00:00:00Z","relpermalink":"/class/10-class/","section":"class","summary":"R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.","tags":null,"title":"Part 9 (Class 10): More Stats Stuff/Summary Tables","type":"docs"},{"authors":null,"categories":null,"content":"   R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points/Clearest Points I will add the muddiest/clearest points from the survey after the first class.\n ","date":1647388800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644967787,"objectID":"187acf4fd964c835bff8f91f793da537","permalink":"https://sph-r-programming-2022.netlify.app/class/11-class/","publishdate":"2022-03-16T00:00:00Z","relpermalink":"/class/11-class/","section":"class","summary":"R Project files Class Video Slides  Post-Class  Muddiest Points/Clearest Points   R Project files Before each class, I will update this folder link with the appropriate “part” folder. Please download this sub-folder for class materials. Be sure to unzip if necessary.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.","tags":null,"title":"Class 11: TBD","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Model Basics from R for Data Science Model Building from R for Data Science Many Models - from R for Data science. Covers group_by()/nest() and list-columns Purrr Tips and Tricks by Emil Hvitfeldt.   ","date":1645574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640825174,"objectID":"84eea7e2ac7daba0422f51df6e252e34","permalink":"https://sph-r-programming-2022.netlify.app/reading/08-reading/","publishdate":"2022-02-23T00:00:00Z","relpermalink":"/reading/08-reading/","section":"reading","summary":"  Required  Model Basics from R for Data Science Model Building from R for Data Science Many Models - from R for Data science. Covers group_by()/nest() and list-columns Purrr Tips and Tricks by Emil Hvitfeldt.   ","tags":null,"title":"Part 8. Statistical Modeling/More purrr","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Learn to purrr   ","date":1644969600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640825174,"objectID":"5256604b09b011b85f6df88676e905f4","permalink":"https://sph-r-programming-2022.netlify.app/reading/07-reading/","publishdate":"2022-02-16T00:00:00Z","relpermalink":"/reading/07-reading/","section":"reading","summary":"  Required  Learn to purrr   ","tags":null,"title":"Part 7. purrr","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week: dplyr::coalesce()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }    Function of the Week: dplyr::coalesce() Yan Liu 2/9/2022  dplyr::coalesce() In this document, I will introduce the coalesce() function and show what it’s for.\nlibrary(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.1 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() What is it for? Given a set of vectors, coalesce( )finds the first non-missing value at each position. The arguments of this function is the vectors. It can be used to replace and compare missing data.\nFirst, it can use a single value to replace the missing data.\nx\u0026lt;-c(1,2,NA,NA,1,2,3) #create example vector class(x) ## [1] \u0026quot;numeric\u0026quot; coalesce(x,4)#apply coalesce ## [1] 1 2 4 4 1 2 3 x\u0026lt;-c(1,2,\u0026quot;b\u0026quot;,NA,NA,1,2) class(x) ## [1] \u0026quot;character\u0026quot; coalesce(x,\u0026quot;a\u0026quot;) ## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;b\u0026quot; \u0026quot;a\u0026quot; \u0026quot;a\u0026quot; \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; df\u0026lt;-tibble(x=c(1,NA,3), y=c(NA,5,6)) df ## # A tibble: 3 × 2 ## x y ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 NA ## 2 NA 5 ## 3 3 6 class(df) ## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot; coalesce(df$x,2) ## [1] 1 2 3 It can replace NA with the same class of the vector, and it can not replace NA in the data_frame directly.\nSecond, it can compare and replace NA in the first vector with the value in other vectors.\nx\u0026lt;-c(1,1,NA,1,NA,NA) y\u0026lt;-c(2,NA,2,2,2,NA) z\u0026lt;-c(3,NA,3,NA,3,3) coalesce(x,y,z) ## [1] 1 1 2 1 2 3 Different size and type can not be compared and replaced.\nThird, it can compare and replace NA in the list.\nx\u0026lt;-list(c(1,NA,NA),c(NA,4,NA),c(NA,6,7)) class(x) ## [1] \u0026quot;list\u0026quot; coalesce(!!!x) ## [1] 1 4 7 It requires each column has the same size.\n Is it helpful? Yes, when we want to deal with missing data, “coalesce()” is very useful. It can replace NA and compare different vector and list. But it has strict requirements on the type and length of data. \nIf we want to replace NA with some special data, “replace_na()” is much more powerful than coalesce(). It can replace NA with numerical or character whatever the vector is. It can also replace NA in data frame or replace NUlls in a list.\nx\u0026lt;-c(1,2,NA,NA) class(x) ## [1] \u0026quot;numeric\u0026quot; replace_na(x,\u0026quot;a\u0026quot;) ## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;a\u0026quot; \u0026quot;a\u0026quot; df\u0026lt;-tibble(x=c(1,NA,NA,3), y=c(NA,5,6,NA)) df ## # A tibble: 4 × 2 ## x y ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 NA ## 2 NA 5 ## 3 NA 6 ## 4 3 NA df%\u0026gt;%replace_na(list(x=0,y=1)) ## # A tibble: 4 × 2 ## x y ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 ## 2 0 5 ## 3 0 6 ## 4 3 1 df\u0026lt;-tibble(z=list(1:5,NULL,10:20)) df ## # A tibble: 3 × 1 ## z ## \u0026lt;list\u0026gt; ## 1 \u0026lt;int [5]\u0026gt; ## 2 \u0026lt;NULL\u0026gt; ## 3 \u0026lt;int [11]\u0026gt; dg\u0026lt;-df%\u0026gt;%replace_na(list(z=list(5))) dg ## # A tibble: 3 × 1 ## z ## \u0026lt;list\u0026gt; ## 1 \u0026lt;int [5]\u0026gt; ## 2 \u0026lt;dbl [1]\u0026gt; ## 3 \u0026lt;int [11]\u0026gt; What’s more, if we want to convert an annoying value to NA, we can use “na_if”.\ny \u0026lt;- c(1,2,3) na_if(y,1) ## [1] NA 2 3     // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1644364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644364800,"objectID":"2925415dcb93b113abc82f8bddcdc6b5","permalink":"https://sph-r-programming-2022.netlify.app/functions/dplyr_coalesce/","publishdate":"2022-02-09T00:00:00Z","relpermalink":"/functions/dplyr_coalesce/","section":"functions","summary":"Function of the Week: dplyr::coalesce()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"dplyr::coalesce()","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week: get_dupes ()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }    Function of the Week: get_dupes () Becky Lanford 2022-02-09  Submission Instructions Please sign up for a function here: https://docs.google.com/spreadsheets/d/1-RWAQTlLwttjFuZVAtSs8OiHIwu6AZLUdWugIHHTWVo/edit?usp=sharing\nFor this assignment, please submit both the .Rmd and the .html files. I will add it to the website. Remove your name from the Rmd if you do not wish it shared. If you select a function which was presented last year, please develop your own examples and content.\nlibrary(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.1 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(readxl) library(skimr) library(readr) library(dplyr) #load janitor which contains get_dupes () library(janitor) ## ## Attaching package: \u0026#39;janitor\u0026#39; ## The following objects are masked from \u0026#39;package:stats\u0026#39;: ## ## chisq.test, fisher.test #example dataset library(palmerpenguins) data(penguins)  get_dupes () In this document, I will introduce the get_dupes () function and show what it’s for. get_dupes() is from the janitor package.\nWhat is it for? This function identifies duplicate row values of specified variables across a given dataset. It takes the arguments (data, variable); variables can be a mix of types (dbl, chr, etc). It returns a dataframe (or tibble if tibble is used) with duplicate rows for all variables specified. A column, “dupe_count”, is inserted containing the number of duplicates. If no variable is specified, it looks for duplicate rows across all variables in the dataset.\nnum_1 \u0026lt;- c(1:6) col_1 \u0026lt;- c(\u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;) numbers_colors_1 \u0026lt;- data.frame(num_1, col_1) numbers_colors_1 ## num_1 col_1 ## 1 1 red ## 2 2 orange ## 3 3 yellow ## 4 4 green ## 5 5 green ## 6 6 blue get_dupes (numbers_colors_1) ## No variable names specified - using all columns. ## No duplicate combinations found of: num_1, col_1 ## [1] num_1 col_1 dupe_count ## \u0026lt;0 rows\u0026gt; (or 0-length row.names) num_2 \u0026lt;- c(1, 2, 3, 4, 4, 4) col_2 \u0026lt;- c(\u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;green\u0026quot;) numbers_colors_2 \u0026lt;- data.frame(num_2, col_2) numbers_colors_2 ## num_2 col_2 ## 1 1 red ## 2 2 orange ## 3 3 yellow ## 4 4 green ## 5 4 green ## 6 4 green get_dupes (numbers_colors_2) ## No variable names specified - using all columns. ## num_2 col_2 dupe_count ## 1 4 green 3 ## 2 4 green 3 ## 3 4 green 3 num_3 \u0026lt;- c(1, 2, 3, 4, 5, 5, 6, 6, 6) col_3 \u0026lt;- c(\u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;pink\u0026quot;) numbers_colors_3 \u0026lt;- data.frame(num_3, col_3) numbers_colors_3 ## num_3 col_3 ## 1 1 red ## 2 2 orange ## 3 3 yellow ## 4 4 green ## 5 5 blue ## 6 5 blue ## 7 6 blue ## 8 6 blue ## 9 6 pink get_dupes(numbers_colors_3) ## No variable names specified - using all columns. ## num_3 col_3 dupe_count ## 1 5 blue 2 ## 2 5 blue 2 ## 3 6 blue 2 ## 4 6 blue 2 get_dupes(numbers_colors_3, num_3) ## num_3 dupe_count col_3 ## 1 5 2 blue ## 2 5 2 blue ## 3 6 3 blue ## 4 6 3 blue ## 5 6 3 pink get_dupes(numbers_colors_3, col_3) ## col_3 dupe_count num_3 ## 1 blue 4 5 ## 2 blue 4 5 ## 3 blue 4 6 ## 4 blue 4 6 #orders by level for character/factor data get_dupes (penguins) ## No variable names specified - using all columns. ## No duplicate combinations found of: species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year ## # A tibble: 0 × 9 ## # … with 9 variables: species \u0026lt;fct\u0026gt;, island \u0026lt;fct\u0026gt;, bill_length_mm \u0026lt;dbl\u0026gt;, ## # bill_depth_mm \u0026lt;dbl\u0026gt;, flipper_length_mm \u0026lt;int\u0026gt;, body_mass_g \u0026lt;int\u0026gt;, sex \u0026lt;fct\u0026gt;, ## # year \u0026lt;int\u0026gt;, dupe_count \u0026lt;int\u0026gt; get_dupes (penguins, species) ## # A tibble: 344 × 9 ## species dupe_count island bill_length_mm bill_depth_mm flipper_length_mm ## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 Adelie 152 Torgersen 39.1 18.7 181 ## 2 Adelie 152 Torgersen 39.5 17.4 186 ## 3 Adelie 152 Torgersen 40.3 18 195 ## 4 Adelie 152 Torgersen NA NA NA ## 5 Adelie 152 Torgersen 36.7 19.3 193 ## 6 Adelie 152 Torgersen 39.3 20.6 190 ## 7 Adelie 152 Torgersen 38.9 17.8 181 ## 8 Adelie 152 Torgersen 39.2 19.6 195 ## 9 Adelie 152 Torgersen 34.1 18.1 193 ## 10 Adelie 152 Torgersen 42 20.2 190 ## # … with 334 more rows, and 3 more variables: body_mass_g \u0026lt;int\u0026gt;, sex \u0026lt;fct\u0026gt;, ## # year \u0026lt;int\u0026gt; get_dupes (penguins, species, island) ## # A tibble: 344 × 9 ## species island dupe_count bill_length_mm bill_depth_mm flipper_length_mm ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 Adelie Biscoe 44 37.8 18.3 174 ## 2 Adelie Biscoe 44 37.7 18.7 180 ## 3 Adelie Biscoe 44 35.9 19.2 189 ## 4 Adelie Biscoe 44 38.2 18.1 185 ## 5 Adelie Biscoe 44 38.8 17.2 180 ## 6 Adelie Biscoe 44 35.3 18.9 187 ## 7 Adelie Biscoe 44 40.6 18.6 183 ## 8 Adelie Biscoe 44 40.5 17.9 187 ## 9 Adelie Biscoe 44 37.9 18.6 172 ## 10 Adelie Biscoe 44 40.5 18.9 180 ## # … with 334 more rows, and 3 more variables: body_mass_g \u0026lt;int\u0026gt;, sex \u0026lt;fct\u0026gt;, ## # year \u0026lt;int\u0026gt; get_dupes (penguins, species, island, year) ## # A tibble: 344 × 9 ## species island year dupe_count bill_length_mm bill_depth_mm flipper_length_… ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 Adelie Biscoe 2007 10 37.8 18.3 174 ## 2 Adelie Biscoe 2007 10 37.7 18.7 180 ## 3 Adelie Biscoe 2007 10 35.9 19.2 189 ## 4 Adelie Biscoe 2007 10 38.2 18.1 185 ## 5 Adelie Biscoe 2007 10 38.8 17.2 180 ## 6 Adelie Biscoe 2007 10 35.3 18.9 187 ## 7 Adelie Biscoe 2007 10 40.6 18.6 183 ## 8 Adelie Biscoe 2007 10 40.5 17.9 187 ## 9 Adelie Biscoe 2007 10 37.9 18.6 172 ## 10 Adelie Biscoe 2007 10 40.5 18.9 180 ## # … with 334 more rows, and 2 more variables: body_mass_g \u0026lt;int\u0026gt;, sex \u0026lt;fct\u0026gt; #orders numeric data get_dupes(penguins, body_mass_g, sex) ## # A tibble: 283 × 9 ## body_mass_g sex dupe_count species island bill_length_mm bill_depth_mm ## \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 2850 female 2 Adelie Biscoe 36.5 16.6 ## 2 2850 female 2 Adelie Biscoe 36.4 17.1 ## 3 2900 female 4 Adelie Biscoe 34.5 18.1 ## 4 2900 female 4 Adelie Dream 33.1 16.1 ## 5 2900 female 4 Adelie Torgers… 38.6 17 ## 6 2900 female 4 Chinstrap Dream 43.2 16.6 ## 7 3000 female 2 Adelie Dream 37 16.9 ## 8 3000 female 2 Adelie Dream 37.3 16.8 ## 9 3050 female 4 Adelie Torgers… 35.9 16.6 ## 10 3050 female 4 Adelie Torgers… 35.2 15.9 ## # … with 273 more rows, and 2 more variables: flipper_length_mm \u0026lt;int\u0026gt;, ## # year \u0026lt;int\u0026gt; Artists \u0026lt;- read_csv(\u0026quot;https://media.githubusercontent.com/media/MuseumofModernArt/collection/master/Artists.csv\u0026quot;) ## Rows: 15222 Columns: 9 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \u0026quot;,\u0026quot; ## chr (5): DisplayName, ArtistBio, Nationality, Gender, Wiki QID ## dbl (4): ConstituentID, BeginDate, EndDate, ULAN ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Artists %\u0026gt;% get_dupes() ## No variable names specified - using all columns. ## No duplicate combinations found of: ConstituentID, DisplayName, ArtistBio, Nationality, Gender, BeginDate, EndDate, Wiki QID, ULAN ## # A tibble: 0 × 10 ## # … with 10 variables: ConstituentID \u0026lt;dbl\u0026gt;, DisplayName \u0026lt;chr\u0026gt;, ArtistBio \u0026lt;chr\u0026gt;, ## # Nationality \u0026lt;chr\u0026gt;, Gender \u0026lt;chr\u0026gt;, BeginDate \u0026lt;dbl\u0026gt;, EndDate \u0026lt;dbl\u0026gt;, ## # Wiki QID \u0026lt;chr\u0026gt;, ULAN \u0026lt;dbl\u0026gt;, dupe_count \u0026lt;int\u0026gt; Artists %\u0026gt;% get_dupes(Nationality) ## # A tibble: 15,201 × 10 ## Nationality dupe_count ConstituentID DisplayName ArtistBio Gender BeginDate ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Albanian 3 29622 Anri Sala Albanian,… Male 1974 ## 2 Albanian 3 30621 Adrian Paci Albanian,… Male 1969 ## 3 Albanian 3 31324 Edi Rama Albanian,… Male 1964 ## 4 Algerian 5 1880 M. Fiorini Algerian,… Male 1922 ## 5 Algerian 5 43595 Lyès Salem Algerian,… Male 1973 ## 6 Algerian 5 43626 Djamila Sah… Algerian,… Female 1950 ## 7 Algerian 5 49216 Neïl Beloufa Algerian-… Male 1985 ## 8 Algerian 5 70052 El Hadi Jaz… Algerian,… Male 1970 ## 9 American 5194 1 Robert Arne… American,… Male 1930 ## 10 American 5194 3 Bill Arnold American,… Male 1941 ## # … with 15,191 more rows, and 3 more variables: EndDate \u0026lt;dbl\u0026gt;, Wiki QID \u0026lt;chr\u0026gt;, ## # ULAN \u0026lt;dbl\u0026gt; Artists %\u0026gt;% get_dupes(Nationality, Gender)  ## # A tibble: 15,157 × 10 ## Nationality Gender dupe_count ConstituentID DisplayName ArtistBio BeginDate ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Albanian Male 3 29622 Anri Sala Albanian,… 1974 ## 2 Albanian Male 3 30621 Adrian Paci Albanian,… 1969 ## 3 Albanian Male 3 31324 Edi Rama Albanian,… 1964 ## 4 Algerian Male 4 1880 M. Fiorini Algerian,… 1922 ## 5 Algerian Male 4 43595 Lyès Salem Algerian,… 1973 ## 6 Algerian Male 4 49216 Neïl Beloufa Algerian-… 1985 ## 7 Algerian Male 4 70052 El Hadi Jaz… Algerian,… 1970 ## 8 American Female 1097 10 Irene Arons… American,… 1918 ## 9 American Female 1097 21 Ruth Asawa American,… 1926 ## 10 American Female 1097 31 Dana Atchley American,… 1941 ## # … with 15,147 more rows, and 3 more variables: EndDate \u0026lt;dbl\u0026gt;, Wiki QID \u0026lt;chr\u0026gt;, ## # ULAN \u0026lt;dbl\u0026gt;  Is it helpful? I think this is a useful preliminary data exploration function. It is a way to identify overall duplicate rows that might need to be further explored. It is also useful if you have particular variables you want to assess for duplicate rows either alone or in combination. For example it would be useful to look for duplicate medical records in a large dataset or multiple observations on a study participant in a single year. Its got an easy to remember name and is useful way to do initial assessment on data, but isn’t something that I would use regularly.\n    // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1644364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644364800,"objectID":"174340d2c4ef0dc163b3d4df6642ff9f","permalink":"https://sph-r-programming-2022.netlify.app/functions/janitor_get_dupes/","publishdate":"2022-02-09T00:00:00Z","relpermalink":"/functions/janitor_get_dupes/","section":"functions","summary":"Function of the Week: get_dupes ()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"janitor::get_dupes()","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week: tidyr::extract()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }    Function of the Week: tidyr::extract() Shauna Rakshe 2022-02-09  tidyr:: extract() In this document, I will introduce the tidyr::extract() function and show what it’s for.\n#load libraries up library(tidyverse) ## Warning: package \u0026#39;tidyverse\u0026#39; was built under R version 4.0.5 ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.6 v dplyr 1.0.7 ## v tidyr 1.1.4 v stringr 1.4.0 ## v readr 2.1.1 v forcats 0.5.1 ## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.5 ## Warning: package \u0026#39;tibble\u0026#39; was built under R version 4.0.5 ## Warning: package \u0026#39;tidyr\u0026#39; was built under R version 4.0.5 ## Warning: package \u0026#39;readr\u0026#39; was built under R version 4.0.5 ## Warning: package \u0026#39;purrr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;dplyr\u0026#39; was built under R version 4.0.5 ## Warning: package \u0026#39;stringr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;forcats\u0026#39; was built under R version 4.0.5 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() #extract() is in tidyr; this package is loaded by tidyverse #example dataset is \u0026#39;sentences\u0026#39; from stringr; this package is loaded by tidyverse What is it for? extract() will match portions (“capturing groups”) of character strings in a column using regular expressions, and put the groups into new columns. If there’s no match or the input is NA, extract() will output NA.\nThe basic syntax is: df %\u0026gt;% extract(character_column, c(“Group1_name”, “Group2_name”), “(regex expression for Group1)(regex expression for Group2)”)\n#Example 1: A simple example to see the syntax df \u0026lt;- data.frame(x = c(NA, \u0026quot;a-b\u0026quot;, \u0026quot;a-d\u0026quot;, \u0026quot;b-c\u0026quot;, \u0026quot;e-e\u0026quot;)) df ## x ## 1 \u0026lt;NA\u0026gt; ## 2 a-b ## 3 a-d ## 4 b-c ## 5 e-e #extract the letter(s)/number(s) before and after the dash into \u0026quot;A\u0026quot; and \u0026quot;B\u0026quot; variables, respectively #\u0026quot;[[:alnum:]]+\u0026quot; matches at least one alphanumeric character df %\u0026gt;% extract(x, c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;), \u0026quot;([[:alnum:]]+)-([[:alnum:]]+)\u0026quot;) ## A B ## 1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 2 a b ## 3 a d ## 4 b c ## 5 e e # If no match, NA: #note that \u0026quot;[a-d]+\u0026quot; matches at least one a,b,c or d #this regular expression doesn\u0026#39;t match anything in the last row of df, so returns NA df %\u0026gt;% extract(x, c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;), \u0026quot;([a-d]+)-([a-d]+)\u0026quot;) ## A B ## 1 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 2 a b ## 3 a d ## 4 b c ## 5 \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; #Example 2: the Harvard Sentences (stringr::sentences) are \u0026quot;phonetically balanced\u0026quot; statements that are used to test audio systems, because they contain all the sounds heard in everyday language. # for more information see ?sentences length(sentences) ## [1] 720 head(sentences, 10) ## [1] \u0026quot;The birch canoe slid on the smooth planks.\u0026quot; ## [2] \u0026quot;Glue the sheet to the dark blue background.\u0026quot; ## [3] \u0026quot;It\u0026#39;s easy to tell the depth of a well.\u0026quot; ## [4] \u0026quot;These days a chicken leg is a rare dish.\u0026quot; ## [5] \u0026quot;Rice is often served in round bowls.\u0026quot; ## [6] \u0026quot;The juice of lemons makes fine punch.\u0026quot; ## [7] \u0026quot;The box was thrown beside the parked truck.\u0026quot; ## [8] \u0026quot;The hogs were fed chopped corn and garbage.\u0026quot; ## [9] \u0026quot;Four hours of steady work faced us.\u0026quot; ## [10] \u0026quot;Large size in stockings is hard to sell.\u0026quot; What if we want to try to pluck out some nouns? One way is to look for all the words that follow “a” or “the”. This is going to give us a lot of adjectives too, but it’s a way to start.\n#make a tibble out of the sentences and then extract tibble(sentence = sentences) %\u0026gt;% extract(sentence, c(\u0026quot;article\u0026quot;, \u0026quot;noun\u0026quot;), \u0026quot;(a|the) ([^ ]+)\u0026quot;, remove = FALSE) ## # A tibble: 720 x 3 ## sentence article noun ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 The birch canoe slid on the smooth planks. the smooth ## 2 Glue the sheet to the dark blue background. the sheet ## 3 It\u0026#39;s easy to tell the depth of a well. the depth ## 4 These days a chicken leg is a rare dish. a chicken ## 5 Rice is often served in round bowls. \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 6 The juice of lemons makes fine punch. \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 7 The box was thrown beside the parked truck. the parked ## 8 The hogs were fed chopped corn and garbage. \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 9 Four hours of steady work faced us. \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 10 Large size in stockings is hard to sell. \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## # ... with 710 more rows What if we want to find all the nouns that have color adjectives? Let’s find colors in the sentences and pluck out the color and the word after the color.\n#make a list of color names and turn it into a single regular expression colors \u0026lt;- c(\u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;) color_match \u0026lt;- str_c(colors, collapse = \u0026quot;|\u0026quot;) color_match ## [1] \u0026quot;red|orange|yellow|green|blue|purple\u0026quot; #select sentences that contain a color has_color \u0026lt;- str_subset(sentences, color_match) length(has_color) ## [1] 57 head(has_color, 10) ## [1] \u0026quot;Glue the sheet to the dark blue background.\u0026quot; ## [2] \u0026quot;Two blue fish swam in the tank.\u0026quot; ## [3] \u0026quot;The colt reared and threw the tall rider.\u0026quot; ## [4] \u0026quot;The wide road shimmered in the hot sun.\u0026quot; ## [5] \u0026quot;See the cat glaring at the scared mouse.\u0026quot; ## [6] \u0026quot;A wisp of cloud hung in the blue air.\u0026quot; ## [7] \u0026quot;Leaves turn brown and yellow in the fall.\u0026quot; ## [8] \u0026quot;He ordered peach pie with ice cream.\u0026quot; ## [9] \u0026quot;Pure bred poodles have curls.\u0026quot; ## [10] \u0026quot;The spot on the blotter was made by green ink.\u0026quot; #extract the color and the word after the color. color_matches \u0026lt;- tibble(sentence = sentences) %\u0026gt;% extract(sentence, c(\u0026quot;color\u0026quot;, \u0026quot;noun\u0026quot;), \u0026quot;(red|orange|yellow|green|blue|purple) ([^ ]+)\u0026quot;, remove = FALSE) #drop all the empty rows. You can see we pulled out words like \u0026quot;shimmered\u0026quot; and \u0026quot;scared\u0026quot;, too! color_matches \u0026lt;- color_matches %\u0026gt;% drop_na() head(color_matches, 10) ## # A tibble: 10 x 3 ## sentence color noun ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Glue the sheet to the dark blue background. blue background. ## 2 Two blue fish swam in the tank. blue fish ## 3 The colt reared and threw the tall rider. red and ## 4 The wide road shimmered in the hot sun. red in ## 5 See the cat glaring at the scared mouse. red mouse. ## 6 A wisp of cloud hung in the blue air. blue air. ## 7 Leaves turn brown and yellow in the fall. yellow in ## 8 He ordered peach pie with ice cream. red peach ## 9 Pure bred poodles have curls. red poodles ## 10 The spot on the blotter was made by green ink. green ink. #we can get rid of the words accidentally matching \u0026quot;red\u0026quot; by tweaking the regex: #now we require a space before the \u0026quot;red\u0026quot; so we don\u0026#39;t get portions of words color_matches \u0026lt;- tibble(sentence = sentences) %\u0026gt;% extract(sentence, c(\u0026quot;color\u0026quot;, \u0026quot;noun\u0026quot;), \u0026quot;([ ]red|orange|yellow|green|blue|purple) ([^ ]+)\u0026quot;, remove = FALSE) color_matches \u0026lt;- color_matches %\u0026gt;% drop_na() color_matches ## # A tibble: 24 x 3 ## sentence color noun ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Glue the sheet to the dark blue background. \u0026quot;blue\u0026quot; background. ## 2 Two blue fish swam in the tank. \u0026quot;blue\u0026quot; fish ## 3 A wisp of cloud hung in the blue air. \u0026quot;blue\u0026quot; air. ## 4 Leaves turn brown and yellow in the fall. \u0026quot;yellow\u0026quot; in ## 5 The spot on the blotter was made by green ink. \u0026quot;green\u0026quot; ink. ## 6 The sofa cushion is red and of light weight. \u0026quot; red\u0026quot; and ## 7 A blue crane is a tall wading bird. \u0026quot;blue\u0026quot; crane ## 8 It is hard to erase blue or red ink. \u0026quot;blue\u0026quot; or ## 9 The lamp shone with a steady green flame. \u0026quot;green\u0026quot; flame. ## 10 The box is held by a bright red snapper. \u0026quot; red\u0026quot; snapper. ## # ... with 14 more rows #Note that extract() only returns the first match in a string! In this example, if there is a sentence with two colors, extract() will return only the first color and following word. #example: \u0026quot;It is hard to erase blue or red ink.\u0026quot; returns only \u0026quot;blue\u0026quot; \u0026quot;or\u0026quot; How could this be useful?\n#what if we have some super messy data? Multiple observations combined into one column, with no spaces in between so you can\u0026#39;t use separate()? messy_data \u0026lt;- tribble(~name, ~x1, ~x2, \u0026quot;Soniedensis SO0141abcefff\u0026quot;, 2.54, 5.784, \u0026quot;Vcholerae VC1124kjelsls\u0026quot;, 2.13, 6.534, \u0026quot;Dethogenes DH09483nannnowb\u0026quot;, 3.24, 8.74) messy_data %\u0026gt;% extract(name, c(\u0026quot;organism\u0026quot;, \u0026quot;abbrev\u0026quot;, \u0026quot;gene_num\u0026quot;, \u0026quot;letters\u0026quot;), \u0026quot;([A-Z][a-z]*) ([A-Z]+)([0-9]*)([a-z]+)\u0026quot;, remove = FALSE)  ## # A tibble: 3 x 7 ## name organism abbrev gene_num letters x1 x2 ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Soniedensis SO0141abcefff Soniedensis SO 0141 abcefff 2.54 5.78 ## 2 Vcholerae VC1124kjelsls Vcholerae VC 1124 kjelsls 2.13 6.53 ## 3 Dethogenes DH09483nannnowb Dethogenes DH 09483 nannnowb 3.24 8.74 #another way to extract the same thing messy_data %\u0026gt;% extract(name, c(\u0026quot;organism\u0026quot;, \u0026quot;abbrev\u0026quot;, \u0026quot;gene_num\u0026quot;, \u0026quot;letters\u0026quot;), \u0026quot;([[:upper:]][[:lower:]]*) ([[:upper:]]+)([[:digit:]]*)([[:lower:]]+)\u0026quot;, remove = FALSE)  ## # A tibble: 3 x 7 ## name organism abbrev gene_num letters x1 x2 ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 Soniedensis SO0141abcefff Soniedensis SO 0141 abcefff 2.54 5.78 ## 2 Vcholerae VC1124kjelsls Vcholerae VC 1124 kjelsls 2.13 6.53 ## 3 Dethogenes DH09483nannnowb Dethogenes DH 09483 nannnowb 3.24 8.74  Is it helpful? I think that if I needed to distribute one character variable into several (for instance, if several observations were combined into one column), I would usually prefer to use a function like separate(). Human-entered data often has spaces or symbols between observations, which makes using separate() easy. However, computer output can be a single very long character string. I can see how using extract() to pluck out relevant information (say, timestamps or ID numbers) from a column of long strings could save a lot of time!\n    // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1644364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644364800,"objectID":"801e562e87dc00f4c7b6a048f74fb996","permalink":"https://sph-r-programming-2022.netlify.app/functions/tidyr_extract/","publishdate":"2022-02-09T00:00:00Z","relpermalink":"/functions/tidyr_extract/","section":"functions","summary":"Function of the Week: tidyr::extract()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"tidyr::extract()","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week:      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }    Function of the Week: Ashley Blair 02/03/2022  Submission Instructions Please sign up for a function here: https://docs.google.com/spreadsheets/d/1-RWAQTlLwttjFuZVAtSs8OiHIwu6AZLUdWugIHHTWVo/edit?usp=sharing\nFor this assignment, please submit both the .Rmd and the .html files. I will add it to the website. Remove your name from the Rmd if you do not wish it shared. If you select a function which was presented last year, please develop your own examples and content.\n Breaks_Pretty In this document, I will introduce the Breaks_Pretty function and show what it’s for.\n#load tidyverse up library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.6 v dplyr 1.0.7 ## v tidyr 1.1.4 v stringr 1.4.0 ## v readr 2.1.1 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() #example dataset library(palmerpenguins) #breaks pretty is in \u0026quot;scales\u0026quot; package library(scales) ## ## Attaching package: \u0026#39;scales\u0026#39; ## The following object is masked from \u0026#39;package:purrr\u0026#39;: ## ## discard ## The following object is masked from \u0026#39;package:readr\u0026#39;: ## ## col_factor What is it for? The breaks_pretty function is used to create easy, incremental break formatting - n= will specify the amount of breaks. This function is used more commonly for dates/times. Extended_breaks() is more commonly used for numeric scales. In the example below, I used numeric variables anyway.\n#create plot \u0026amp; designate how many \u0026quot;breaks\u0026quot; ggplot(penguins, aes(x=bill_length_mm, y=flipper_length_mm))+ geom_point() + scale_x_continuous(name= \u0026quot;Bill Length in mm\u0026quot;, breaks = breaks_pretty(4))  ## Warning: Removed 2 rows containing missing values (geom_point).  scale_y_continuous(name= \u0026quot;Flipper Length in mm\u0026quot;, breaks = breaks_pretty(8)) ## \u0026lt;ScaleContinuousPosition\u0026gt; ## Range: ## Limits: 0 -- 1 #R doesn\u0026#39;t always use the amount of \u0026quot;breaks\u0026quot; that you assign - apparently because it wants to best fit the data. For example - it won\u0026#39;t allow for n=50 for y-axis. ggplot(penguins, aes(x=bill_length_mm, y=flipper_length_mm))+ geom_point() + scale_x_continuous(name= \u0026quot;Bill Length in mm\u0026quot;, breaks = breaks_pretty(2))  ## Warning: Removed 2 rows containing missing values (geom_point).  scale_y_continuous(name= \u0026quot;Flipper Length in mm\u0026quot;, breaks = breaks_pretty(50))  ## \u0026lt;ScaleContinuousPosition\u0026gt; ## Range: ## Limits: 0 -- 1 Here is an example using dates!\none_year \u0026lt;- as.POSIXct(c(\u0026quot;2022-01-01\u0026quot;, \u0026quot;2023-01-01\u0026quot;)) demo_datetime(one_year) ## scale_x_datetime() demo_datetime(one_year, breaks = breaks_pretty(12)) ## scale_x_datetime(breaks = breaks_pretty(12)) demo_datetime(one_year, breaks = breaks_pretty(6)) ## scale_x_datetime(breaks = breaks_pretty(6)) demo_datetime(one_year, breaks = breaks_pretty(100)) ## scale_x_datetime(breaks = breaks_pretty(100))  Is it helpful?  Discuss whether you think this function is useful for you and your work. Is it the best thing since sliced bread, or is it not really relevant to your work?\n I find breaks_pretty much more useful in the dates example! Which makes sense considering it’s not generally used for numerical variables (penguin example).\n    // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1643846400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643846400,"objectID":"b34e6fd117f4fef0527f3f9682906674","permalink":"https://sph-r-programming-2022.netlify.app/functions/ggplot2_breaks_pretty/","publishdate":"2022-02-03T00:00:00Z","relpermalink":"/functions/ggplot2_breaks_pretty/","section":"functions","summary":"Function of the Week:      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"ggplot2::breaks_pretty()","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week: dplyr::ntile()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }    Function of the Week: dplyr::ntile() Qijia Liu 2022-01-26  \nIn this document, I will introduce the ntile() function and show what it’s for. library(dplyr) library(tidyverse) library(tidytuesdayR) tuesdata \u0026lt;- tt_load(\u0026#39;2022-01-18\u0026#39;) ChocolateBar \u0026lt;- tuesdata$chocolate \n What is it for?  The ntile() function can divide the observations into specified number of roughly equal sized groups by sorting the variable of interest with ascending order and then split up into. It requires two arguments as input: a vector(i.e. x) and an integer(i.e. 4).\n \n Examples vector \u0026lt;- rep(c(-1,1,2), each=4) vector ## [1] -1 -1 -1 -1 1 1 1 1 2 2 2 2 ntile(vector, 2) ## [1] 1 1 1 1 1 1 2 2 2 2 2 2 vector \u0026lt;- rep(c(2,-1,1), each=4) vector ## [1] 2 2 2 2 -1 -1 -1 -1 1 1 1 1 ntile(vector, 2) ## [1] 2 2 2 2 1 1 1 1 1 1 2 2 Chocolate Bar:  1. Divide the rating within a country into four ranked groups # How many countries? n_distinct(ChocolateBar$company_location) ## [1] 67 # Only select countries start with \u0026quot;A\u0026quot;: ChocolateBar \u0026lt;- ChocolateBar %\u0026gt;% select(company_location, rating) %\u0026gt;% filter(str_detect(company_location, \u0026quot;^A\u0026quot;)) table(ChocolateBar$company_location) ## ## Amsterdam Argentina Australia Austria ## 12 9 53 30 ChocolateBar \u0026lt;- ChocolateBar %\u0026gt;% mutate(quantile_rating = ntile(rating, 4)) table(ChocolateBar$quantile_rating) ## ## 1 2 3 4 ## 26 26 26 26 dim(ChocolateBar) ## [1] 104 3  2. Divide the rating within a country into four ranked groups by_ChocolateBar_quartile \u0026lt;- ChocolateBar %\u0026gt;% group_by(company_location) %\u0026gt;% mutate(quantile_company_location = ntile(rating, 4)) table(by_ChocolateBar_quartile$company_location, by_ChocolateBar_quartile$quantile_company_location) ## ## 1 2 3 4 ## Amsterdam 3 3 3 3 ## Argentina 3 2 2 2 ## Australia 14 13 13 13 ## Austria 8 8 7 7  3. Filter ChocolateBar according to rating median median(ChocolateBar$rating) ## [1] 3.25 range(ChocolateBar$rating) ## [1] 2.5 4.0 #only keep the observations less than the median ChocolateBar \u0026lt;- filter(ChocolateBar, ntile(rating, 2) \u0026lt; 2) range(ChocolateBar$rating) ## [1] 2.50 3.25 dim(ChocolateBar) ## [1] 52 3 \n  Is it helpful?  It is very useful when we categorize continuous predictor variables. Other function like cut() could perform data binning as well. \n    // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1643155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643652130,"objectID":"5f78cdecfb6c9ebfacb8f9166aecbe90","permalink":"https://sph-r-programming-2022.netlify.app/functions/ntile/","publishdate":"2022-01-26T00:00:00Z","relpermalink":"/functions/ntile/","section":"functions","summary":"Function of the Week: dplyr::ntile()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"dplyr::ntile()","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Data Transformation (5.1-5.5) from R for Data Science ggplot2: Elegant Graphics for Data Analysis, Scales \u0026amp; Guides R for Data Science: Factors - we will continue to work with factors in the next few classes with forcats examples like provided here.   Optional  Tidyverse style guide Advanced R: style guide This column-wise operations vignette will be useful for the next couple classes.   ","date":1643155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643234246,"objectID":"13bbf5064f8e7d91a62ab29bec4d6a2c","permalink":"https://sph-r-programming-2022.netlify.app/reading/04-reading/","publishdate":"2022-01-26T00:00:00Z","relpermalink":"/reading/04-reading/","section":"reading","summary":"  Required  Data Transformation (5.1-5.5) from R for Data Science ggplot2: Elegant Graphics for Data Analysis, Scales \u0026amp; Guides R for Data Science: Factors - we will continue to work with factors in the next few classes with forcats examples like provided here.   Optional  Tidyverse style guide Advanced R: style guide This column-wise operations vignette will be useful for the next couple classes.   ","tags":null,"title":"Part 4. `dplyr`: `mutate()`, `across()`, ggplot: faceting, scales","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Data Transformation (5.6-5.7) from R for Data Science Aggregating data with summarize and map - we will cover map() and rowwise() later, but summarize and mutate with across are described here. You may want to re-visit this when we get to purrr.   Optional  This column-wise operations vignette will be useful for the next couple classes.  The following resources are optional reading, but quite helpful in your RMarkdown Journey.\n RMarkdown Cheatsheet RMarkdown Cookbook RMarkdown for Scientists   ","date":1643155200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643234414,"objectID":"b547b9730ab3fca37d31e6ff09ab3c92","permalink":"https://sph-r-programming-2022.netlify.app/reading/05-reading/","publishdate":"2022-01-26T00:00:00Z","relpermalink":"/reading/05-reading/","section":"reading","summary":"Required  Data Transformation (5.6-5.7) from R for Data Science Aggregating data with summarize and map - we will cover map() and rowwise() later, but summarize and mutate with across are described here. You may want to re-visit this when we get to purrr.   Optional  This column-wise operations vignette will be useful for the next couple classes.  The following resources are optional reading, but quite helpful in your RMarkdown Journey.","tags":null,"title":"Part 5. summarize() and group_by(), doing things with multiple tables (left_join() etc), reshaping data (i.e. pivot_longer())","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week: fct_collapse()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }     code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }  #TOC { margin: 25px 0px 20px 0px; } @media (max-width: 768px) { #TOC { position: relative; width: 100%; } } @media print { .toc-content { /* see https://github.com/w3c/csswg-drafts/issues/4434 */ float: right; } } .toc-content { padding-left: 30px; padding-right: 40px; } div.main-container { max-width: 1200px; } div.tocify { width: 20%; max-width: 260px; max-height: 85%; } @media (min-width: 768px) and (max-width: 991px) { div.tocify { width: 25%; } } @media (max-width: 767px) { div.tocify { width: 100%; max-width: none; } } .tocify ul, .tocify li { line-height: 20px; } .tocify-subheader .tocify-item { font-size: 0.90em; } .tocify .list-group-item { border-radius: 0px; } .tocify-subheader { display: inline; } .tocify-subheader .tocify-item { font-size: 0.95em; }      Function of the Week: fct_collapse() Libby White Last Updated 2022-01-24  Submission Instructions Please sign up for a function here: https://docs.google.com/spreadsheets/d/1-RWAQTlLwttjFuZVAtSs8OiHIwu6AZLUdWugIHHTWVo/edit?usp=sharing\nFor this assignment, please submit both the .Rmd and the .html files. I will add it to the website. Remove your name from the Rmd if you do not wish it shared. If you select a function which was presented last year, please develop your own examples and content.\n\n fct_collapse()  In this document, I will introduce the fct_collapse() function and show what it’s for.  #load tidyverse up library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.3 ✓ stringr 1.4.0 ## ✓ readr 1.4.0 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() #example dataset library(palmerpenguins) \nWhat is it for?  This function is used for re-factoring a factor or character variable into fewer factor levels than it currently has. For example, I changed the factor variable “island” in the penguins data set from 3 levels to 2 by combining the islands “Dream” and “Torgersen” into “Not_Boscoe” below:  # 3 Factor Levels table(penguins$island) ## ## Biscoe Dream Torgersen ## 168 124 52 # 2 Factor Levels penguins_refactored \u0026lt;- fct_collapse(penguins$island, Biscoe = \u0026quot;Biscoe\u0026quot;, Not_Biscoe = c(\u0026quot;Torgersen\u0026quot;, \u0026quot;Dream\u0026quot;), other_level = \u0026quot;Missing\u0026quot;) # If any other values are encountered, they # will be classified as \u0026quot;Missing\u0026quot; table(penguins_refactored) ## penguins_refactored ## Biscoe Not_Biscoe ## 168 176 \n As a second example, I re-factored the variable for number of cylinders (“cyl”) from the mtcars data set from 3 to 2 factor levels:  CARS \u0026lt;- mtcars CARS$cyl \u0026lt;- as.factor(CARS$cyl) # 3 Factor Levels table(CARS$cyl) ## ## 4 6 8 ## 11 7 14 # 2 Factor Levels CARS_refactored \u0026lt;- fct_collapse(CARS$cyl, Four = \u0026quot;4\u0026quot;, More_than_Four = c(\u0026quot;6\u0026quot;, \u0026quot;8\u0026quot;), other_level = \u0026quot;Missing\u0026quot;) table(CARS_refactored) ## CARS_refactored ## Four More_than_Four ## 11 21 \n Is it helpful?  This function has its uses, but, overall, I think it may just be easier to create a new variable with the desired factor levels using mutate() and either case_when() or ifelse(). Below is an example of what I would do instead:  penguins_refactored_2 \u0026lt;- penguins %\u0026gt;% mutate(island_2lvls = ifelse(island == \u0026quot;Biscoe\u0026quot;, \u0026quot;Biscoe\u0026quot;, \u0026quot;Not Biscoe\u0026quot;)) table(penguins_refactored_2$island_2lvls) ## ## Biscoe Not Biscoe ## 168 176 \n Using the second example with the mtcars data set, I would do the following:  CARS_refactored_2 \u0026lt;- CARS %\u0026gt;% mutate(cyl_2lvls = ifelse(cyl == \u0026quot;4\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;More than four\u0026quot;)) table(CARS_refactored_2$cyl_2lvls) ## ## Four More than four ## 11 21       // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   $(document).ready(function () { // temporarily add toc-ignore selector to headers for the consistency with Pandoc $('.unlisted.unnumbered').addClass('toc-ignore') // move toc-ignore selectors from section div to header $('div.section.toc-ignore') .removeClass('toc-ignore') .children('h1,h2,h3,h4,h5').addClass('toc-ignore'); // establish options var options = { selectors: \"h1,h2,h3\", theme: \"bootstrap3\", context: '.toc-content', hashGenerator: function (text) { return text.replace(/[.\\\\/?\u0026!#]/g, '').replace(/\\s/g, '_'); }, ignoreSelector: \".toc-ignore\", scrollTo: 0 }; options.showAndHide = false; options.smoothScroll = true; // tocify var toc = $(\"#TOC\").tocify(options).data(\"toc-tocify\"); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1642982400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643652130,"objectID":"d625018ac9ac9271523ebbb1b2f617e0","permalink":"https://sph-r-programming-2022.netlify.app/functions/forcats_fct_collapse/","publishdate":"2022-01-24T00:00:00Z","relpermalink":"/functions/forcats_fct_collapse/","section":"functions","summary":"Function of the Week: fct_collapse()      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }     code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"forcats::fct_collapse()","type":"docs"},{"authors":null,"categories":null,"content":"   Function of the Week: Geom_Density      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState \u0026\u0026 document.readyState === \"complete\") { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } img { max-width:100%; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; } pre code { padding: 0; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; background-color: transparent; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }    Function of the Week: Geom_Density Mary McDonnell 2021_01_17  Geom_Density Geom_density is a function within the ggplot2 package that is used to plot/visualize data. It is a commonly used tool in statistics to display the distribution of numerical data; it does so by plotting the estimated kernel density, resulting in the smoothing/normalizing the distribution of the data.\n#load tidyverse up library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.1 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() #example dataset library(palmerpenguins) data(penguins) What is it for?  Discuss what the function does. Learn from the examples, but show how to use it using another dataset such as penguins. If you can provide two examples, even better!\n One of the most simple/classic means of displaying the distribution of data is with a histogram. The histogram below shows that the distribution of data (of the body mass of the penguins) are skewed to the right, and that there are a few outlier datapoints present.\nggplot(penguins, aes(x=body_mass_g)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 2 rows containing non-finite values (stat_bin). The function Geom_Density removes outlier data points, and acts to visualize the distribution of the data by smoothing it out– it helps to display where the datapoints/values are concentrated amongst the distribution in the form of peaks (see below).\nggplot(penguins, aes(x=body_mass_g)) + geom_density() ## Warning: Removed 2 rows containing non-finite values (stat_density).  Is it helpful?  Discuss whether you think this function is useful for you and your work. Is it the best thing since sliced bread, or is it not really relevant to your work?\n Geom_density smooths the distribution of the data through the removal of outlier data points and displays the data in a continuous smooth distribution. This function acts to simplify how the data are represented in case the distribution is bimodal, which sometimes cannot be easily determined with as much definition in a histogram.\n    // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.odd').parent('tbody').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open'); }); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    ","date":1642550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642619821,"objectID":"c7a808c68b91d903258877adc44fcc31","permalink":"https://sph-r-programming-2022.netlify.app/functions/ggplot2_geom_density/","publishdate":"2022-01-19T00:00:00Z","relpermalink":"/functions/ggplot2_geom_density/","section":"functions","summary":"Function of the Week: Geom_Density      h1 {font-size: 34px;} h1.title {font-size: 38px;} h2 {font-size: 30px;} h3 {font-size: 24px;} h4 {font-size: 18px;} h5 {font-size: 16px;} h6 {font-size: 12px;} code {color: inherit; background-color: rgba(0, 0, 0, 0.04);} pre:not([class]) { background-color: white }   code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} ul.task-list{list-style: none;}  code{white-space: pre;} if (window.","tags":null,"title":"ggplot2::geom_density()","type":"docs"},{"authors":null,"categories":null,"content":"  Required ggplot2  ggplot2 BERD workshop slides - lots more on different geoms and how to customize plots   dplyr  dplyr cheatsheet - one of the best references. Combining functions using the pipe operator, %\u0026gt;% - if you’re confused about %\u0026gt;%, please read this.    Optional Customizing ggplot2 If you are interested in learning more about ggplot:\n Themes to improve your ggplot figures by David Keyes is really helpful for learning how to do more styling. RStudio also publishes a ggplot cheat sheet that is really handy! Customizing ggplot2 Cheatsheet is also handy, because it organizes ggplot2 commands by task. Documentation for all ggplot features is available here.   Using tidyselect (Intermediate Level) Remember, select() works on columns.\ntidyselect lets you select columns by matching names. In conjunction with the across() command, you can apply the same operation to multiple columns at once. This is especially handy when you need to produce a summary on all numeric columns.\nYou can run the tidyselect tutorial by first installing the tidyowl package by Ted Laderas:\ninstall.packages(\u0026quot;remotes\u0026quot;) remotes::install_github(\u0026quot;laderast/tidyowl\u0026quot;) and then running this code in your Rstudio console window:\nlibrary(tidyowl) learn_tidyselect()   ","date":1642550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642466604,"objectID":"39100b29a777d527fde18e1fccc18a57","permalink":"https://sph-r-programming-2022.netlify.app/reading/03-reading/","publishdate":"2022-01-19T00:00:00Z","relpermalink":"/reading/03-reading/","section":"reading","summary":"Required ggplot2  ggplot2 BERD workshop slides - lots more on different geoms and how to customize plots   dplyr  dplyr cheatsheet - one of the best references. Combining functions using the pipe operator, %\u0026gt;% - if you’re confused about %\u0026gt;%, please read this.    Optional Customizing ggplot2 If you are interested in learning more about ggplot:\n Themes to improve your ggplot figures by David Keyes is really helpful for learning how to do more styling.","tags":null,"title":"Part 3: `ggplot2`, factors, boxplots, `dplyr`: subsetting using `filter()`/`select()`","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Data Organization in Spreadsheets by Kara Woo and Karl Broman - if there is one paper that I think is useful for everyone, it’s this one. Absolute and Relative File Paths - sometimes understanding file paths can be difficult. This is a great follow up reading. The video is very helpful as well. What are R packages?   ","date":1641945600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640825174,"objectID":"def8daf7a7859ddd197971151353ea19","permalink":"https://sph-r-programming-2022.netlify.app/reading/02-reading/","publishdate":"2022-01-12T00:00:00Z","relpermalink":"/reading/02-reading/","section":"reading","summary":"  Required  Data Organization in Spreadsheets by Kara Woo and Karl Broman - if there is one paper that I think is useful for everyone, it’s this one. Absolute and Relative File Paths - sometimes understanding file paths can be difficult. This is a great follow up reading. The video is very helpful as well. What are R packages?   ","tags":null,"title":"Part 2: Data Frames/Loading Data/ggplot2","type":"docs"},{"authors":null,"categories":null,"content":"  Required Remember, this reading is mostly supplemental and will help you if there are concepts that are unclear in class.\n R and RStudio Basics - make sure to watch the videos. Vectors and Data Frames Rstudio projects   Optional Markdown Basics This is a short reference on how to do formatting in Markdown. This is optional, but may be a helpful reference as you continue on and work with Markdown and RMarkdown.\nhttps://sph-r-programming-2022.netlify.app/reference/markdown.html\n Swirl Basics I’m going to highlight another resource for learning basic R concepts: swirl. This is a software package for R.\nTo start it, run the following code in the console in RStudio Cloud:\nlibrary(swirl) swirl() You’ll want to take a look at the R Programming course, especially the following sections:\nBasic Building Blocks Sequences of Numbers Vectors Missing values    ","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640825174,"objectID":"57c6d6996ee98125a5375a3865ff4c4c","permalink":"https://sph-r-programming-2022.netlify.app/reading/01-reading/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/reading/01-reading/","section":"reading","summary":"Required Remember, this reading is mostly supplemental and will help you if there are concepts that are unclear in class.\n R and RStudio Basics - make sure to watch the videos. Vectors and Data Frames Rstudio projects   Optional Markdown Basics This is a short reference on how to do formatting in Markdown. This is optional, but may be a helpful reference as you continue on and work with Markdown and RMarkdown.","tags":null,"title":"Introduction to R/RStudio/Vectors/For Loops","type":"docs"},{"authors":null,"categories":null,"content":"  Ted Laderas In this document, I will introduce the slice() function and show what it’s for.\nlibrary(tidyverse) ## Warning: package \u0026#39;tidyverse\u0026#39; was built under R version 4.0.3 ## -- Attaching packages --------------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.3.3 v purrr 0.3.4 ## v tibble 3.0.6 v dplyr 1.0.4 ## v tidyr 1.1.2 v stringr 1.4.0 ## v readr 1.4.0 v forcats 0.5.1 ## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;tibble\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;tidyr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;readr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;purrr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;dplyr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;stringr\u0026#39; was built under R version 4.0.3 ## Warning: package \u0026#39;forcats\u0026#39; was built under R version 4.0.3 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(palmerpenguins) ## Warning: package \u0026#39;palmerpenguins\u0026#39; was built under R version 4.0.3 data(penguins)  What is it for? Say you want the first 7 rows of a table. Well, slice() is an easy way to do that. The slice() function accepts two arguments: The first is the dataset, and the second is the range of values you want to extract.\nslice(penguins, 1:7) ## # A tibble: 7 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_~ body_mass_g sex ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; ## 1 Adelie Torge~ 39.1 18.7 181 3750 male ## 2 Adelie Torge~ 39.5 17.4 186 3800 fema~ ## 3 Adelie Torge~ 40.3 18 195 3250 fema~ ## 4 Adelie Torge~ NA NA NA NA \u0026lt;NA\u0026gt; ## 5 Adelie Torge~ 36.7 19.3 193 3450 fema~ ## 6 Adelie Torge~ 39.3 20.6 190 3650 male ## 7 Adelie Torge~ 38.9 17.8 181 3625 fema~ ## # ... with 1 more variable: year \u0026lt;int\u0026gt; slice() is much more helpful in a tidy workflow, so you can see the first few rows of the data when you’re processing. This is really helpful when you’re building up a pipeline and need to show intermediate output without showing the entire table.\npenguins %\u0026gt;% slice(1:7) ## # A tibble: 7 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_~ body_mass_g sex ## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; ## 1 Adelie Torge~ 39.1 18.7 181 3750 male ## 2 Adelie Torge~ 39.5 17.4 186 3800 fema~ ## 3 Adelie Torge~ 40.3 18 195 3250 fema~ ## 4 Adelie Torge~ NA NA NA NA \u0026lt;NA\u0026gt; ## 5 Adelie Torge~ 36.7 19.3 193 3450 fema~ ## 6 Adelie Torge~ 39.3 20.6 190 3650 male ## 7 Adelie Torge~ 38.9 17.8 181 3625 fema~ ## # ... with 1 more variable: year \u0026lt;int\u0026gt;  Is it helpful? Yes, when you need to just show part of a table as an example, slice() can come in handy. I don’t use it everyday, but it can come in handy.\n ","date":1610496000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640824446,"objectID":"3fd570c5fadc8ea64a910781fe38a251","permalink":"https://sph-r-programming-2022.netlify.app/functions/slice/","publishdate":"2021-01-13T00:00:00Z","relpermalink":"/functions/slice/","section":"functions","summary":"Ted Laderas In this document, I will introduce the slice() function and show what it’s for.\nlibrary(tidyverse) ## Warning: package \u0026#39;tidyverse\u0026#39; was built under R version 4.0.3 ## -- Attaching packages --------------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.3.3 v purrr 0.3.4 ## v tibble 3.0.6 v dplyr 1.0.4 ## v tidyr 1.1.2 v stringr 1.4.0 ## v readr 1.4.0 v forcats 0.5.1 ## Warning: package \u0026#39;ggplot2\u0026#39; was built under R version 4.","tags":null,"title":"dplyr::slice()","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Tidymodels with R: Recipes Tidymodels with R: Fitting Models with Parsnip Tidymodels with R: Judging Model Effectiveness   ","date":1583798400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615415770,"objectID":"d0380f92d2c5810a9015341ca52e98e8","permalink":"https://sph-r-programming-2022.netlify.app/reading/10-reading/","publishdate":"2020-03-10T00:00:00Z","relpermalink":"/reading/10-reading/","section":"reading","summary":"  Required  Tidymodels with R: Recipes Tidymodels with R: Fitting Models with Parsnip Tidymodels with R: Judging Model Effectiveness   ","tags":null,"title":"Part 10. Tidymodels/Supervised Learning/Logistic Regression","type":"docs"},{"authors":null,"categories":null,"content":"  Required  Introduction to Functions and Arguments Introduction to Lists - be sure to read this before class next week. Control your Factors Using Forcats   Suggested  More on joining data in Relational data from R for Data Science, especially about duplicate keys Dates and times in R for Data Science   ","date":1581292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643839706,"objectID":"8d8807fc9147f1179507cdb58c8cc00b","permalink":"https://sph-r-programming-2022.netlify.app/reading/06-reading/","publishdate":"2020-02-10T00:00:00Z","relpermalink":"/reading/06-reading/","section":"reading","summary":"  Required  Introduction to Functions and Arguments Introduction to Lists - be sure to read this before class next week. Control your Factors Using Forcats   Suggested  More on joining data in Relational data from R for Data Science, especially about duplicate keys Dates and times in R for Data Science   ","tags":null,"title":"Part 6. Lists and RMarkdown","type":"docs"},{"authors":null,"categories":null,"content":"  Updated later.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640217040,"objectID":"c94171b29fd78895e874028f7926ba7d","permalink":"https://sph-r-programming-2022.netlify.app/reviews/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reviews/","section":"","summary":"Updated later.","tags":null,"title":"Course Reviews","type":"page"},{"authors":null,"categories":null,"content":"  Required  UMAP and Cocktail Recipes Tidymodels: K-means PCA and Penguins   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614879029,"objectID":"efc0eb1097e131916a05aba545a0a59a","permalink":"https://sph-r-programming-2022.netlify.app/reading/09-reading/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reading/09-reading/","section":"reading","summary":"  Required  UMAP and Cocktail Recipes Tidymodels: K-means PCA and Penguins   ","tags":null,"title":"Part 9. Tidymodels/Unsupervised Learning/Logistic Regression","type":"docs"},{"authors":null,"categories":null,"content":"  Here’s your roadmap for the quarter!\n  Readings are supplemental to each lecture session  Assignments are due by 11:59 PM on the day they are due  Class materials (slides, in-class activities, etc.) will be added on the day of class  Please note that this schedule is tentative. I want us to learn concepts, rather than have a lot of material.\n   Part 1: tidyverse Basics Reading Assignment Class   January 5 Part 1: Introduction to course/expectations, Intro to R/RStudio, Functions, Vectors, Data Types       January 12 Part 2: Loading Data, data.frames, and ggplot2       January 19 Part 3: dplyr: subsetting using filter()/select()       January 26 Part 4. dplyr: mutate(),across(), case_when(), factors, ggplot2 boxplots, facets, scales       February 2 Part 5. summarize() and group_by(), doing things with multiple tables (left_join() etc), reshaping data (i.e. pivot_longer())       February 2 Take Home Midterm Assigned          Part 2: Intermediate Topics Reading Assignment Class   February 9 Part 6. Intro to functions, working with lists        February 13 Take home midterm due         February 16 Part 7: Functions/batch processing/purrr        February 23 Part 8. More with factors, dates, strings.        March 3 Part 9. Intro to stats/formulas/broom/More Purrr        March 2 Final Project Assigned         March 9 Part 10. Stats in Tables        March 16 Part 11. TBD        March 16 Final Project Due          ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614043016,"objectID":"3e223d7ba58b0122b42458e4cf52e04c","permalink":"https://sph-r-programming-2022.netlify.app/schedule/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/schedule/","section":"","summary":"Here’s your roadmap for the quarter!\n  Readings are supplemental to each lecture session  Assignments are due by 11:59 PM on the day they are due  Class materials (slides, in-class activities, etc.) will be added on the day of class  Please note that this schedule is tentative. I want us to learn concepts, rather than have a lot of material.\n   Part 1: tidyverse Basics Reading Assignment Class   January 5 Part 1: Introduction to course/expectations, Intro to R/RStudio, Functions, Vectors, Data Types       January 12 Part 2: Loading Data, data.","tags":null,"title":"Schedule","type":"page"},{"authors":null,"categories":null,"content":"   Course Description Credit Hours Learning Objectives Course Website Office Hours Prerequisites or Concurrent Enrollment Requirements Faculty Information  Instructor Teaching Assistant  Code of Conduct Required Texts or Readings Words of Encouragement LeaRning is Social Attendance Requirements Grading Policy  Late Policy  Copyright Information School of Public Health Handbook Syllabus Changes and Retention Syllabus Statement Regarding Disability Services Commitment of Equity and Inclusion Academic Honesty Use of Sakai OHSU Proctoring Policy   Instructor  Dr. Jessica Minnier  KCRB  minnier@ohsu.edu  @datapointier   Course details  Wednesdays  January 5 – March 16, 2022  3:15–6:05 PM  Online   Contacting me E-mail or Slack is the best way to get in contact with me. I will try to respond to all course-related e-mails within 1 business day.\n  Course Description This course is meant to be a gentle introduction to data wrangling and visualization using the tidyverse in R. This course focuses on practical data science skills in R (loading data, data wrangling, visualization, automation, machine learning, and running statistical models) that you’ll use almost everyday in your work. It is meant for both beginners and students wanting to brush up on their R skills.\n Credit Hours 3 credit hours.\n Learning Objectives Understand and utilize R/RStudio. Understand basic data types and data structures in R. Familiarize and load data files (Excel, Comma Separated Value files) into R/Rstudio, with tips on formatting. Visualize datasets using ggplot2 and understand how to build basic plots using ggplot2 syntax. Filter and format data in R for use with various routines. Execute and Interpret some basic statistics in R. Automate repetitive tasks in R, such as loading a folder of files.  If time allows:\nCreate fancy tables in our R markdown reports with gt and/or kableExtra. Learn about Bioconductor Data Structures and conduct simple analysis with these structures. Build basic interactive applications with shiny.   Course Website All course information will be available here:\nhttps://sph-r-programming-2022.netlify.com/\nInformation will also be available on the Sakai website.\nCourse discussions will be done in the class Slack channel. Invites will be sent before class.\nAssignments will be due by 11:59pm on the day of the next week’s class. They will be done in .Rmd documents and students will submit compiled html files to Sakai.\n Office Hours Office Hours will be held via Zoom and a link will be sent out that day. Feel free to drop into the office hours and work and ask questions as needed.\n Prerequisites or Concurrent Enrollment Requirements No Prerequisites\n Faculty Information Instructor Jessica Minnier, PhD\nminnier@ohsu.edu\nPreferred Method of Contact: Email/Slack\nExpected Response Time: 1 business day\n Teaching Assistant Colin H.\n  Code of Conduct This class is governed by the BioData Club Code of Conduct: https://biodata-club.github.io/code_of_conduct/\nAnd as students of an OHSU course, we must abide by the OHSU Code of Conduct: https://www.ohsu.edu/integrity-department/code-conduct\nThis class is meant to be a psychologically safe space where it’s ok to ask questions. We want to normalize your own curiosity and fuel your desire to learn more.\nIf you are disruptive to class learning or disparaging to other students, I may mute you for the day. I am very serious about this.\n Required Texts or Readings We will be drawing on the following online textbooks during class and labs. These books are online and free, though you can order them as textbooks if you prefer that format.\nGetting Used to R, RStudio, and RMarkdown. Chester Ismay. https://ismayc.github.io/rbasics-book/\nIntroduction to Data Science. Tiffany Timbers, Trevor Campbell, Melissa Lee. https://ubc-dsci.github.io/introduction-to-datascience/\nRMarkdown for Scientists. Nick Tierney. https://rmd4sci.njtierney.com/\nR for Data Science. Garret Grolemund and Hadley Wickham. https://r4ds.had.co.nz/\n Words of Encouragement  This was adopted from Andrew Heiss. Thanks!\n I promise you can succeed in this class.\nLearning R can be difficult at first—it’s like learning a new language, just like Spanish, French, or Chinese. Hadley Wickham—the chief data scientist at RStudio and the author of some amazing R packages you’ll be using like ggplot2—made this wise observation:\n It’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later.\n Even experienced programmers find themselves bashing their heads against seemingly intractable errors. If you’re finding yourself taking way too long hitting your head against a wall and not understanding, take a break, talk to classmates, e-mail me, etc.\n\n LeaRning is Social The students who have a bad time in my workshops and courses are the ones who don’t work with each other to learn. We are a learning community, and we should help each other to learn.\nIf you understand something and someone is struggling with it, try and help them. If you are struggling, take a breath, and try to pinpoint what you are struggling with.\nOur goal is to be better programmers each day, not to be the perfect programmer. There’s no such thing as a perfect programmer. I’ve been learning new things almost every day.\n Attendance Requirements Online attendance is required. Please let me know in advance if you have to miss class, or if you have an emergency.\nClasses will be recorded, but please do not use this as an excuse to miss class. Again, those who are curious and ask questions will learn quite a bit.\n Grading Policy  Attendance 10% Midterm Project 15% Function of the Week 10% Homework Assignments 45% Final Project 20%  Late Policy Students get 1 free assignment to submit late without penalties. Please email us through Sakai that you need more time. If you need accommodation, please email us so we can figure out a way to help you.\n  Copyright Information Every reasonable effort has been made to protect the copyright requirements of materials used in this course. Class participants are warned not to copy, audio, or videotape in violation of copyright laws.\nJournal articles will be kept on reserve at the library or online for student access. Copyright law does allow for making one personal copy of each article from the original article. This limit also applies to electronic sources.\nTo comply with the fair use fair use doctrine of the US copyright law, Sakai course sites close three weeks after grades are posted with the Registrar. Please be sure to download all course material you wish to keep before this time as you will have no further access to your courses.\n School of Public Health Handbook All students are responsible for following the policies and expectations outlined in the student handbook for their program of study. Students are responsible for their own academic work and are expected to have read and practice principles of academic honesty, as presented in the handbook: https://ohsu-psu-sph.org/graduate/handbooks-policies-forms/\n Syllabus Changes and Retention This syllabus is not to be considered a contract between the student and the School of Public Health. It is recognized that changes may be made as the need arises. Students are responsible for keeping a copy of the course syllabus for their records.\n Syllabus Statement Regarding Disability Services OHSU is committed to providing equal access to qualified students who experience a disability in compliance with Section 504 of the Rehabilitation Act of 1973, the Americans with Disabilities Act (ADA) of 1990, and the ADA Amendments Act (ADA-AA) of 2008. If you have a disability or think you may have a disability (physical, sensory, chronic health, psychological or learning) please contact the Office for Student Access at (503) 494-0082 or studentaccess@ohsu.edu to discuss eligibility for academic accommodations. Information is also available at www.ohsu.edu/student-access. Because accommodations may take time to implement and cannot be applied retroactively, it is important to have this discussion as soon as possible. All information regarding a student’s disability is kept in accordance with relevant state and federal laws.\nPlease see Student Access \u0026amp; Accomodations section for more details on the Sakai version of this Syllabus.\n Commitment of Equity and Inclusion The School of Public Health is committed to providing an environment free of all forms of prohibited discrimination and discriminatory harassment. The School of Public Health students who have questions about an incident related to Title IX are welcome to contact either the OHSU or PSU’s Title IX Coordinator and they will direct you to the appropriate resource or office. Title IX pertains to any form of sex/gender discrimination, discriminatory harassment, sexual harassment or sexual violence.\nPSU’s Title IX Coordinator is Julie Caron, she may be reached at titleixccordinator@pdx.edu or 503-725-4410. Julie’s office is located at 1600 SW 4th Ave, In the Richard and Maureen Neuberger Center RMNC - Suite 830.\nThe OHSU Title IX Coordinator’s may be reached at 503-494-0258 or titleix@ohsu.edu and is located at 2525 SW 3rd St.\nPlease note that faculty and the Title IX Coordinators will keep the information you disclose private but are not confidential. If you would like to speak with a confidential advocate, who will not disclose the information to a university official without your written consent, you may contact an advocate at PSU or OHSU.\nPSU’s confidential advocates are available in Women’s Resource Center (serving all genders) in Smith Student Memorial Union 479. You may schedule an appointment by (503-725-5672) or schedule on line at https://psuwrc.youcanbook.me. For more information about resources at PSU, please see PSU’s Response to Sexual Misconduct website.\nOHSU’s advocates are available through the Confidential Advocacy Program (CAP) at 833-495-CAPS (2277) or by email CAPsupport@ohsu.edu, but please note, email is not a secure form of communication. Also visit www.ohsu.edu/CAP.\nAt OHSU, if you encounter any harassment, or discrimination based on race, color, religion, age, national origin or ancestry, veteran or military status, sex, marital status, pregnancy or parenting status, sexual orientation, gender identity or expression, disability or any other protected status, please contact the Affirmative Action and Equal Opportunity (AAEO) Department at 503- 494-5148 or aaeo@ohsu.edu.\nAt PSU, you may contact the Office of Equity and Compliance if you experience any form of discrimination or discriminatory harassment as listed above at equityandcompliance@pdx.edu or by calling 503-725-5919.\n Academic Honesty Course participants are expected to maintain academic honesty in their course work. Participants should refrain from seeking past published solutions to any assignments. Literature and resources (including Internet resources) employed in fulfilling assignments must be cited. See http://www.ohsu.edu/xd/education/library/research-assistance/plagiarism.cfm?WT_rank=1# for information on code of conduct for OHSU and\nhttp://www.ohsu.edu/xd/education/teaching-and-learning-center/for-students/index.cfm for more information on citing sources and recognizing plagiarism.\nIn an effort to uphold the principles and practice of academic honesty, faculty members at OHSU may use originality checking systems such as Turnitin to compare a student’s submitted work against multiple sources.\nTo protect student privacy in this process, it will be necessary to remove all personal information, i.e. student name, email address, student u-number, or any other personal information, from documents BEFORE submission.\n Use of Sakai This course will have an online component, which can be accessed through Sakai, OHSU’s online course management system. For any technical questions or if you need help logging in, please contact the Sakai Help Desk.\nHours: Sakai Help Desk is available Mon – Fri, 8 am – 9 pm and weekends 12 pm – 5 pm, Pacific Time.\nContact Information:\n(Toll-free) 877-972-5249\n(Web) http://atech.ohsu.edu/help\n(Email) sakai@ohsu.edu\n OHSU Proctoring Policy It is OHSU policy that any exam offered online and worth more than 10% of the final course grade must be virtually proctored. In this course, we will be using the services of Examity, a remote proctoring services. You will be required to schedule your exam three (3) weeks ahead of time. There is no cost to the student. More information will be provided to you regarding setup, scheduling, and requirements in the Course Materials.\nPolicy number: 02-70-050 (http://www.ohsu.edu/xd/education/student-services/academic-programs-and-assessment/academic-policy/approved-policies/upload/Online-Exam-Proctoring-02-70-050.pdf)\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640912820,"objectID":"e4d5a4a79239f08c6ad0d7cbf1be756c","permalink":"https://sph-r-programming-2022.netlify.app/syllabus/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/syllabus/","section":"","summary":"Course Description Credit Hours Learning Objectives Course Website Office Hours Prerequisites or Concurrent Enrollment Requirements Faculty Information  Instructor Teaching Assistant  Code of Conduct Required Texts or Readings Words of Encouragement LeaRning is Social Attendance Requirements Grading Policy  Late Policy  Copyright Information School of Public Health Handbook Syllabus Changes and Retention Syllabus Statement Regarding Disability Services Commitment of Equity and Inclusion Academic Honesty Use of Sakai OHSU Proctoring Policy   Instructor  Dr.","tags":null,"title":"Syllabus","type":"page"},{"authors":null,"categories":null,"content":"  R Project files Before each class, I will load an R project on github, and provide the download link here. Unzip this folder and open in Rstudio by double clicking on the .Rproj file. This folder will have the files for this part and the assignment.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.\nhttps://sph-r-programming-2022.netlify.app/01-introduction_slides#1 -- Post-Class Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.\n Clearest Point: What was the most clear part of the lecture? Muddiest Point: What was the most unclear part of the lecture to you? Anything Else: Is there something you’d like me to know?  https://forms.gle/4tVx1mL7SzQx7MCu5\n  Muddiest Points/Clearest Points I will add the muddiest/clearest points from the survey after the first class.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640824428,"objectID":"8b2aba8869e8a2568f8b5c8687d037d9","permalink":"https://sph-r-programming-2022.netlify.app/class/00-class-template/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/class/00-class-template/","section":"class","summary":"R Project files Before each class, I will load an R project on github, and provide the download link here. Unzip this folder and open in Rstudio by double clicking on the .Rproj file. This folder will have the files for this part and the assignment.\n Class Video The video will be uploaded after class.\nView last year’s class and materials here.\n --  Slides To be posted.","tags":null,"title":"tmp","type":"class"}]