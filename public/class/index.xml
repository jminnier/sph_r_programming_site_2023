<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Class details | R Programming 2023</title>
    <link>https://sph-r-programming-2023.netlify.app/class/</link>
      <atom:link href="https://sph-r-programming-2023.netlify.app/class/index.xml" rel="self" type="application/rss+xml" />
    <description>Class details</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <image>
      <url>https://sph-r-programming-2023.netlify.app/img/social-image.png</url>
      <title>Class details</title>
      <link>https://sph-r-programming-2023.netlify.app/class/</link>
    </image>
    
    <item>
      <title>Class 1: Introduction to R/Rstudio/Vectors</title>
      <link>https://sph-r-programming-2023.netlify.app/class/01-class/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/01-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#install-rrstudio&#34; id=&#34;toc-install-rrstudio&#34;&gt;Install R/Rstudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-files&#34; id=&#34;toc-class-files&#34;&gt;Class files&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34; id=&#34;toc-slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this-years-class-video&#34; id=&#34;toc-this-years-class-video&#34;&gt;This year’s class video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-years-class-video&#34; id=&#34;toc-last-years-class-video&#34;&gt;Last Year’s Class Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pacing&#34; id=&#34;toc-pacing&#34;&gt;Pacing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#muddiest-points&#34; id=&#34;toc-muddiest-points&#34;&gt;Muddiest Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clearest-points&#34; id=&#34;toc-clearest-points&#34;&gt;Clearest Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-messages-just-a-selection&#34; id=&#34;toc-other-messages-just-a-selection&#34;&gt;Other messages, just a selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#additional-info&#34; id=&#34;toc-additional-info&#34;&gt;Additional Info&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#projects-in-rstudio-desktop&#34; id=&#34;toc-projects-in-rstudio-desktop&#34;&gt;Projects in RStudio Desktop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slack-intro&#34; id=&#34;toc-slack-intro&#34;&gt;Slack Intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;install-rrstudio&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Install R/Rstudio&lt;/h1&gt;
&lt;p&gt;Before class, please install R and Rstudio. If it has been a while since you installed R, please re-install R to update to the most recent version (warning: you may lose all your installed packages and will have to re-install them).&lt;/p&gt;
&lt;p&gt;Installation instructions can be found &lt;a href=&#34;https://jminnier-berd-r-courses.netlify.app/00-install-instruct-bsta504.html&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please also &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;download the “part1” folder in this course materials link&lt;/a&gt;. Unzip the folder if needed. Open the Rstudio project by double clicking on the .Rproj file (“Rstudio project file”). Run the &lt;code&gt;00-install-packages.R&lt;/code&gt; script to install necessary packages. A video on how to do this can be found &lt;a href=&#34;https://www.youtube.com/watch?v=GU22sKHn9uc&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GU22sKHn9uc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;class-files&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Class files&lt;/h1&gt;
&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Before each class, I will update &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this folder link&lt;/a&gt; with the appropriate “part” folder. Please download the &lt;code&gt;part1&lt;/code&gt; folder. Unzip this folder and open in Rstudio by double clicking on the .Rproj file. This folder will have the files for this part and the assignment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;Open the class introduction slides in a separate window: &lt;a href=&#34;https://sph-r-programming-2023.netlify.app/slides/01-introduction_slides#1&#34; target=&#34;_blank&#34;&gt;https://sph-r-programming-2023.netlify.app/01-introduction_slides#1&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://sph-r-programming-2023.netlify.com/slides/01-introduction_slides#1&#34; width=&#34;672&#34; height=&#34;400px&#34; data-external=&#34;1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;this-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;This year’s class video&lt;/h2&gt;
&lt;p&gt;See Slack for the zoom recording link&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last Year’s Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/hYowdr4oyOI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/01-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thank you to everyone who responded to the survey the first week!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pacing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Pacing&lt;/h1&gt;
&lt;p&gt;Mean 3.18, IQR [3,3] so, that’s a good sign, though there was one comment it went a little fast. I admittedly was trying to cram in a lot of basics all at once, so I’ll try to go a touch slower with the hard things.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Muddiest Points&lt;/h1&gt;
&lt;p&gt;Remember, all of this is anonymous. I don’t post everything everyone says on here, but I do read them all and think about how to improve the class based on what everyone says.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Boolean data, until you explained it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will talk more about boolean data in class 2, I kind of rushed the intro to that but we’ll definitely see more examples!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;default arguments&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I added this one, I want to make sure to show you the help in R and how we know what the “default” arguments are, that we don’t need to specify.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;removing missing values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes this is a confusing thing in R, one point to remember is the difference between a function like &lt;code&gt;na.omit()&lt;/code&gt; and an argument like &lt;code&gt;na.rm = TRUE&lt;/code&gt; which sets the missing data behavior within a specific function like &lt;code&gt;mean()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myvec &amp;lt;- c(1, NA, 3)
# removes missing values, does not save your work!
na.omit(myvec)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 3
## attr(,&amp;quot;na.action&amp;quot;)
## [1] 2
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;omit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# removes missing values, overwrites the object/variable myvec after removing them
myvec &amp;lt;- na.omit(myvec)


myvec &amp;lt;- c(1, NA, 3)
# default behavior is to include NA in the computation
mean(myvec)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# specifies that we want to get rid of NA first
mean(myvec, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# different functions have different arguments to handle missing data
# see ?cor for help and the explanation of the use argument
vec1 &amp;lt;- c(1, NA, 2, 3)
vec2 &amp;lt;- c(2, 3, NA, 4)
cor(vec1, vec2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor(vec1, vec2, use = &amp;quot;pairwise.complete.obs&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# cor(vec1, vec2, use = &amp;quot;all.obs&amp;quot;) # this throws an error, why?&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Data types and vectors. It was clear, however, when I watched the class recording.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will go over this again in class 2 when we talk about data!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While I was reading the materials about vectors and variables, I’m still not very clear on the differences between vectors and variables. For instance, when we concatenate a list of regions (example from book) and create a vector named “region.” It sounds similar to how we assign values or characters to create a variable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a great point, and I tend to be a little lax with the definitions of some of these terms so apologies if it is confusing.&lt;/p&gt;
&lt;p&gt;I would say a variable is the same as an object in R. It is the name of something that we save and that we can see in our environment tab. That means it could be a vector, a data set, a list, a unique object type – all data types we will talk about in the coming classes.&lt;/p&gt;
&lt;p&gt;I also use the word “variable” when talking about columns of a data set or data frame, though. Therefore, it’s not a precise word and I’m sorry I use it so much!&lt;/p&gt;
&lt;p&gt;A vector is a specific type of object in R. It has a length and a class/type. It does not have a “width” like a data frame does (we will talk about these in class 2). We will also talk about types or classes of vectors (character, numeric, boolean) a bit more in these classes.&lt;/p&gt;
&lt;p&gt;For a more thorough introduction, read R for Data Science &lt;a href=&#34;https://r4ds.had.co.nz/vectors.html&#34;&gt;Vector&lt;/a&gt;. If you want a rather advanced treatment of data types, see &lt;a href=&#34;https://adv-r.hadley.nz/vectors-chap.html&#34;&gt;Advanced R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As far as naming vectors or data, we often call them something that we can easily remember or make sense of. I think that also can cause confusion though, in the regions example.&lt;/p&gt;
&lt;p&gt;This all make more sense once we talk about data frames, which contain vectors as columns!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;packages - why did my R crash?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ugh I’m so sorry and I don’t have a clear idea. My best guess is that there were older packages installed and for some reason &lt;code&gt;pacman::p_load&lt;/code&gt; tried to install packages without installing their dependencies first &lt;a href=&#34;https://stackoverflow.com/questions/31717850/error-package-or-namespace-load-failed-for-ggplot2-and-for-data-table&#34;&gt;packages that the installed package relies on to work, and often need at least a certain version&lt;/a&gt;. Perhaps if you don’t update your packages all that often, &lt;code&gt;install.packages()&lt;/code&gt; is the safer option?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The options for code blocks in r markdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I didn’t talk about this much yet, but I will keep showing examples of this. In the meantime, here are some good references, that I often have to go back to because I forget most of them most of the time:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yihui.org/knitr/options/&#34;&gt;Chunk options long list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/chunk-options.html&#34;&gt;R markdown book, chunk options chapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will also try to mention global options in class 2 as well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;how to also have an output below my code chuck as well&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ll talk about this again/more as well. This is a YAML option, and can be set using the “gear” icon next to the “Knit” button at the top of an Rmd (Chunk Output Inline vs Chunk Output Console). I think we can’t have it both ways. Also note that table output will look different from interactive R markdown and knitted R markdown sometimes. That can be a point of confusion. You can also change how that looks in “Output Options” from that gear dropdown menu (General -&amp;gt; print data frames as:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;R markdown in general, also R studio projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Understandable, I threw a lot of new stuff at most of you, and I’ll focus more on these things in class 2! I haven’t shown you the full benefits of using Rstudio projects yet because we haven’t started working with data. But hopefully class 2 and 3 it will become a bit more clear.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clearest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clearest Points&lt;/h1&gt;
&lt;p&gt;Lots of things here I’m not including, but, thank you for all of it!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Concatenate! I have never known what c() stood for!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s a weird one, for sure!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First time real exposure to R, so I REALLY was amazed by knitting the Rmd and how the class content was all “interactively” set in the Rmd.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s one of the main reasons why I just start using Rmd right away, because it’s pretty neat. It might cause more headaches later because it takes time getting used to, but it’s worth it to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-messages-just-a-selection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other messages, just a selection&lt;/h1&gt;
&lt;p&gt;Lots of you liked having challenges. Sometimes I get carried away adding too much instruction because there is so much I want to show you, so I hope I provide enough time for challenges this year.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i’ve had R experience but it’s difficult for me to quickly learn and adapt to it. I understand how to use it but have difficulty creating things like tables or organizing data. I’m hoping by the end of this course, i’ll be able to gain more knowledge to allow me to do those types of task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You are my perfect audience, these are my goals, too!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After 2 years of just sort of flinging myself at R willy-nilly, the first class showed me a lot of tips for using R that have already made my life easier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So happy to hear it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-info&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Additional Info&lt;/h1&gt;
&lt;div id=&#34;projects-in-rstudio-desktop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Projects in RStudio Desktop&lt;/h2&gt;
&lt;p&gt;See this short video about creating projects in Rstudio desktop if it’s a new concept to you:&lt;/p&gt;
&lt;iframe width=&#34;650&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/D22THnoPA6w&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;slack-intro&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slack Intro&lt;/h2&gt;
&lt;p&gt;Slack invite link is on Sakai, and will be emailed before class.&lt;/p&gt;
&lt;iframe width=&#34;800&#34; height=&#34;600&#34; src=&#34;https://www.youtube.com/embed/m2JuAa6-ors&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Part 2: Loading Data, data.frames, and ggplot2</title>
      <link>https://sph-r-programming-2023.netlify.app/class/02-class/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/02-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34; id=&#34;toc-readings&#34;&gt;Readings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this-years-class-video&#34; id=&#34;toc-this-years-class-video&#34;&gt;This year’s class video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-years-class-video&#34; id=&#34;toc-last-years-class-video&#34;&gt;Last Year’s Class Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#muddiest-points&#34; id=&#34;toc-muddiest-points&#34;&gt;Muddiest Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clearest-points&#34; id=&#34;toc-clearest-points&#34;&gt;Clearest Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-messages&#34; id=&#34;toc-other-messages&#34;&gt;Other messages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the &lt;code&gt;part2&lt;/code&gt; folder from &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this dropbox folder link&lt;/a&gt; Be sure to unzip if necessary. In advance of class, please open the &lt;code&gt;part2&lt;/code&gt; Rstudio project (double click on the &lt;code&gt;.rproj&lt;/code&gt; file), open &lt;code&gt;part2.Rmd&lt;/code&gt; and &lt;code&gt;knit&lt;/code&gt; (click the Knit button at the top of the file) this file. This will install packages that you need for the Rmd to run.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;p&gt;Required and suggested class readings can be found on the Readings tab by class. These readings may be done anytime before or after class, but they will supplement your understanding of the class materials and help make homework and project work easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;this-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;This year’s class video&lt;/h2&gt;
&lt;p&gt;See Slack for the zoom recording link&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last Year’s Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0-_luKuYo_E&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/02-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Muddiest Points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;the benefits of tibble vs data frame and when to use which?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this class we will always use tibble. Just remember that an object can be multiple types. A tibble is a data frame, but not vice versa. A tibble is really a data frame with “perks”. See this explanation from the &lt;a href=&#34;https://posit.co/blog/tibble-1-0-0/#:~:text=Tibbles%20vs%20data%20frames,to%20work%20with%20large%20data.&#34;&gt;tibble 1.0 package release&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two main differences in the usage of a data frame vs a tibble: printing, and subsetting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tibbles have a refined print method that shows only the first 10 rows, and all the columns that fit on screen. This makes it much easier to work with large data. In addition to its name, each column reports its type, a nice feature borrowed from &lt;code&gt;str()&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_tib &amp;lt;- as_tibble(mtcars)
class(mtcars_tib)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_tib&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 × 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # … with 22 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another interesting difference is that tibbles don’t have row names, but a lot of built in data.frames in R do. But rownames are hard to get out. So, when you make a tibble of a data.frame you can tell the function to use the rownames as a column:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_tib &amp;lt;- as_tibble(mtcars, rownames = &amp;quot;car_name&amp;quot;)
mtcars_tib&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 × 12
##    car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # … with 22 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Tibbles also clearly delineate [ and [[: [ always returns another tibble, [[ always returns a vector. No more drop = FALSE!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we ask for the first column using the &lt;code&gt;[]&lt;/code&gt; notation, we receive a numeric vector from a data frame, and a tibble/data.frame from the tibble.&lt;/p&gt;
&lt;p&gt;We have not learned the &lt;code&gt;[[]]&lt;/code&gt; yet because we have not talked about lists in R, but we will soon. The code below returns the first column as a vector for both a data frame and a tibble.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4
## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7
## [31] 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_tib[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 × 1
##    car_name         
##    &amp;lt;chr&amp;gt;            
##  1 Mazda RX4        
##  2 Mazda RX4 Wag    
##  3 Datsun 710       
##  4 Hornet 4 Drive   
##  5 Hornet Sportabout
##  6 Valiant          
##  7 Duster 360       
##  8 Merc 240D        
##  9 Merc 230         
## 10 Merc 280         
## # … with 22 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4
## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7
## [31] 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_tib[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Mazda RX4&amp;quot;           &amp;quot;Mazda RX4 Wag&amp;quot;       &amp;quot;Datsun 710&amp;quot;         
##  [4] &amp;quot;Hornet 4 Drive&amp;quot;      &amp;quot;Hornet Sportabout&amp;quot;   &amp;quot;Valiant&amp;quot;            
##  [7] &amp;quot;Duster 360&amp;quot;          &amp;quot;Merc 240D&amp;quot;           &amp;quot;Merc 230&amp;quot;           
## [10] &amp;quot;Merc 280&amp;quot;            &amp;quot;Merc 280C&amp;quot;           &amp;quot;Merc 450SE&amp;quot;         
## [13] &amp;quot;Merc 450SL&amp;quot;          &amp;quot;Merc 450SLC&amp;quot;         &amp;quot;Cadillac Fleetwood&amp;quot; 
## [16] &amp;quot;Lincoln Continental&amp;quot; &amp;quot;Chrysler Imperial&amp;quot;   &amp;quot;Fiat 128&amp;quot;           
## [19] &amp;quot;Honda Civic&amp;quot;         &amp;quot;Toyota Corolla&amp;quot;      &amp;quot;Toyota Corona&amp;quot;      
## [22] &amp;quot;Dodge Challenger&amp;quot;    &amp;quot;AMC Javelin&amp;quot;         &amp;quot;Camaro Z28&amp;quot;         
## [25] &amp;quot;Pontiac Firebird&amp;quot;    &amp;quot;Fiat X1-9&amp;quot;           &amp;quot;Porsche 914-2&amp;quot;      
## [28] &amp;quot;Lotus Europa&amp;quot;        &amp;quot;Ford Pantera L&amp;quot;      &amp;quot;Ferrari Dino&amp;quot;       
## [31] &amp;quot;Maserati Bora&amp;quot;       &amp;quot;Volvo 142E&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(mtcars[,1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(mtcars_tib[,1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(mtcars_tib[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I was mentioning in class, there are some (older) functions that don’t like tibbles, but all you need to do is just make its primary class a data.frame as such:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A handful of functions are don’t work with tibbles because they expect df[, 1] to return a vector, not a data frame. If you encounter one of these functions, use as.data.frame() to turn a tibble back to a data frame:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars_df &amp;lt;- as.data.frame(mtcars_tib)
class(mtcars_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Back to muddy quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;path files and knowing if you’re in a project or just an RMD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;R markdown vs R projects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope to spend more time talking about this in class 4.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ggplot stuff was the most muddy, but I also haven’t done a lot of ggplot stuff before&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes this was definitely expected for a brief intro, ggplot takes a while to get the hang of! We will use ggplot every class now, so we will go through it in bite sized pieces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using na=“NA” to pull in data and how to know that it’s needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will show more examples of this. Rule number one of importing data in any software is to &lt;em&gt;look&lt;/em&gt; at your data, and figure out if what you see in the software is what you expect. Always look at your data! The &lt;code&gt;read_excel(filename, na=&#34;NA&#34;)&lt;/code&gt; is a strange case that isn’t actually very common to code data as “NA” directly, but I wanted to show you how it looks different when it does happen. Usually, missing data is just a blank space, which is automatically read in as the special &lt;code&gt;NA&lt;/code&gt; data type in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If you did not include `na=NA` it would have been read in like this
df1 &amp;lt;- tibble(a = c(&amp;quot;NA&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;D&amp;quot;), b= 1:3,  c = c(1,3,&amp;quot;NA&amp;quot;))
# If you did include `na = NA` it would have been read in like this
df2 &amp;lt;- tibble(a = c(NA,&amp;quot;C&amp;quot;,&amp;quot;D&amp;quot;), b= 1:3, c = c(1,3,NA))

# note the character types of the two DFs, and the way NA is printed
df1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   a         b c    
##   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
## 1 NA        1 1    
## 2 C         2 3    
## 3 D         3 NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   a         b     c
##   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 &amp;lt;NA&amp;gt;      1     1
## 2 C         2     3
## 3 D         3    NA&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;I saw a lot of code with the two colons (“::”) in the middle. It is unclear to me if this is an alternative way to write some commands or if there is a certain context in which it is used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good question, what this does is pulls a function from a package, so it works whether you have &lt;em&gt;loaded&lt;/em&gt; the package (using &lt;code&gt;library()&lt;/code&gt; or &lt;code&gt;p_load()&lt;/code&gt;) or not. I mainly use it as a clue to you to where the function is coming from. Otherwise, you may not know you need to load that package to use it! For instance:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# does not work, haven&amp;#39;t loaded the package janitor
mtcars %&amp;gt;% tabyl(am, cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# does work
mtcars %&amp;gt;% janitor::tabyl(am, cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  am 4 6  8
##   0 3 4 12
##   1 8 3  2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# also works
library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;janitor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     chisq.test, fisher.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% tabyl(am, cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  am 4 6  8
##   0 3 4 12
##   1 8 3  2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;clearest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clearest Points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;skim&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;loading our excel to R studio&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Loading in the data and selecting the sheets that are most relevant to what we are looking to do was very clear and a nice foundation for future projects. I found that showing different ways of importing the data was helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’m glad, the import tool in Rstudio is very nice, just remember to save the code in your Rmd.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;functionality of ggplot&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;tidying the data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Found out what eval=TRUE and eval=FALSE mean!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Great and I’ll show that again for anyone who was confused! (“still a little bit confused about the &lt;code&gt;{r, EVAL}&lt;/code&gt; code”)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-messages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other messages&lt;/h1&gt;
&lt;p&gt;Some people had trouble getting the &lt;code&gt;fig.path=&lt;/code&gt; to work in the knitr options. I’m not sure what could be causing that but feel free to ask me during break.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yihui.org/knitr/options/&#34;&gt;Here’s a good reference&lt;/a&gt; for all the code chunk options, if you want to read about it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;link to the course website that is in the overview tab in SAKAI links to last years materials.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oops thank you great catch, fixed!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Speed is going great. I’m just worried as we progress through the course, it’ll be more difficult. Overall, really enjoying this class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I understand the concern, some things will get more difficult (I’m thinking &lt;code&gt;across()&lt;/code&gt; in class 4, writing functions, and &lt;code&gt;purrr&lt;/code&gt;), but we will also circle back to some things that might be familiar or maybe less complicated to start (stats models, making tables). Definitely keep asking questions and I will slow down as needed!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Part 3: ggplot2, factors, boxplots, dplyr: subsetting</title>
      <link>https://sph-r-programming-2023.netlify.app/class/03-class/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/03-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readings&#34; id=&#34;toc-readings&#34;&gt;Readings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-video&#34; id=&#34;toc-class-video&#34;&gt;Class Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#muddiest-points&#34; id=&#34;toc-muddiest-points&#34;&gt;Muddiest points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clearest-points&#34; id=&#34;toc-clearest-points&#34;&gt;Clearest Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-messages&#34; id=&#34;toc-other-messages&#34;&gt;Other messages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the &lt;code&gt;part3&lt;/code&gt; folder from &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this dropbox folder link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use the grey “download” button to download the &lt;em&gt;whole folder&lt;/em&gt;, please keep the file structure and folder organization exactly the same as we need this for class. Be sure to unzip if necessary. You may move the folder &lt;code&gt;part3&lt;/code&gt; wherever you like on your computer. Be sure to unzip if necessary.&lt;/p&gt;
&lt;p&gt;In advance of class, please open the &lt;code&gt;part3&lt;/code&gt; Rstudio project (double click on the &lt;code&gt;.rproj&lt;/code&gt; file), open &lt;code&gt;part3.Rmd&lt;/code&gt; and &lt;code&gt;knit&lt;/code&gt; (click the Knit button at the top of the file) this file. This will install packages that you need for the Rmd to run.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;readings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Readings&lt;/h2&gt;
&lt;p&gt;Required and suggested class readings can be found on the Readings tab by class. These readings may be done anytime before or after class, but they will supplement your understanding of the class materials and help make homework and project work easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class Video&lt;/h2&gt;
&lt;p&gt;The class video is here, but I forgot to video tape the part about &lt;code&gt;here::here()&lt;/code&gt;. If I have a chance I will re-record myself talking about it, but in the meantime, &lt;a href=&#34;https://youtu.be/7KZWcICwF54?t=1463&#34;&gt;click here for Ted’s video from last year, start at linked time and watch for about 6 minutes&lt;/a&gt;, which explains similar ideas.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gLTl_9AAMjo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/03-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Muddiest points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;themes in ggplot&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://ggplot2-book.org/polishing.html&#34;&gt;Check out this reference about ggplot themes first.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s a couple examples using this one plot, so you can see how the theme changes the look of the figure, when you use built in themes from the &lt;code&gt;ggplot2&lt;/code&gt; package (yes it only works in ggplot figures, for the person who asked about that)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(mtcars, aes(x = mpg, y = carb, color = factor(cyl))) +
  geom_point() +
  labs(title = &amp;quot;My scatterplot&amp;quot;)
p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here are some built in themes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However you can make more customized themes or plot changes where you use the &lt;code&gt;theme()&lt;/code&gt; function to add in a lot of other elements. You can use this add on function to choose specific parts of the plot that you want to change, like this example from the above reference. Anything specified here will override the built in theme selected first. There are many options, and looking at specific examples will help. I am always, always googling how to change parts of the theme/plot like this, because there are just so many options it’s too hard to remember them all.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme_classic() +
  theme(
    plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = 12),
    legend.background = element_rect(fill = &amp;quot;white&amp;quot;, size = 4, colour = &amp;quot;white&amp;quot;),
    legend.justification = c(0, 1),
    legend.position = c(0, 1),
    axis.ticks = element_line(colour = &amp;quot;grey70&amp;quot;, size = 0.2),
    panel.grid.major = element_line(colour = &amp;quot;grey70&amp;quot;, size = 0.2),
    panel.grid.minor = element_blank()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here’s a simpler example just changing the title (from the above reference):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme(plot.title = element_text(size = 16))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;, colour = &amp;quot;red&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-6-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + theme(plot.title = element_text(hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/03-class_files/figure-html/unnamed-chunk-6-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;here()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Agreed, it’s very confusing, more in class 4!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could you please clarify about the use of select(one_of) and the count command that was mentioned in dplyr cheatsheet?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are very different, if you are talking about &lt;code&gt;select()&lt;/code&gt; vs &lt;code&gt;count()&lt;/code&gt;. One thing to note is that since I recorded that class, &lt;code&gt;one_of()&lt;/code&gt; has been superseded/replaced by &lt;code&gt;any_of()&lt;/code&gt; and &lt;code&gt;all_of()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;select()&lt;/code&gt; is a function to subset columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(palmerpenguins)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we specify the columns we want in the order we want:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% select(bill_length_mm, island, species, year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 4
##    bill_length_mm island    species  year
##             &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
##  1           39.1 Torgersen Adelie   2007
##  2           39.5 Torgersen Adelie   2007
##  3           40.3 Torgersen Adelie   2007
##  4           NA   Torgersen Adelie   2007
##  5           36.7 Torgersen Adelie   2007
##  6           39.3 Torgersen Adelie   2007
##  7           38.9 Torgersen Adelie   2007
##  8           39.2 Torgersen Adelie   2007
##  9           34.1 Torgersen Adelie   2007
## 10           42   Torgersen Adelie   2007
## # … with 334 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we pass a vector of character names, both of which work:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% select(c(&amp;quot;bill_length_mm&amp;quot;,&amp;quot;island&amp;quot;,&amp;quot;species&amp;quot;,&amp;quot;year&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 4
##    bill_length_mm island    species  year
##             &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
##  1           39.1 Torgersen Adelie   2007
##  2           39.5 Torgersen Adelie   2007
##  3           40.3 Torgersen Adelie   2007
##  4           NA   Torgersen Adelie   2007
##  5           36.7 Torgersen Adelie   2007
##  6           39.3 Torgersen Adelie   2007
##  7           38.9 Torgersen Adelie   2007
##  8           39.2 Torgersen Adelie   2007
##  9           34.1 Torgersen Adelie   2007
## 10           42   Torgersen Adelie   2007
## # … with 334 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% select(any_of(c(&amp;quot;bill_length_mm&amp;quot;,&amp;quot;island&amp;quot;,&amp;quot;species&amp;quot;,&amp;quot;year&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 4
##    bill_length_mm island    species  year
##             &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
##  1           39.1 Torgersen Adelie   2007
##  2           39.5 Torgersen Adelie   2007
##  3           40.3 Torgersen Adelie   2007
##  4           NA   Torgersen Adelie   2007
##  5           36.7 Torgersen Adelie   2007
##  6           39.3 Torgersen Adelie   2007
##  7           38.9 Torgersen Adelie   2007
##  8           39.2 Torgersen Adelie   2007
##  9           34.1 Torgersen Adelie   2007
## 10           42   Torgersen Adelie   2007
## # … with 334 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might be useful if we have that character vector already saved from some other data work we are doing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames_needed &amp;lt;- c(&amp;quot;bill_length_mm&amp;quot;,&amp;quot;island&amp;quot;,&amp;quot;species&amp;quot;,&amp;quot;year&amp;quot;)
penguins %&amp;gt;% select(colnames_needed)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Note: Using an external vector in selections is ambiguous.
## ℹ Use `all_of(colnames_needed)` instead of `colnames_needed` to silence this message.
## ℹ See &amp;lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&amp;gt;.
## This message is displayed once per session.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 4
##    bill_length_mm island    species  year
##             &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
##  1           39.1 Torgersen Adelie   2007
##  2           39.5 Torgersen Adelie   2007
##  3           40.3 Torgersen Adelie   2007
##  4           NA   Torgersen Adelie   2007
##  5           36.7 Torgersen Adelie   2007
##  6           39.3 Torgersen Adelie   2007
##  7           38.9 Torgersen Adelie   2007
##  8           39.2 Torgersen Adelie   2007
##  9           34.1 Torgersen Adelie   2007
## 10           42   Torgersen Adelie   2007
## # … with 334 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the key about &lt;code&gt;any_of&lt;/code&gt; and &lt;code&gt;all_of&lt;/code&gt; is what it allows. &lt;code&gt;any_of()&lt;/code&gt; allows column names that don’t exist! Using no tidyselect helper or &lt;code&gt;all_of()&lt;/code&gt; does not allow this. Which you use depends on what you want to allow to happen.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames_needed &amp;lt;- c(&amp;quot;bill_length_mm&amp;quot;,&amp;quot;island&amp;quot;,&amp;quot;species&amp;quot;,&amp;quot;year&amp;quot;,&amp;quot;MISSING&amp;quot;)
# penguins %&amp;gt;% select((colnames_needed)) # does not work
penguins %&amp;gt;% select(any_of(colnames_needed)) # works!&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 4
##    bill_length_mm island    species  year
##             &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
##  1           39.1 Torgersen Adelie   2007
##  2           39.5 Torgersen Adelie   2007
##  3           40.3 Torgersen Adelie   2007
##  4           NA   Torgersen Adelie   2007
##  5           36.7 Torgersen Adelie   2007
##  6           39.3 Torgersen Adelie   2007
##  7           38.9 Torgersen Adelie   2007
##  8           39.2 Torgersen Adelie   2007
##  9           34.1 Torgersen Adelie   2007
## 10           42   Torgersen Adelie   2007
## # … with 334 more rows
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# penguins %&amp;gt;% select(all_of(colnames_needed)) # does not work&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;any_of()&lt;/code&gt; is an example of a tidyselect helper, which we will see a lot more of when we start using &lt;code&gt;across()&lt;/code&gt; with &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; in class 4. &lt;a href=&#34;https://tidyselect.r-lib.org/reference/language.html&#34;&gt;See this long list of useful tidyselect functions for more.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;count()&lt;/code&gt; is mainly to count the number of unique values in a column/vector:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% count(species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   species       n
##   &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt;
## 1 Adelie      152
## 2 Chinstrap    68
## 3 Gentoo      124&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This created a new tibble, that &lt;em&gt;summarizes&lt;/em&gt; the species column by counting the number of each type of species. This works for any type of vector but is most useful with character and factor columns. You can also use multiple columns here to see all possible combinations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins %&amp;gt;% count(species, year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 × 3
##   species    year     n
##   &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1 Adelie     2007    50
## 2 Adelie     2008    50
## 3 Adelie     2009    52
## 4 Chinstrap  2007    26
## 5 Chinstrap  2008    18
## 6 Chinstrap  2009    24
## 7 Gentoo     2007    34
## 8 Gentoo     2008    46
## 9 Gentoo     2009    44&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;clearest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clearest Points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;filter, select, arrange, pipes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Super! I want to take the time to mention (and hopefully not confuse everyone) that the pipe has recently (2021) been integrated into “base R”, that is, it’s loaded without loading the tidyverse package. HOWEVER it is this symbol &lt;code&gt;|&amp;gt;&lt;/code&gt; and does not behave &lt;em&gt;exactly&lt;/em&gt; like the tidyverse pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; (actually from the &lt;code&gt;magrittr&lt;/code&gt; package within the &lt;code&gt;tidyverse&lt;/code&gt; package). For all the usual uses it works the same, so it could be used interchangeably in this class. Just know that if you see that type of pipe being used, assume it’s doing basically the same thing. &lt;a href=&#34;https://r4ds.hadley.nz/workflow-pipes.html&#34;&gt;Even R for Data Science is likely moving to use the native/base pipe, see this explanation&lt;/a&gt;. Probably next year’s class I will switch everything over to use this, though I still just use &lt;code&gt;%&amp;gt;%&lt;/code&gt; in my own work as it’s slightly more flexible for more “advanced” usage.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins |&amp;gt; count(species, year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 × 3
##   species    year     n
##   &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1 Adelie     2007    50
## 2 Adelie     2008    50
## 3 Adelie     2009    52
## 4 Chinstrap  2007    26
## 5 Chinstrap  2008    18
## 6 Chinstrap  2009    24
## 7 Gentoo     2007    34
## 8 Gentoo     2008    46
## 9 Gentoo     2009    44&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-messages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other messages&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Density ridges are cool!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Part 4. dplyr: mutate, group_by, summarize, across</title>
      <link>https://sph-r-programming-2023.netlify.app/class/04-class/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/04-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this-years-class-video&#34; id=&#34;toc-this-years-class-video&#34;&gt;This year’s class video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-years-class-video&#34; id=&#34;toc-last-years-class-video&#34;&gt;Last Year’s Class Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slides&#34; id=&#34;toc-slides&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#another-useful-video&#34; id=&#34;toc-another-useful-video&#34;&gt;Another useful video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#muddiest-points&#34; id=&#34;toc-muddiest-points&#34;&gt;Muddiest points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clearest-points&#34; id=&#34;toc-clearest-points&#34;&gt;Clearest points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other-points&#34; id=&#34;toc-other-points&#34;&gt;Other points&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the &lt;code&gt;part4&lt;/code&gt; folder from &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this dropbox folder link&lt;/a&gt;. Be sure to unzip if necessary. “Knit” the part4.Rmd file to install packages and make sure everything is working with data loading.&lt;/p&gt;
&lt;p&gt;(We did not finish part4, and will finish it in class 5.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;this-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;This year’s class video&lt;/h2&gt;
&lt;p&gt;See Slack for the zoom recording link&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last Year’s Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GGBlm21dyBE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/04-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;During “Muddiest Parts” review, we will go over &lt;a href=&#34;https://sph-r-programming-2023.netlify.app/slides/05-saving-objects-vs-summaries&#34;&gt;these slides&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://sph-r-programming-2023.netlify.app/slides/05-saving-objects-vs-summaries#1&#34; width=&#34;672&#34; height=&#34;400px&#34; data-external=&#34;1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;another-useful-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Another useful video&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bBfZFasd61c&#34;&gt;Dr. Kelly Bodwin’s forcats/factor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Muddiest points&lt;/h1&gt;
&lt;p&gt;I’ve noticed some confusion about what I call “saving your work”, so we’ll go over &lt;a href=&#34;https://sph-r-programming-2023.netlify.app/slides/05-saving-objects-vs-summaries&#34;&gt;these slides&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;using factors, what you’re doing and the benefit of turning things into factors in mutate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I usually turn something into a factor for plotting (especially if I have a categorial numeric variable), and we’ll see more examples of that. We also later will see how it matters in statistical modeling/regression. It also is often easier to manage levels/categories this way, as we will see when we talk about the &lt;code&gt;forcats&lt;/code&gt; package again in class 6.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;case_when is not easy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Correct! Also some other comments on wanting more practice with &lt;code&gt;case_when()&lt;/code&gt;. We will continue to see examples with this as we finish part5 and in other classes. It’s a very handy function so I use it a lot! See also the &lt;a href=&#34;https://www.youtube.com/watch?v=bBfZFasd61c&#34;&gt;video above about factors with another explanation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The function for converting a vector back from factor to character - I thought I had it, but I didn’t.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, I didn’t show this!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make a character vector
myvec &amp;lt;- c(&amp;quot;medium&amp;quot;, &amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;, &amp;quot;low&amp;quot;)
myvec_fac &amp;lt;- factor(myvec)
myvec_fac&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] medium low    high   low   
## Levels: high low medium&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(myvec_fac)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get the levels out
levels(myvec_fac)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;high&amp;quot;   &amp;quot;low&amp;quot;    &amp;quot;medium&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Note we can &amp;quot;test&amp;quot; the classes of something like so:
is.factor(myvec_fac)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;is.character(myvec_fac)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now we can change it back
myvec2 &amp;lt;- as.character(myvec_fac)
myvec2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;medium&amp;quot; &amp;quot;low&amp;quot;    &amp;quot;high&amp;quot;   &amp;quot;low&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(myvec2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(myvec2) # no levels, because it&amp;#39;s not a factor&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# we could also change to numeric, how do you think it picks which number is which?
myvec3 &amp;lt;- as.numeric(myvec_fac)
myvec3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3 2 1 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# levels in order is assigned 1, 2, 3
table(myvec_fac, myvec3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          myvec3
## myvec_fac 1 2 3
##    high   1 0 0
##    low    0 2 0
##    medium 0 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# change the level order
myvec_fac2 &amp;lt;- factor(myvec, levels = c(&amp;quot;low&amp;quot;, &amp;quot;medium&amp;quot;, &amp;quot;high&amp;quot;))
levels(myvec_fac2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;low&amp;quot;    &amp;quot;medium&amp;quot; &amp;quot;high&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myvec4 &amp;lt;- as.numeric(myvec_fac2)
myvec4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 1 3 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(myvec_fac2, myvec4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           myvec4
## myvec_fac2 1 2 3
##     low    2 0 0
##     medium 0 1 0
##     high   0 0 1&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;factor vs as.factor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially the same. From the help documentation &lt;code&gt;?factor&lt;/code&gt;: “as.factor coerces its argument to a factor. It is an abbreviated (sometimes faster) form of factor.”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would like to know when you recommend that we save a new data set once we create new covariates. Also, it is unclear to me how you add the variable to the existing data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I want to use that column/covariate again, I save it (so almost always, as I don’t often make a column without using it later). I usually save it back into the original data set I’m working with, that is, overwrite that object to be updated with the new column. As long as I keep track of my changes this is definitely ok. It can get confusing having too many versions of a data set floating around. If something is broken, the worst that happens is that you’ll just need to start from the beginning and reload your data (the data file will remain untouched) and re-run the code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(palmerpenguins)

# does not save the new column, just prints result
penguins %&amp;gt;% 
  mutate(newvec = bill_length_mm/bill_depth_mm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 9
##    species island    bill_length_mm bill_de…¹ flipp…² body_…³ sex    year newvec
##    &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Adelie  Torgersen           39.1      18.7     181    3750 male   2007   2.09
##  2 Adelie  Torgersen           39.5      17.4     186    3800 fema…  2007   2.27
##  3 Adelie  Torgersen           40.3      18       195    3250 fema…  2007   2.24
##  4 Adelie  Torgersen           NA        NA        NA      NA &amp;lt;NA&amp;gt;   2007  NA   
##  5 Adelie  Torgersen           36.7      19.3     193    3450 fema…  2007   1.90
##  6 Adelie  Torgersen           39.3      20.6     190    3650 male   2007   1.91
##  7 Adelie  Torgersen           38.9      17.8     181    3625 fema…  2007   2.19
##  8 Adelie  Torgersen           39.2      19.6     195    4675 male   2007   2   
##  9 Adelie  Torgersen           34.1      18.1     193    3475 &amp;lt;NA&amp;gt;   2007   1.88
## 10 Adelie  Torgersen           42        20.2     190    4250 &amp;lt;NA&amp;gt;   2007   2.08
## # … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,
## #   ²​flipper_length_mm, ³​body_mass_g
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# saves new column in a data frame that is called penguins2
penguins2 &amp;lt;- penguins %&amp;gt;% 
  mutate(newvec = bill_length_mm/bill_depth_mm)
glimpse(penguins2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 9
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
## $ flipper_length_mm &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…
## $ newvec            &amp;lt;dbl&amp;gt; 2.090909, 2.270115, 2.238889, NA, 1.901554, 1.907767…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(penguins) # has not been changed&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 8
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
## $ flipper_length_mm &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# saves new column in a data frame in the original data frame penguins
# *overwrites penguins*
penguins &amp;lt;- penguins %&amp;gt;% 
  mutate(newvec = bill_length_mm/bill_depth_mm)
glimpse(penguins)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 9
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
## $ flipper_length_mm &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…
## $ newvec            &amp;lt;dbl&amp;gt; 2.090909, 2.270115, 2.238889, NA, 1.901554, 1.907767…&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;arrange vs filter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;arrange&lt;/code&gt; orders or sorts your data and does not remove or add anything, while &lt;code&gt;filter&lt;/code&gt; removes rows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clearest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clearest points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;working directory, here
reordering factors
mutate
tibble vs data frame
factors
filtering&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Glad to hear we’re making progress!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a list somewhere of all potential colors?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A couple answers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/&#34;&gt;this page for a list of “named” colors in R.&lt;/a&gt;, or the &lt;a href=&#34;http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/&#34;&gt;ggplot2 cookbook for a smaller list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We will talk more about palettes when we finish part4 but there are many, many. I suggest finding a package or two that has the palettes you like and working with those. See a bunch listed &lt;a href=&#34;https://github.com/EmilHvitfeldt/r-color-palettes&#34;&gt;here (scroll down in the readme).&lt;/a&gt;. My favorites are
&lt;a href=&#34;https://github.com/jrnold/ggthemes&#34;&gt;&lt;code&gt;ggthemes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/colorBlindness/vignettes/colorBlindness.html&#34;&gt;&lt;code&gt;colorBlindness&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m curious what the best practice is for stringing things together versus breaking them into pieces. For example, if I was trying to make a binary variable where all values were classified as larger or greater than the mean, I could use mean() inside several other functions like mutate(). Alternately I could calculate mean() [meanxx &amp;lt;- mean(xxx)] and save it as an object, and then use the other functions on that value. I’m curious because it seems like if you did too many functions at once and were getting errors, it would be hard to tell what was wrong. But if you did it in a more stepwise fashion, you could see (for example) that mean() wasn’t working because there were NAs in your dataset. More importantly, I think if you were getting an erroneous answer (not an error, but a wrong answer, like if you calculated the mean of a variable but your NA’s were marked with “-88” and so R considered these actual observations) you might not know if you joined too many functions together and didn’t “see” what was happening under the hood. I’m curious how to deal with that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I copied over this whole question because I think it is an excellent one, and well said (hope you don’t mind)! I think this is something that evolves as you become more experienced in coding and debugging, and as you find your own style of coding. I will talk some about debugging later, but what you are saying about breaking things up into pieces absolutely helps with that.&lt;/p&gt;
&lt;p&gt;The one thing to make sure of is that if you are saving intermediate steps, such as &lt;code&gt;meanxx &amp;lt;- mean(mydata$xx)&lt;/code&gt; and using it later, but then you update the data set (filter, replace NAs, fix an incorrect data entry, whatever), you need to make sure to update/re-calculate that mean object as it no longer matches your newer data set! So there is more to keep track of, in that case.&lt;/p&gt;
&lt;p&gt;I will say that if you are keeping track of all the steps well, then functionally it does not matter too much, so if it makes things easier to break it up, do that! If you like to chain everything together (often I do) you can run each piece by highlighting the code and running just that part to see what is going on, and this is something I do often.&lt;/p&gt;
&lt;p&gt;Your example is something I would probably do, though, as using the mean inside mutate does make me a bit nervous. For example, let’s use median because it’s easier to check my work at the end:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(janitor) # for tabyl()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;janitor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     chisq.test, fisher.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# there are NAs in here:
median(penguins$body_mass_g)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# let&amp;#39;s save the median as a vector of length 1, remove NAs
tmpmedian &amp;lt;- median(penguins$body_mass_g, na.rm = TRUE)
tmpmedian&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4050&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;penguins &amp;lt;- penguins %&amp;gt;%
  mutate(
    large_mass = case_when(
      body_mass_g &amp;gt;= tmpmedian ~ &amp;quot;yes&amp;quot;,
      body_mass_g &amp;lt; tmpmedian ~ &amp;quot;no&amp;quot; # this allows NAs to remain NA
    ))

penguins %&amp;gt;% tabyl(large_mass)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  large_mass   n     percent valid_percent
##          no 170 0.494186047      0.497076
##         yes 172 0.500000000      0.502924
##        &amp;lt;NA&amp;gt;   2 0.005813953            NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# if I had just used median without checking for NAs, they all are NA:
penguins %&amp;gt;%
  mutate(large_mass = 1*(body_mass_g &amp;gt;= median(body_mass_g))) %&amp;gt;%
  tabyl(large_mass)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  large_mass   n percent valid_percent
##          NA 344       1            NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Note if I just want females, this no longer makes sense:
penguins %&amp;gt;%
  filter(sex==&amp;quot;female&amp;quot;) %&amp;gt;%
  mutate(
    large_mass = case_when(
      body_mass_g &amp;gt;= tmpmedian ~ &amp;quot;yes&amp;quot;,
      body_mass_g &amp;lt; tmpmedian ~ &amp;quot;no&amp;quot; # this allows NAs to remain NA
    )) %&amp;gt;%
  tabyl(large_mass)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  large_mass   n   percent
##          no 107 0.6484848
##         yes  58 0.3515152&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# but this would:
penguins %&amp;gt;%
  filter(sex==&amp;quot;female&amp;quot;) %&amp;gt;%
  mutate(
    large_mass = case_when(
      body_mass_g &amp;gt;= median(body_mass_g, na.rm = TRUE) ~ &amp;quot;yes&amp;quot;,
      body_mass_g &amp;lt; median(body_mass_g, na.rm = TRUE) ~ &amp;quot;no&amp;quot; 
    )) %&amp;gt;%
  tabyl(large_mass)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  large_mass  n   percent
##          no 80 0.4848485
##         yes 85 0.5151515&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>(Class 5) Part 4 (contd) &#43; Part 5: Data summarizing</title>
      <link>https://sph-r-programming-2023.netlify.app/class/05-class/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/05-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this-years-class-video&#34; id=&#34;toc-this-years-class-video&#34;&gt;This year’s class video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-years-class-video-part-5&#34; id=&#34;toc-last-years-class-video-part-5&#34;&gt;Last Year’s Class Video (Part 5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#another-useful-video&#34; id=&#34;toc-another-useful-video&#34;&gt;Another useful video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#useful-ggplot2-links&#34; id=&#34;toc-useful-ggplot2-links&#34;&gt;Useful ggplot2 links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#muddiest-points&#34; id=&#34;toc-muddiest-points&#34;&gt;Muddiest points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clearest-points&#34; id=&#34;toc-clearest-points&#34;&gt;Clearest points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34; id=&#34;toc-other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the &lt;code&gt;part5&lt;/code&gt; folder from &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this dropbox folder link&lt;/a&gt;. Be sure to unzip if necessary. “Knit” the &lt;code&gt;code/part5.Rmd&lt;/code&gt; file to install packages and make sure everything is working with data loading.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;this-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;This year’s class video&lt;/h2&gt;
&lt;p&gt;See Slack for the zoom recording link (though zoom had some malfunction that failed to show the correct Rstudio screen, so last year’s video may be more helpful)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-years-class-video-part-5&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last Year’s Class Video (Part 5)&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_V7cKw39Fzc&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/05-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;another-useful-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Another useful video&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/4ZIFb1BoIB4&#34;&gt;Dr. Kelly Bodwin’s Reshaping Data Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For a short version, watch the &lt;a href=&#34;https://youtu.be/4ZIFb1BoIB4?t=365&#34;&gt;pivot_longer excerpt&lt;/a&gt; about “working backwards” from a plot. Then watch the &lt;a href=&#34;https://youtu.be/4ZIFb1BoIB4?t=620&#34;&gt;pivot_wider excerpt&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-ggplot2-links&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Useful ggplot2 links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ggplot2-book.org/scale-position.html&#34;&gt;ggplot2 cookbook, scales&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org/reference/guide_axis.html&#34;&gt;ggplot2 guide_axis()&lt;/a&gt;, which lets you &lt;a href=&#34;https://datavizpyr.com/how-to-dodge-overlapping-text-on-x-axis-labels-in-ggplot2/&#34;&gt;avoid overlapping axis labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org/articles/faq-axes.html&#34;&gt;ggplot2 faq axes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Muddiest points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I wasn’t super unclear about it, but just want to be more comfortable using summarize() and across and group_by functions. It looks like these will be really useful for future data projects, so that’s exciting!
across function was a bit hazy because screen kept freezing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorry the zoom malfunctioned during this rather important and confusing section!&lt;/p&gt;
&lt;p&gt;We will have more practice with &lt;code&gt;across&lt;/code&gt; in other sections but the main points I want to get across (ha) are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group_by()&lt;/code&gt; is used to “group the data” (a.k.a “split”) by a categorical variable, and then all kinds of computations can be done within groups including &lt;code&gt;summarize()&lt;/code&gt; but also &lt;code&gt;slice()&lt;/code&gt; (such as &lt;code&gt;slice_sample()&lt;/code&gt;) and later we will see this with &lt;code&gt;nest()&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize()&lt;/code&gt; can be used with or without &lt;code&gt;group_by()&lt;/code&gt; to collapse a big data set into a summarized table/data frame/tibble. This is still data, it’s just summarized data. Be careful when you are saving it, don’t overwrite your original data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;across()&lt;/code&gt; can be used inside &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; to “select” the columns we want to transform/mutate or summarize&lt;/li&gt;
&lt;li&gt;&lt;code&gt;across()&lt;/code&gt; uses what we call “tidyselect” syntax. For explanation and examples you can type &lt;code&gt;?dplyr_tidy_select&lt;/code&gt; or go to this &lt;a href=&#34;https://tidyselect.r-lib.org/reference/language.html&#34;&gt;website.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;the syntax of .x ~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We use this when we are creating our own function inside of mutate. Think of algebra, where if we want to add something we might say:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y = x + 3
y = x/10
y = log(x)
y = exp(x)^3 - x/10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the same idea, except it’s just written with the special syntax/variable name that R knows how to interpret, where we use &lt;code&gt;.x&lt;/code&gt; instead of &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y = .x + 3
y = .x/10
y = log(.x)
y = exp(.x)^3 - .x/10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we also need to use &lt;code&gt;~&lt;/code&gt; to tell R, here’s a function! and we use the argument name and equal sign &lt;code&gt;.fns =&lt;/code&gt; to say, here we are inputting the custom function as the argument input. If you look at the help &lt;code&gt;?across&lt;/code&gt; we see this is called “A purrr-style lambda” because we use it in the &lt;code&gt;purrr&lt;/code&gt; package functions as well (we will see this later):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# think of this as input to the argument of across()
# typical argument syntax arg = _____
.fns = ~ .x+3
.fns = ~ .x/10
.fns = ~ log(.x)
.fns = ~ exp(.x)^3 - .x/10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this needs to go inside the nested functions &lt;code&gt;mutate(across())&lt;/code&gt; as an argument: &lt;code&gt;mutate(across(.cols = ----, .fns = ----))&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(palmerpenguins)

penguins %&amp;gt;% mutate(
  across(.cols = c(bill_length_mm, body_mass_g),
         .fns = ~ exp(.x)^3 - .x/10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 344 × 8
##    species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
##    &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
##  1 Adelie  Torgersen        8.76e50          18.7        181     Inf male   2007
##  2 Adelie  Torgersen        2.91e51          17.4        186     Inf fema…  2007
##  3 Adelie  Torgersen        3.21e52          18          195     Inf fema…  2007
##  4 Adelie  Torgersen       NA                NA           NA      NA &amp;lt;NA&amp;gt;   2007
##  5 Adelie  Torgersen        6.54e47          19.3        193     Inf fema…  2007
##  6 Adelie  Torgersen        1.60e51          20.6        190     Inf male   2007
##  7 Adelie  Torgersen        4.81e50          17.8        181     Inf fema…  2007
##  8 Adelie  Torgersen        1.18e51          19.6        195     Inf male   2007
##  9 Adelie  Torgersen        2.68e44          18.1        193     Inf &amp;lt;NA&amp;gt;   2007
## 10 Adelie  Torgersen        5.26e54          20.2        190     Inf &amp;lt;NA&amp;gt;   2007
## # … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
## #   ²​body_mass_g
## # ℹ Use `print(n = ...)` to see more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also apply multiple functions by putting them inside a &lt;code&gt;list()&lt;/code&gt; and we can give them names:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# here we have 3 functions
penguins %&amp;gt;% mutate(
  across(.cols = c(bill_length_mm, body_mass_g),
         .fns = list(
           ~ .x/3,
           log, # just using the named function, don&amp;#39;t need .x
           ~ exp(.x)^3 - .x/10))) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 14
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
## $ flipper_length_mm &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…
## $ bill_length_mm_1  &amp;lt;dbl&amp;gt; 13.03333, 13.16667, 13.43333, NA, 12.23333, 13.10000…
## $ bill_length_mm_2  &amp;lt;dbl&amp;gt; 3.666122, 3.676301, 3.696351, NA, 3.602777, 3.671225…
## $ bill_length_mm_3  &amp;lt;dbl&amp;gt; 8.764814e+50, 2.910021e+51, 3.207767e+52, NA, 6.5436…
## $ body_mass_g_1     &amp;lt;dbl&amp;gt; 1250.000, 1266.667, 1083.333, NA, 1150.000, 1216.667…
## $ body_mass_g_2     &amp;lt;dbl&amp;gt; 8.229511, 8.242756, 8.086410, NA, 8.146130, 8.202482…
## $ body_mass_g_3     &amp;lt;dbl&amp;gt; Inf, Inf, Inf, NA, Inf, Inf, Inf, Inf, Inf, Inf, Inf…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# here we have the same 3 functions but with names
penguins %&amp;gt;% mutate(
  across(.cols = c(bill_length_mm, body_mass_g),
         .fns = list(
           fn1 = ~ .x/3,
           log = log,
           fn2 = ~ exp(.x)^3 - .x/10))) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 14
## $ species            &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Ade…
## $ island             &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgers…
## $ bill_length_mm     &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1,…
## $ bill_depth_mm      &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1,…
## $ flipper_length_mm  &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 18…
## $ body_mass_g        &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475,…
## $ sex                &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, mal…
## $ year               &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 200…
## $ bill_length_mm_fn1 &amp;lt;dbl&amp;gt; 13.03333, 13.16667, 13.43333, NA, 12.23333, 13.1000…
## $ bill_length_mm_log &amp;lt;dbl&amp;gt; 3.666122, 3.676301, 3.696351, NA, 3.602777, 3.67122…
## $ bill_length_mm_fn2 &amp;lt;dbl&amp;gt; 8.764814e+50, 2.910021e+51, 3.207767e+52, NA, 6.543…
## $ body_mass_g_fn1    &amp;lt;dbl&amp;gt; 1250.000, 1266.667, 1083.333, NA, 1150.000, 1216.66…
## $ body_mass_g_log    &amp;lt;dbl&amp;gt; 8.229511, 8.242756, 8.086410, NA, 8.146130, 8.20248…
## $ body_mass_g_fn2    &amp;lt;dbl&amp;gt; Inf, Inf, Inf, NA, Inf, Inf, Inf, Inf, Inf, Inf, In…&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;how do we change the names when using across() inside mutate()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I skipped this for the sake of time and to avoid confusion last class and showed you how to do this using &lt;code&gt;rename()&lt;/code&gt; instead, but let’s go over it now a little bit.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.names&lt;/code&gt; argument inside &lt;code&gt;across()&lt;/code&gt; uses a function called &lt;code&gt;glue()&lt;/code&gt; inside the package &lt;code&gt;glue&lt;/code&gt;. We haven’t covered &lt;code&gt;glue&lt;/code&gt; package syntax yet (it’s in part9) but think of it as a string concatenating (“gluing”) method where we write out what we want to be in the text string inside quotes, but use variable names and code functions inside of the quotes in a special way. The important part to know right now is that the stuff inside &lt;code&gt;{}&lt;/code&gt; is code, and everything else is just text. Here when we use &lt;code&gt;.col&lt;/code&gt; inside the glue code that is the stand-in for the column name, so &lt;code&gt;&#34;{.col}&#34;&lt;/code&gt; is literally just the column name, and &lt;code&gt;&#34;{.col}_fun&#34;&lt;/code&gt; is the column name with “_fun” appended to it.&lt;/p&gt;
&lt;p&gt;Here are some simple glue examples:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(glue)
glue(&amp;quot;hello&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## hello&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myname &amp;lt;- &amp;quot;jessica&amp;quot;

glue(&amp;quot;hello {myname}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## hello jessica&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glue(&amp;quot;hello {myname}, how are you?&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## hello jessica, how are you?&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;firstname &amp;lt;- &amp;quot;jane&amp;quot;
lastname &amp;lt;- &amp;quot;doe&amp;quot;
glue(&amp;quot;{firstname}_{lastname}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## jane_doe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look at &lt;code&gt;?across&lt;/code&gt; and the &lt;code&gt;.names&lt;/code&gt; argument for some info and the defaults.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Does not change names of transformed columns
# no longer accruate since not mm
penguins %&amp;gt;%
  mutate(
    across(.cols = ends_with(&amp;quot;mm&amp;quot;), .fns = ~ .x/10)) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 8
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 3.91, 3.95, 4.03, NA, 3.67, 3.93, 3.89, 3.92, 3.41, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 1.87, 1.74, 1.80, NA, 1.93, 2.06, 1.78, 1.96, 1.81, …
## $ flipper_length_mm &amp;lt;dbl&amp;gt; 18.1, 18.6, 19.5, NA, 19.3, 19.0, 18.1, 19.5, 19.3, …
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# adds cm to end of column names, but still has mm, confusing
penguins %&amp;gt;%
  mutate(
    across(.cols = ends_with(&amp;quot;mm&amp;quot;),
           .fns = ~ .x/10,
           .names = &amp;quot;{.col}_cm&amp;quot;)) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 11
## $ species              &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, A…
## $ island               &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torge…
## $ bill_length_mm       &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.…
## $ bill_depth_mm        &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.…
## $ flipper_length_mm    &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, …
## $ body_mass_g          &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 347…
## $ sex                  &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, m…
## $ year                 &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2…
## $ bill_length_mm_cm    &amp;lt;dbl&amp;gt; 3.91, 3.95, 4.03, NA, 3.67, 3.93, 3.89, 3.92, 3.4…
## $ bill_depth_mm_cm     &amp;lt;dbl&amp;gt; 1.87, 1.74, 1.80, NA, 1.93, 2.06, 1.78, 1.96, 1.8…
## $ flipper_length_mm_cm &amp;lt;dbl&amp;gt; 18.1, 18.6, 19.5, NA, 19.3, 19.0, 18.1, 19.5, 19.…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# code inside the {} is evaluated, 
# so we can use stringr::str_remove() to remove what we don&amp;#39;t want there
# str_remove_all() also works
# note now we have kept the original columns as well
# note we need single quotes for the glue code because we are wrapping it in
# double quotes already
penguins %&amp;gt;%
  mutate(
    across(.cols = ends_with(&amp;quot;mm&amp;quot;),
           .fns = ~ .x/10,
           .names = &amp;quot;{str_remove(.col,&amp;#39;_mm&amp;#39;)}_cm&amp;quot;)) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 11
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
## $ flipper_length_mm &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…
## $ bill_length_cm    &amp;lt;dbl&amp;gt; 3.91, 3.95, 4.03, NA, 3.67, 3.93, 3.89, 3.92, 3.41, …
## $ bill_depth_cm     &amp;lt;dbl&amp;gt; 1.87, 1.74, 1.80, NA, 1.93, 2.06, 1.78, 1.96, 1.81, …
## $ flipper_length_cm &amp;lt;dbl&amp;gt; 18.1, 18.6, 19.5, NA, 19.3, 19.0, 18.1, 19.5, 19.3, …&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# alternative that works here is using str_replace()
penguins %&amp;gt;%
  mutate(
    across(.cols = ends_with(&amp;quot;mm&amp;quot;),
           .fns = ~ .x/10,
           .names = &amp;quot;{str_replace(.col,&amp;#39;_mm&amp;#39;, &amp;#39;_cm&amp;#39;)}&amp;quot;)) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 344
## Columns: 11
## $ species           &amp;lt;fct&amp;gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
## $ island            &amp;lt;fct&amp;gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
## $ bill_length_mm    &amp;lt;dbl&amp;gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
## $ bill_depth_mm     &amp;lt;dbl&amp;gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
## $ flipper_length_mm &amp;lt;int&amp;gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
## $ body_mass_g       &amp;lt;int&amp;gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
## $ sex               &amp;lt;fct&amp;gt; male, female, female, NA, female, male, female, male…
## $ year              &amp;lt;int&amp;gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…
## $ bill_length_cm    &amp;lt;dbl&amp;gt; 3.91, 3.95, 4.03, NA, 3.67, 3.93, 3.89, 3.92, 3.41, …
## $ bill_depth_cm     &amp;lt;dbl&amp;gt; 1.87, 1.74, 1.80, NA, 1.93, 2.06, 1.78, 1.96, 1.81, …
## $ flipper_length_cm &amp;lt;dbl&amp;gt; 18.1, 18.6, 19.5, NA, 19.3, 19.0, 18.1, 19.5, 19.3, …&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s unclear to me if there is distinction between using ‘str_remove_all’ and ‘separate()’ when we talked about removing “years old” from the column “age”. Are there particular circumstances where one is preferred over the other?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In R and in programming in general, there are always multiple ways to do the same thing. Often many, many ways! There is no preferred way just which makes the most sense to you/which you are most comfortable with.&lt;/p&gt;
&lt;p&gt;For me, I like to use the &lt;code&gt;stringr&lt;/code&gt; functions to remove stuff from columns that I don’t want, because it is the most “clear” to me and also probably to anyone reading my code.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;separate()&lt;/code&gt; way is more of a clever trick, an “out of the box” way to use an existing function that works for our needs in this case. There are a lot of things like that, and it’s perfectly ok to use them if you understand what they are doing and why.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;arrange with two variables&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s a simple example so we can see how &lt;code&gt;arrange()&lt;/code&gt; works with two categories (this is analogous to sorting by two variables in excel)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mydata &amp;lt;- tibble(
  id = 1:4,
  animal = c(&amp;quot;cat&amp;quot;,&amp;quot;mouse&amp;quot;,&amp;quot;dog&amp;quot;,&amp;quot;cat&amp;quot;),
  weight = c(10, 1, 20, 8),
  age = c(15, 3, 3, 20))

mydata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 4
##      id animal weight   age
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1 cat        10    15
## 2     2 mouse       1     3
## 3     3 dog        20     3
## 4     4 cat         8    20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mydata %&amp;gt;% arrange(weight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 4
##      id animal weight   age
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     2 mouse       1     3
## 2     4 cat         8    20
## 3     1 cat        10    15
## 4     3 dog        20     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mydata %&amp;gt;% arrange(animal)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 4
##      id animal weight   age
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1 cat        10    15
## 2     4 cat         8    20
## 3     3 dog        20     3
## 4     2 mouse       1     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# arrange by animal first, then weight within animal categories
mydata %&amp;gt;% arrange(animal, weight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 4
##      id animal weight   age
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4 cat         8    20
## 2     1 cat        10    15
## 3     3 dog        20     3
## 4     2 mouse       1     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# does not do anything in this case, but would arrange by age if there were ties in the weight column within the animal category
mydata %&amp;gt;% arrange(animal, weight, age)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 × 4
##      id animal weight   age
##   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4 cat         8    20
## 2     1 cat        10    15
## 3     3 dog        20     3
## 4     2 mouse       1     3&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;stringr::str_to_title()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just a clarification:&lt;/p&gt;
&lt;p&gt;Remember to read help documentation and look at examples if still not clear!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_to_title(&amp;quot;hello&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_to_title(&amp;quot;hello my name is jessica&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello My Name Is Jessica&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_to_title(&amp;quot;HELLO MY name is jessica&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello My Name Is Jessica&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other similar “case conversion” functions as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_to_upper(&amp;quot;HELLO MY name is jessica&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;HELLO MY NAME IS JESSICA&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_to_lower(&amp;quot;HELLO MY name is jessica&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;hello my name is jessica&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_to_sentence(&amp;quot;HELLO MY name is jessica&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello my name is jessica&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;stringing together multiple commands in a pipe, which comes first and which functions are safe to put inside other functions- and if so- how do you know what order to put them in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You’ll want to put them in the order that you want the operations to be performed.&lt;/p&gt;
&lt;p&gt;For instance, if you want to summarize a data set after filtering, then put &lt;code&gt;filter()&lt;/code&gt; first then &lt;code&gt;summarize()&lt;/code&gt;. When in doubt, don’t string them together just do them one at a time!&lt;/p&gt;
&lt;p&gt;Regarding &lt;code&gt;which functions are safe to put inside other functions&lt;/code&gt; I am not sure exactly what you mean, but perhaps it’s the &lt;code&gt;summarize(across())&lt;/code&gt; type situation that is causing confusion. In this case, the result of &lt;code&gt;across()&lt;/code&gt; becomes an argument input for &lt;code&gt;summarize()&lt;/code&gt;. We also use functions as arguments inside &lt;code&gt;across()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This part will require just more experience seeing what functions go where and getting used to all the syntax. I’ll try to point out specific examples where it makes sense to put functions inside other functions, but in general the tidyverse “verbs” such as &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;summarize()&lt;/code&gt;, &lt;code&gt;separate()&lt;/code&gt;, &lt;code&gt;rename()&lt;/code&gt; are done in some kind of order that makes sense for how you want to transform your data, and they are chained together by pipes or done one at a time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# mutate first
penguins &amp;lt;- penguins %&amp;gt;% mutate(bill_length_cm = bill_length_mm/10)

# create a filtered data sest of just female penguins
penguins_f &amp;lt;- penguins %&amp;gt;% filter(sex==&amp;quot;female&amp;quot;)

# we could have mutated *after* filtering in this case, it doesn&amp;#39;t matter if we only care about the female penguins

# summarize that female penguin data set, don&amp;#39;t save as anything
# just print it out
penguins_f %&amp;gt;% summarize(across( # across goes inside summarize
  .cols = where(is.numeric), # where() is a function inside across()
  .fns = mean, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 6
##   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year bill_length…¹
##            &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
## 1           42.1          16.4              197.       3862. 2008.          4.21
## # … with abbreviated variable name ¹​bill_length_cm&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Importing files from other statistical programs, such as SAS and Stata
joining tables
joining two tables seems scary!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will cover these in class 6! We haven’t talked about joining yet, just “stacking” tables with &lt;code&gt;bind_rows()&lt;/code&gt;. Hopefully talking about join will make the difference more clear.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;zoom issues, try restarting R?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good idea I’ll try that next time! Hope there isn’t a next time…&lt;/p&gt;
&lt;p&gt;Whoever had the brilliant idea of “raising hand” during zoom class, definitely do that if you want to get my attention because I can see that but not the chat while teaching, and sometimes the audio in the room forces my computer to go on mute even when I unmute it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clearest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Clearest points&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;palettes
mutate()
case_when()
here
group_by() and summarize
ggplots&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Great, we are getting there!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The section on color palettes was clearest. It is nice to be given so many options and resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh good, I was worried that I spent too much time on this, so glad you find it helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;When we encounter many categories (eg. 100+) in a variable, how do we plot the top 5% or 10% of the data using ggplot?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm this is a pretty open ended question and could mean a lot of different things, but initial thought is you mean something like: “we have a lot of categories, we want to only plot a summary (i.e. boxplot) of the 5% most common categories.” It’s a very specific kind of question but I’ll show it in class as an excuse to show more &lt;code&gt;forcats&lt;/code&gt; functions with factors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gapminder)
library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;janitor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     chisq.test, fisher.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(500) # set my random seed so the sampling is always the same

# create a data that has uneven number of obs for each country
mydata &amp;lt;- gapminder %&amp;gt;% slice_sample(prop=.2) 

# we can see some countries have more observations than others
mydata %&amp;gt;%
  tabyl(country) %&amp;gt;%
  arrange(desc(n))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   country n     percent
##              Burkina Faso 6 0.017647059
##                   Senegal 6 0.017647059
##             Guinea-Bissau 5 0.014705882
##                      Mali 5 0.014705882
##                 Nicaragua 5 0.014705882
##     Sao Tome and Principe 5 0.014705882
##              Saudi Arabia 5 0.014705882
##                    Serbia 5 0.014705882
##               Switzerland 5 0.014705882
##                   Bolivia 4 0.011764706
##                  Botswana 4 0.011764706
##                  Cambodia 4 0.011764706
##               Congo, Rep. 4 0.011764706
##                   Ecuador 4 0.011764706
##         Equatorial Guinea 4 0.011764706
##                    France 4 0.011764706
##                      Iraq 4 0.011764706
##               Korea, Rep. 4 0.011764706
##                  Mongolia 4 0.011764706
##                Montenegro 4 0.011764706
##                   Namibia 4 0.011764706
##                  Pakistan 4 0.011764706
##                  Slovenia 4 0.011764706
##              South Africa 4 0.011764706
##                    Taiwan 4 0.011764706
##       Trinidad and Tobago 4 0.011764706
##                   Tunisia 4 0.011764706
##                    Turkey 4 0.011764706
##        West Bank and Gaza 4 0.011764706
##                Bangladesh 3 0.008823529
##  Central African Republic 3 0.008823529
##                   Comoros 3 0.008823529
##             Cote d&amp;#39;Ivoire 3 0.008823529
##            Czech Republic 3 0.008823529
##        Dominican Republic 3 0.008823529
##               El Salvador 3 0.008823529
##                  Ethiopia 3 0.008823529
##                   Germany 3 0.008823529
##                   Iceland 3 0.008823529
##                     India 3 0.008823529
##                 Indonesia 3 0.008823529
##                     Italy 3 0.008823529
##                     Japan 3 0.008823529
##                     Kenya 3 0.008823529
##                    Kuwait 3 0.008823529
##                   Lebanon 3 0.008823529
##                   Lesotho 3 0.008823529
##                Madagascar 3 0.008823529
##                    Malawi 3 0.008823529
##                Mauritania 3 0.008823529
##                Mozambique 3 0.008823529
##                   Myanmar 3 0.008823529
##                     Nepal 3 0.008823529
##                     Niger 3 0.008823529
##                      Oman 3 0.008823529
##                  Paraguay 3 0.008823529
##                    Rwanda 3 0.008823529
##              Sierra Leone 3 0.008823529
##                   Somalia 3 0.008823529
##                 Sri Lanka 3 0.008823529
##                  Thailand 3 0.008823529
##                      Togo 3 0.008823529
##                    Uganda 3 0.008823529
##                   Vietnam 3 0.008823529
##                  Zimbabwe 3 0.008823529
##                    Angola 2 0.005882353
##                 Argentina 2 0.005882353
##                   Austria 2 0.005882353
##                   Bahrain 2 0.005882353
##                  Bulgaria 2 0.005882353
##                   Burundi 2 0.005882353
##                  Cameroon 2 0.005882353
##                     Chile 2 0.005882353
##                     China 2 0.005882353
##                  Colombia 2 0.005882353
##          Congo, Dem. Rep. 2 0.005882353
##                   Denmark 2 0.005882353
##                  Djibouti 2 0.005882353
##                     Egypt 2 0.005882353
##                   Finland 2 0.005882353
##                     Ghana 2 0.005882353
##                    Guinea 2 0.005882353
##                     Haiti 2 0.005882353
##                   Hungary 2 0.005882353
##                   Jamaica 2 0.005882353
##                    Jordan 2 0.005882353
##          Korea, Dem. Rep. 2 0.005882353
##                   Liberia 2 0.005882353
##                     Libya 2 0.005882353
##                    Mexico 2 0.005882353
##                    Norway 2 0.005882353
##                      Peru 2 0.005882353
##               Philippines 2 0.005882353
##               Puerto Rico 2 0.005882353
##                   Reunion 2 0.005882353
##                 Singapore 2 0.005882353
##           Slovak Republic 2 0.005882353
##                     Spain 2 0.005882353
##                     Sudan 2 0.005882353
##                    Sweden 2 0.005882353
##                     Syria 2 0.005882353
##                  Tanzania 2 0.005882353
##                   Uruguay 2 0.005882353
##                 Venezuela 2 0.005882353
##               Afghanistan 1 0.002941176
##                   Belgium 1 0.002941176
##                     Benin 1 0.002941176
##    Bosnia and Herzegovina 1 0.002941176
##                    Canada 1 0.002941176
##                      Chad 1 0.002941176
##                Costa Rica 1 0.002941176
##                   Croatia 1 0.002941176
##                      Cuba 1 0.002941176
##                     Gabon 1 0.002941176
##                    Gambia 1 0.002941176
##                    Greece 1 0.002941176
##                 Guatemala 1 0.002941176
##                  Honduras 1 0.002941176
##                      Iran 1 0.002941176
##                   Ireland 1 0.002941176
##                    Israel 1 0.002941176
##                 Mauritius 1 0.002941176
##                   Morocco 1 0.002941176
##               Netherlands 1 0.002941176
##               New Zealand 1 0.002941176
##                    Poland 1 0.002941176
##                  Portugal 1 0.002941176
##                   Romania 1 0.002941176
##                 Swaziland 1 0.002941176
##            United Kingdom 1 0.002941176
##               Yemen, Rep. 1 0.002941176
##                   Albania 0 0.000000000
##                   Algeria 0 0.000000000
##                 Australia 0 0.000000000
##                    Brazil 0 0.000000000
##                   Eritrea 0 0.000000000
##          Hong Kong, China 0 0.000000000
##                  Malaysia 0 0.000000000
##                   Nigeria 0 0.000000000
##                    Panama 0 0.000000000
##             United States 0 0.000000000
##                    Zambia 0 0.000000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# note country is a factor
glimpse(mydata)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 340
## Columns: 6
## $ country   &amp;lt;fct&amp;gt; &amp;quot;Slovenia&amp;quot;, &amp;quot;Denmark&amp;quot;, &amp;quot;Djibouti&amp;quot;, &amp;quot;Paraguay&amp;quot;, &amp;quot;Japan&amp;quot;, &amp;quot;Pue…
## $ continent &amp;lt;fct&amp;gt; Europe, Europe, Africa, Americas, Asia, Americas, Asia, Euro…
## $ year      &amp;lt;int&amp;gt; 1962, 1962, 2002, 1972, 1982, 2007, 1962, 1977, 1977, 1977, …
## $ lifeExp   &amp;lt;dbl&amp;gt; 69.150, 72.350, 53.373, 65.815, 77.110, 78.746, 39.393, 59.5…
## $ pop       &amp;lt;int&amp;gt; 1582962, 4646899, 447416, 2614104, 118454974, 3942491, 10332…
## $ gdpPercap &amp;lt;dbl&amp;gt; 7402.3034, 13583.3135, 1908.2609, 2523.3380, 19384.1057, 193…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If we only want the categories with at least 5 levels, for example, we could lump everything else into an &amp;quot;other&amp;quot; category:

mydata &amp;lt;- mydata %&amp;gt;% mutate(country_lump = fct_lump_min(country, min=5))
mydata %&amp;gt;% tabyl(country_lump)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           country_lump   n    percent
##           Burkina Faso   6 0.01764706
##          Guinea-Bissau   5 0.01470588
##                   Mali   5 0.01470588
##              Nicaragua   5 0.01470588
##  Sao Tome and Principe   5 0.01470588
##           Saudi Arabia   5 0.01470588
##                Senegal   6 0.01764706
##                 Serbia   5 0.01470588
##            Switzerland   5 0.01470588
##                  Other 293 0.86176471&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot all countries
ggplot(mydata, aes(x=country, y=lifeExp, color = year)) +
  geom_point() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/05-class_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot just the most common ones
ggplot(mydata, aes(x=country_lump, y=lifeExp, color = year)) +
  geom_point() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/05-class_files/figure-html/unnamed-chunk-11-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# remove the other category
ggplot(mydata %&amp;gt;% filter(country_lump!=&amp;quot;Other&amp;quot;), 
       aes(x=country_lump, y=lifeExp, color = year)) +
  geom_point() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/05-class_files/figure-html/unnamed-chunk-11-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot in order of number of observations
levels(mydata$country_lump)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Burkina Faso&amp;quot;          &amp;quot;Guinea-Bissau&amp;quot;         &amp;quot;Mali&amp;quot;                 
##  [4] &amp;quot;Nicaragua&amp;quot;             &amp;quot;Sao Tome and Principe&amp;quot; &amp;quot;Saudi Arabia&amp;quot;         
##  [7] &amp;quot;Senegal&amp;quot;               &amp;quot;Serbia&amp;quot;                &amp;quot;Switzerland&amp;quot;          
## [10] &amp;quot;Other&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# this relevels the factor in order of frequency:
mydata &amp;lt;- mydata %&amp;gt;% 
  mutate(country_lump = fct_infreq(country_lump))
levels(mydata$country_lump)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Other&amp;quot;                 &amp;quot;Burkina Faso&amp;quot;          &amp;quot;Senegal&amp;quot;              
##  [4] &amp;quot;Guinea-Bissau&amp;quot;         &amp;quot;Mali&amp;quot;                  &amp;quot;Nicaragua&amp;quot;            
##  [7] &amp;quot;Sao Tome and Principe&amp;quot; &amp;quot;Saudi Arabia&amp;quot;          &amp;quot;Serbia&amp;quot;               
## [10] &amp;quot;Switzerland&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# now plotting order has changed
ggplot(mydata, aes(x=country_lump, y=lifeExp, color = year)) +
  geom_point() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sph-r-programming-2023.netlify.app/class/05-class_files/figure-html/unnamed-chunk-11-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>(Class 6) Part 5 contd: Data summarizing, reshaping, and wrangling with multiple tables (contd)</title>
      <link>https://sph-r-programming-2023.netlify.app/class/06-class/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/06-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this-years-class-video&#34; id=&#34;toc-this-years-class-video&#34;&gt;This year’s class video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-years-class-video-part-5-continued-split-about-the-same&#34; id=&#34;toc-last-years-class-video-part-5-continued-split-about-the-same&#34;&gt;Last Year’s Class Video (Part 5 continued, split about the same)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#muddiest-points&#34; id=&#34;toc-muddiest-points&#34;&gt;Muddiest Points&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#other-piping-troubles&#34; id=&#34;toc-other-piping-troubles&#34;&gt;Other: piping troubles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;In this class we will finish the part5 material from &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this folder link&lt;/a&gt;. There are a couple updates so please download &lt;code&gt;part5_updated.Rmd&lt;/code&gt; and &lt;code&gt;part5_haven.Rmd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;this-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;This year’s class video&lt;/h2&gt;
&lt;p&gt;See Slack for the zoom recording link (though zoom had some malfunction that failed to show the correct Rstudio screen, so last year’s video may be more helpful)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-years-class-video-part-5-continued-split-about-the-same&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last Year’s Class Video (Part 5 continued, split about the same)&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/c3ZuPANIEAM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/06-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-points&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Muddiest Points&lt;/h1&gt;
&lt;p&gt;Somewhat equal numbers said that pivot/joining were clear or were muddy! I think that sounds about right, though, these concepts are tricky and will take a lot of practice. Today’s class will use these methods again and I hope that will help solidify what you’ve learned.&lt;/p&gt;
&lt;p&gt;I really do recommend watching the short video that I recommended last class if you’re still having trouble with grasping pivoting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/4ZIFb1BoIB4&#34;&gt;Dr. Kelly Bodwin’s Reshaping Data Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For a short version, watch the &lt;a href=&#34;https://youtu.be/4ZIFb1BoIB4?t=365&#34;&gt;pivot_longer excerpt&lt;/a&gt; about “working backwards” from a plot. Then watch the &lt;a href=&#34;https://youtu.be/4ZIFb1BoIB4?t=620&#34;&gt;pivot_wider excerpt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stat545.com/join-cheatsheet.html&#34;&gt;Also read this join cheatsheet&lt;/a&gt; for some good explanations/examples about which join to use when!&lt;/p&gt;
&lt;p&gt;Definitely do the readings in the R for Data Science in the appropriate chapters as well! &lt;a href=&#34;https://r4ds.had.co.nz/relational-data.html&#34;&gt;joining&lt;/a&gt;, &lt;a href=&#34;https://r4ds.had.co.nz/tidy-data.html?#pivoting&#34;&gt;pivoting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the different join types, here are some visuals I find helpful:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;here::here()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/minnier/Dropbox (Personal)/Work/repos/sph_r_programming_site_2023&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::include_graphics(here::here(&amp;quot;static/img/bind_rows_add.png&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../static/img/bind_rows_add.png&#34; width=&#34;314&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;separate(), needed a few more minutes to get it figured out&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s do another short example!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.1.0
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mydata &amp;lt;- tibble(
  name = c(&amp;quot;Doe, Jane&amp;quot;, &amp;quot;Smith, M&amp;quot;, &amp;quot;Lee, Dave&amp;quot;),
  rx = c(&amp;quot;Advil; 4.5 mg&amp;quot;, &amp;quot;Tylenol; 300mg&amp;quot;, &amp;quot;Advil; 2.5 mg&amp;quot;)
)

# obviously the dosage makes no sense, but, for sake of example
mydata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 2
##   name      rx            
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;         
## 1 Doe, Jane Advil; 4.5 mg 
## 2 Smith, M  Tylenol; 300mg
## 3 Lee, Dave Advil; 2.5 mg&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# by default, separates using most special/non-alphanumeric characters
mydata %&amp;gt;%
  separate(name, into = c(&amp;quot;last_name&amp;quot;, &amp;quot;first_name&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   last_name first_name rx            
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;         
## 1 Doe       Jane       Advil; 4.5 mg 
## 2 Smith     M          Tylenol; 300mg
## 3 Lee       Dave       Advil; 2.5 mg&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# since there are special characters in rx, will need to be more specific
# note it tried to split on the . since we only have 2 columns named, it removed the rest
mydata %&amp;gt;%
  separate(rx, into = c(&amp;quot;rx_name&amp;quot;, &amp;quot;rx_dose&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 2 pieces. Additional pieces discarded in 2 rows [1, 3].&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   name      rx_name rx_dose
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  
## 1 Doe, Jane Advil   4      
## 2 Smith, M  Tylenol 300mg  
## 3 Lee, Dave Advil   2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# if we add in some more columns, we can see it&amp;#39;s splitting based on ; . and space!
mydata %&amp;gt;%
  separate(rx, into = c(&amp;quot;rx_name&amp;quot;, &amp;quot;rx_dose&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 5 pieces. Missing pieces filled with `NA` in 3 rows [1, 2, 3].&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 6
##   name      rx_name rx_dose a     b     c    
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 Doe, Jane Advil   4       5     mg    &amp;lt;NA&amp;gt; 
## 2 Smith, M  Tylenol 300mg   &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt; 
## 3 Lee, Dave Advil   2       5     mg    &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# still have a space
mydata %&amp;gt;%
  separate(rx, into = c(&amp;quot;rx_name&amp;quot;, &amp;quot;rx_dose&amp;quot;), sep=&amp;quot;;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   name      rx_name rx_dose  
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    
## 1 Doe, Jane Advil   &amp;quot; 4.5 mg&amp;quot;
## 2 Smith, M  Tylenol &amp;quot; 300mg&amp;quot; 
## 3 Lee, Dave Advil   &amp;quot; 2.5 mg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# removed the space
mydata %&amp;gt;%
  separate(rx, into = c(&amp;quot;rx_name&amp;quot;, &amp;quot;rx_dose&amp;quot;), sep=&amp;quot;; &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   name      rx_name rx_dose
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  
## 1 Doe, Jane Advil   4.5 mg 
## 2 Smith, M  Tylenol 300mg  
## 3 Lee, Dave Advil   2.5 mg&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# removed the space, let&amp;#39;s also remove the mg
mydata %&amp;gt;%
  separate(rx, into = c(&amp;quot;rx_name&amp;quot;, &amp;quot;rx_dose_mg&amp;quot;), sep=&amp;quot;; &amp;quot;) %&amp;gt;%
  mutate(rx_dose_mg = str_remove_all(rx_dose_mg, &amp;quot;mg&amp;quot;),
         rx_dose_mg = as.numeric(rx_dose_mg))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3
##   name      rx_name rx_dose_mg
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
## 1 Doe, Jane Advil          4.5
## 2 Smith, M  Tylenol      300  
## 3 Lee, Dave Advil          2.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# all together, and also leave the name column in
mydata %&amp;gt;%
  separate(name, into = c(&amp;quot;last_name&amp;quot;, &amp;quot;first_name&amp;quot;), remove = FALSE) %&amp;gt;%
  separate(rx, into = c(&amp;quot;rx_name&amp;quot;, &amp;quot;rx_dose_mg&amp;quot;), sep=&amp;quot;; &amp;quot;) %&amp;gt;%
  mutate(rx_dose_mg = str_remove_all(rx_dose_mg, &amp;quot;mg&amp;quot;),
         rx_dose_mg = as.numeric(rx_dose_mg))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 5
##   name      last_name first_name rx_name rx_dose_mg
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
## 1 Doe, Jane Doe       Jane       Advil          4.5
## 2 Smith, M  Smith     M          Tylenol      300  
## 3 Lee, Dave Lee       Dave       Advil          2.5&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;other-piping-troubles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other: piping troubles&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I have issues with my pipes where I think I’m putting things in the wrong order and nothing happens- I don’t get errors I can google, it just doesn’t work. Most often it’s when I end a pipe with %&amp;gt;% tabyl(variable), maybe that is a no-no? But I’ve found I end up having to break pipes into multiple pieces because I can’t string them together the right way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I have a hard time understanding when to pipe things together or knowing when to nest a function as well. I’m glad you’ve reassured us in class that it’s ok that we put our functions into pieces. I think that eases the stress with learning as I feel like trying to make everything happen in one command can be very overwhelming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, yes! Please separate out your pipes/commands if it makes things more clear or makes it work better for you!&lt;/p&gt;
&lt;p&gt;I’m not sure what’s happening with the no-errors-broken situation. I will say that I often separate the &lt;code&gt;taybl(variable)&lt;/code&gt; code when I’m doing analysis work, just because I am saving intermediate data sets after data cleaning or sub-setting and don’t want to save that tabyl. Something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(janitor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;janitor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     chisq.test, fisher.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars6 &amp;lt;- mtcars %&amp;gt;% filter(cyl==6)
# check that it worked
mtcars6 %&amp;gt;% tabyl(cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Using one column matrices in `filter()` was deprecated in dplyr 1.1.0.
## ℹ Please use one dimensional logical vectors instead.
## ℹ The deprecated feature was likely used in the dplyr package.
##   Please report the issue at &amp;lt;]8;;https://github.com/tidyverse/dplyr/issueshttps://github.com/tidyverse/dplyr/issues]8;;&amp;gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  cyl n percent
##    6 7       1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a beginner I definitely think doing each step individually and seeing the result and (saving it/assigning it appropriately!) is the way to learn what each function does. I tend to string things together because I am used to doing that, but I’ll try not to do that so much if it’s adding confusion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Part 7 (Class 8): Lists/Functions/Intro to Purrr</title>
      <link>https://sph-r-programming-2023.netlify.app/class/08-class/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/08-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-video&#34; id=&#34;toc-class-video&#34;&gt;Class Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the part7 sub-folder from &lt;a href=&#34;https://www.dropbox.com/sh/q4z72523kl84ywp/AAASb1YIFRpxzrjOeq1FVcXua?dl=0&#34;&gt;this dropbox link&lt;/a&gt;. Be sure to unzip if necessary. Knit the &lt;code&gt;part7.Rmd&lt;/code&gt; to install any required packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IJYgWOfZa-M&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/08-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>(Class 7) Part 6: Messy data example, more data wrangling and ggplot</title>
      <link>https://sph-r-programming-2023.netlify.app/class/07-class/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/07-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#this-years-class-video&#34; id=&#34;toc-this-years-class-video&#34;&gt;This year’s class video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-years-class-video-class-7-part-6&#34; id=&#34;toc-last-years-class-video-class-7-part-6&#34;&gt;Last Year’s Class Video (Class 7, Part 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Last class we finished up part5 materials. This is class 7, and we will start with part6 now (sorry, we’re going to be off by one from now on). Please download the part6 sub-folder from &lt;a href=&#34;https://bit.ly/bsta504_dropbox_2023&#34;&gt;this dropbox folder link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This section is mainly a practice, with some additional ggplot lessons. There will be lots of time for challenges so that you can get practice working on these data wrangling and graphing problems together.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;this-years-class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;This year’s class video&lt;/h2&gt;
&lt;p&gt;See Slack for the zoom recording link (though zoom had some malfunction that failed to show the correct Rstudio screen, so last year’s video may be more helpful)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-years-class-video-class-7-part-6&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last Year’s Class Video (Class 7, Part 6)&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/j-eoXIEGQQg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/07-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Part 8 (Class 9). Intro to stats/`broom`/More Purrr</title>
      <link>https://sph-r-programming-2023.netlify.app/class/09-class/</link>
      <pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/09-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-video&#34; id=&#34;toc-class-video&#34;&gt;Class Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the part8 sub-folder from &lt;a href=&#34;https://www.dropbox.com/sh/q4z72523kl84ywp/AAASb1YIFRpxzrjOeq1FVcXua?dl=0&#34;&gt;this dropbox link&lt;/a&gt;. Be sure to unzip if necessary. Knit the &lt;code&gt;part8.Rmd&lt;/code&gt; to install any required packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/X73yjK2zhH4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/09-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Part 9 (Class 10): More Stats Stuff/Summary Tables</title>
      <link>https://sph-r-programming-2023.netlify.app/class/10-class/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/10-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-video&#34; id=&#34;toc-class-video&#34;&gt;Class Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-class&#34; id=&#34;toc-post-class&#34;&gt;Post-Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Please download the part9 sub-folder from &lt;a href=&#34;https://www.dropbox.com/sh/q4z72523kl84ywp/AAASb1YIFRpxzrjOeq1FVcXua?dl=0&#34;&gt;this dropbox link&lt;/a&gt;. Be sure to unzip if necessary. Knit the &lt;code&gt;part9.Rmd&lt;/code&gt; to install any required packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2d-oAKAkkfI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/10-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Post-Class&lt;/h1&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bit.ly/bsta504_postclass_survey&#34; class=&#34;uri&#34;&gt;https://bit.ly/bsta504_postclass_survey&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Class 11: Finish Part 9 &#43; Part 10: Advanced Functions and Loose Ends</title>
      <link>https://sph-r-programming-2023.netlify.app/class/11-class/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/11-class/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r-project-files&#34; id=&#34;toc-r-project-files&#34;&gt;R Project files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#class-video&#34; id=&#34;toc-class-video&#34;&gt;Class Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;In this class we finished part 9, and covered about half of part 10 in &lt;a href=&#34;https://www.dropbox.com/sh/q4z72523kl84ywp/AAASb1YIFRpxzrjOeq1FVcXua?dl=0&#34;&gt;the dropbox folder&lt;/a&gt;. Be sure to unzip if necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class Video&lt;/h2&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MAgCL61BkH0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/class/11-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>tmp</title>
      <link>https://sph-r-programming-2023.netlify.app/class/00-class-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sph-r-programming-2023.netlify.app/class/00-class-template/</guid>
      <description>
&lt;script src=&#34;https://sph-r-programming-2023.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;r-project-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Project files&lt;/h2&gt;
&lt;p&gt;Before each class, I will load an R project on github, and provide the download link here. Unzip this folder and open in Rstudio by double clicking on the .Rproj file. This folder will have the files for this part and the assignment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;class-video&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Class Video&lt;/h2&gt;
&lt;p&gt;The video will be uploaded after class.&lt;/p&gt;
&lt;p&gt;View last year’s class and materials &lt;a href=&#34;https://sph-r-programming.netlify.app/class/01-class/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;!-- &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yCPcijCj15c&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
&lt;/div&gt;
&lt;div id=&#34;slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slides&lt;/h2&gt;
&lt;p&gt;To be posted.&lt;/p&gt;
&lt;!-- Open the class introduction slides in a separate window: &lt;a href=&#34;https://sph-r-programming-2022.netlify.app/slides/01-introduction_slides#1&#34; target=&#34;_blank&#34;&gt;https://sph-r-programming-2022.netlify.app/01-introduction_slides#1&lt;/a&gt; --&gt;
&lt;!-- ```{r echo=FALSE} --&gt;
&lt;!-- knitr::include_url(&#39;https://sph-r-programming-2022.netlify.com/slides/01-introduction_slides#1&#39;) --&gt;
&lt;!-- ``` --&gt;
&lt;div id=&#34;post-class&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Post-Class&lt;/h3&gt;
&lt;p&gt;Please fill out the following survey and we will discuss the results during the next lecture. All responses will be anonymous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearest Point: What was the most clear part of the lecture?&lt;/li&gt;
&lt;li&gt;Muddiest Point: What was the most unclear part of the lecture to you?&lt;/li&gt;
&lt;li&gt;Anything Else: Is there something you’d like me to know?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://forms.gle/4tVx1mL7SzQx7MCu5&#34; class=&#34;uri&#34;&gt;https://forms.gle/4tVx1mL7SzQx7MCu5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;muddiest-pointsclearest-points&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Muddiest Points/Clearest Points&lt;/h2&gt;
&lt;p&gt;I will add the muddiest/clearest points from the survey after the first class.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
